/*
 * generated by Xtext
 */
package org.sourcepit.java.formatting

import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter
import org.eclipse.xtext.formatting.impl.FormattingConfig
import org.sourcepit.java.services.JavaGrammarAccess

// import com.google.inject.Inject;
// import org.sourcepit.java.services.JavaGrammarAccess
/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#formatting
 * on how and when to use it 
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
class JavaFormatter extends AbstractDeclarativeFormatter {

	//	@Inject extension JavaGrammarAccess
	override protected void configureFormatting(FormattingConfig c) {
		configureFormatting(c, grammarAccess as JavaGrammarAccess)
	}

	def void configureFormatting(FormattingConfig c, JavaGrammarAccess jga) {

		// It's usually a good idea to activate the following three statements.
		// They will add and preserve newlines around comments
		c.setLinewrap(0, 1, 2).before(jga.SL_COMMENTRule)
		c.setLinewrap(0, 1, 2).before(jga.ML_COMMENTRule)
		c.setLinewrap(0, 1, 1).after(jga.ML_COMMENTRule)
	}

}
