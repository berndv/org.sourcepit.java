/*
 * generated by Xtext
 */

package org.sourcepit.java.services;

import java.util.List;

import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

import com.google.inject.Inject;
import com.google.inject.Singleton;


@Singleton
public class JavaGrammarAccess extends AbstractGrammarElementFinder {


   public class ModelElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
      private final Assignment cLiteralsAssignment = (Assignment) rule.eContents().get(1);
      private final RuleCall cLiteralsLiteralParserRuleCall_0 = (RuleCall) cLiteralsAssignment.eContents().get(0);

      // Model:
      // literals+=Literal*;
      public ParserRule getRule() {
         return rule;
      }

      // literals+=Literal*
      public Assignment getLiteralsAssignment() {
         return cLiteralsAssignment;
      }

      // Literal
      public RuleCall getLiteralsLiteralParserRuleCall_0() {
         return cLiteralsLiteralParserRuleCall_0;
      }
   }

   public class LiteralElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
      private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
      private final RuleCall cIntegerLiteralParserRuleCall_0 = (RuleCall) cAlternatives.eContents().get(0);
      private final RuleCall cFloatingPointLiteralParserRuleCall_1 = (RuleCall) cAlternatives.eContents().get(1);
      private final RuleCall cBooleanLiteralParserRuleCall_2 = (RuleCall) cAlternatives.eContents().get(2);
      private final RuleCall cCharacterLiteralParserRuleCall_3 = (RuleCall) cAlternatives.eContents().get(3);
      private final RuleCall cStringLiteralParserRuleCall_4 = (RuleCall) cAlternatives.eContents().get(4);
      private final RuleCall cNullLiteralParserRuleCall_5 = (RuleCall) cAlternatives.eContents().get(5);

      // Literal:
      // IntegerLiteral | FloatingPointLiteral | BooleanLiteral | CharacterLiteral | StringLiteral | NullLiteral;
      public ParserRule getRule() {
         return rule;
      }

      // IntegerLiteral | FloatingPointLiteral | BooleanLiteral | CharacterLiteral | StringLiteral | NullLiteral
      public Alternatives getAlternatives() {
         return cAlternatives;
      }

      // IntegerLiteral
      public RuleCall getIntegerLiteralParserRuleCall_0() {
         return cIntegerLiteralParserRuleCall_0;
      }

      // FloatingPointLiteral
      public RuleCall getFloatingPointLiteralParserRuleCall_1() {
         return cFloatingPointLiteralParserRuleCall_1;
      }

      // BooleanLiteral
      public RuleCall getBooleanLiteralParserRuleCall_2() {
         return cBooleanLiteralParserRuleCall_2;
      }

      // CharacterLiteral
      public RuleCall getCharacterLiteralParserRuleCall_3() {
         return cCharacterLiteralParserRuleCall_3;
      }

      // StringLiteral
      public RuleCall getStringLiteralParserRuleCall_4() {
         return cStringLiteralParserRuleCall_4;
      }

      // NullLiteral
      public RuleCall getNullLiteralParserRuleCall_5() {
         return cNullLiteralParserRuleCall_5;
      }
   }

   public class IntegerLiteralElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerLiteral");
      private final Assignment cValueAssignment = (Assignment) rule.eContents().get(1);
      private final Alternatives cValueAlternatives_0 = (Alternatives) cValueAssignment.eContents().get(0);
      private final RuleCall cValueDecimalIntegerLiteralTerminalRuleCall_0_0 = (RuleCall) cValueAlternatives_0.eContents()
         .get(0);
      private final RuleCall cValueHexIntegerLiteralTerminalRuleCall_0_1 = (RuleCall) cValueAlternatives_0.eContents()
         .get(1);
      private final RuleCall cValueOctalIntegerLiteralTerminalRuleCall_0_2 = (RuleCall) cValueAlternatives_0.eContents()
         .get(2);
      private final RuleCall cValueBinaryIntegerLiteralTerminalRuleCall_0_3 = (RuleCall) cValueAlternatives_0.eContents()
         .get(3);

      // / *
      // * 3.10.1. Integer Literals
      // * / IntegerLiteral:
      // value=(DecimalIntegerLiteral | HexIntegerLiteral | OctalIntegerLiteral | BinaryIntegerLiteral);
      public ParserRule getRule() {
         return rule;
      }

      // value=(DecimalIntegerLiteral | HexIntegerLiteral | OctalIntegerLiteral | BinaryIntegerLiteral)
      public Assignment getValueAssignment() {
         return cValueAssignment;
      }

      // DecimalIntegerLiteral | HexIntegerLiteral | OctalIntegerLiteral | BinaryIntegerLiteral
      public Alternatives getValueAlternatives_0() {
         return cValueAlternatives_0;
      }

      // DecimalIntegerLiteral
      public RuleCall getValueDecimalIntegerLiteralTerminalRuleCall_0_0() {
         return cValueDecimalIntegerLiteralTerminalRuleCall_0_0;
      }

      // HexIntegerLiteral
      public RuleCall getValueHexIntegerLiteralTerminalRuleCall_0_1() {
         return cValueHexIntegerLiteralTerminalRuleCall_0_1;
      }

      // OctalIntegerLiteral
      public RuleCall getValueOctalIntegerLiteralTerminalRuleCall_0_2() {
         return cValueOctalIntegerLiteralTerminalRuleCall_0_2;
      }

      // BinaryIntegerLiteral
      public RuleCall getValueBinaryIntegerLiteralTerminalRuleCall_0_3() {
         return cValueBinaryIntegerLiteralTerminalRuleCall_0_3;
      }
   }

   public class FloatingPointLiteralElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FloatingPointLiteral");
      private final Assignment cValueAssignment = (Assignment) rule.eContents().get(1);
      private final Alternatives cValueAlternatives_0 = (Alternatives) cValueAssignment.eContents().get(0);
      private final RuleCall cValueDecimalFloatingPointLiteralTerminalRuleCall_0_0 = (RuleCall) cValueAlternatives_0.eContents()
         .get(0);
      private final RuleCall cValueHexadecimalFloatingPointLiteralTerminalRuleCall_0_1 = (RuleCall) cValueAlternatives_0.eContents()
         .get(1);

      // / *
      // * 3.10.2. Floating-Point Literals
      // * / FloatingPointLiteral:
      // value=(DecimalFloatingPointLiteral | HexadecimalFloatingPointLiteral);
      public ParserRule getRule() {
         return rule;
      }

      // value=(DecimalFloatingPointLiteral | HexadecimalFloatingPointLiteral)
      public Assignment getValueAssignment() {
         return cValueAssignment;
      }

      // DecimalFloatingPointLiteral | HexadecimalFloatingPointLiteral
      public Alternatives getValueAlternatives_0() {
         return cValueAlternatives_0;
      }

      // DecimalFloatingPointLiteral
      public RuleCall getValueDecimalFloatingPointLiteralTerminalRuleCall_0_0() {
         return cValueDecimalFloatingPointLiteralTerminalRuleCall_0_0;
      }

      // HexadecimalFloatingPointLiteral
      public RuleCall getValueHexadecimalFloatingPointLiteralTerminalRuleCall_0_1() {
         return cValueHexadecimalFloatingPointLiteralTerminalRuleCall_0_1;
      }
   }

   public class BooleanLiteralElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanLiteral");
      private final Assignment cValueAssignment = (Assignment) rule.eContents().get(1);
      private final Alternatives cValueAlternatives_0 = (Alternatives) cValueAssignment.eContents().get(0);
      private final RuleCall cValueTRUETerminalRuleCall_0_0 = (RuleCall) cValueAlternatives_0.eContents().get(0);
      private final RuleCall cValueFALSETerminalRuleCall_0_1 = (RuleCall) cValueAlternatives_0.eContents().get(1);

      // / *
      // * 3.10.3. Boolean Literals
      // * / BooleanLiteral:
      // value=(TRUE | FALSE);
      public ParserRule getRule() {
         return rule;
      }

      // value=(TRUE | FALSE)
      public Assignment getValueAssignment() {
         return cValueAssignment;
      }

      // TRUE | FALSE
      public Alternatives getValueAlternatives_0() {
         return cValueAlternatives_0;
      }

      // TRUE
      public RuleCall getValueTRUETerminalRuleCall_0_0() {
         return cValueTRUETerminalRuleCall_0_0;
      }

      // FALSE
      public RuleCall getValueFALSETerminalRuleCall_0_1() {
         return cValueFALSETerminalRuleCall_0_1;
      }
   }

   public class CharacterLiteralElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CharacterLiteral");
      private final Assignment cValueAssignment = (Assignment) rule.eContents().get(1);
      private final RuleCall cValueCHARACTERTerminalRuleCall_0 = (RuleCall) cValueAssignment.eContents().get(0);

      // / *
      // * 3.10.4. Character Literals
      // * / CharacterLiteral:
      // value=CHARACTER;
      public ParserRule getRule() {
         return rule;
      }

      // value=CHARACTER
      public Assignment getValueAssignment() {
         return cValueAssignment;
      }

      // CHARACTER
      public RuleCall getValueCHARACTERTerminalRuleCall_0() {
         return cValueCHARACTERTerminalRuleCall_0;
      }
   }

   public class StringLiteralElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringLiteral");
      private final Assignment cValueAssignment = (Assignment) rule.eContents().get(1);
      private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall) cValueAssignment.eContents().get(0);

      // StringLiteral:
      // value=STRING;
      public ParserRule getRule() {
         return rule;
      }

      // value=STRING
      public Assignment getValueAssignment() {
         return cValueAssignment;
      }

      // STRING
      public RuleCall getValueSTRINGTerminalRuleCall_0() {
         return cValueSTRINGTerminalRuleCall_0;
      }
   }

   public class NullLiteralElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NullLiteral");
      private final Assignment cValueAssignment = (Assignment) rule.eContents().get(1);
      private final RuleCall cValueNULLTerminalRuleCall_0 = (RuleCall) cValueAssignment.eContents().get(0);

      // / *
      // * 3.10.7. The Null Literal
      // * / NullLiteral:
      // value=NULL;
      public ParserRule getRule() {
         return rule;
      }

      // value=NULL
      public Assignment getValueAssignment() {
         return cValueAssignment;
      }

      // NULL
      public RuleCall getValueNULLTerminalRuleCall_0() {
         return cValueNULLTerminalRuleCall_0;
      }
   }


   private final ModelElements pModel;
   private final LiteralElements pLiteral;
   private final IntegerLiteralElements pIntegerLiteral;
   private final TerminalRule tDecimalIntegerLiteral;
   private final TerminalRule tHexIntegerLiteral;
   private final TerminalRule tOctalIntegerLiteral;
   private final TerminalRule tBinaryIntegerLiteral;
   private final TerminalRule tIntegerTypeSuffix;
   private final TerminalRule tDecimalNumeral;
   private final TerminalRule tNonZeroDigit;
   private final TerminalRule tDigits;
   private final TerminalRule tDigit;
   private final TerminalRule tDigitsAndUnderscores;
   private final TerminalRule tDigitOrUnderscore;
   private final TerminalRule tUnderscores;
   private final TerminalRule tHexNumeral;
   private final TerminalRule tHexDigits;
   private final TerminalRule tHexDigit;
   private final TerminalRule tHexDigitsAndUnderscores;
   private final TerminalRule tHexDigitOrUnderscore;
   private final TerminalRule tOctalNumeral;
   private final TerminalRule tOctalDigits;
   private final TerminalRule tOctalDigit;
   private final TerminalRule tOctalDigitsAndUnderscores;
   private final TerminalRule tOctalDigitOrUnderscore;
   private final TerminalRule tBinaryNumeral;
   private final TerminalRule tBinaryDigits;
   private final TerminalRule tBinaryDigit;
   private final TerminalRule tBinaryDigitsAndUnderscores;
   private final TerminalRule tBinaryDigitOrUnderscore;
   private final FloatingPointLiteralElements pFloatingPointLiteral;
   private final TerminalRule tDecimalFloatingPointLiteral;
   private final TerminalRule tExponentPart;
   private final TerminalRule tExponentIndicator;
   private final TerminalRule tSignedInteger;
   private final TerminalRule tSIGN;
   private final TerminalRule tFloatTypeSuffix;
   private final TerminalRule tHexadecimalFloatingPointLiteral;
   private final TerminalRule tHexSignificand;
   private final TerminalRule tBinaryExponent;
   private final TerminalRule tBinaryExponentIndicator;
   private final BooleanLiteralElements pBooleanLiteral;
   private final TerminalRule tTRUE;
   private final TerminalRule tFALSE;
   private final CharacterLiteralElements pCharacterLiteral;
   private final TerminalRule tCHARACTER;
   private final StringLiteralElements pStringLiteral;
   private final TerminalRule tSTRING;
   private final TerminalRule tEscapeSequence;
   private final TerminalRule tOctalEscape;
   private final TerminalRule tZeroToThree;
   private final TerminalRule tUnicodeEscape;
   private final TerminalRule tUnicodeMarker;
   private final NullLiteralElements pNullLiteral;
   private final TerminalRule tNULL;
   private final TerminalRule tIDENTIFIER;
   private final TerminalRule tJavaLetter;
   private final TerminalRule tJavaLetterOrDigit;
   private final TerminalRule tML_COMMENT;
   private final TerminalRule tSL_COMMENT;
   private final TerminalRule tWS;

   private final Grammar grammar;

   @Inject
   public JavaGrammarAccess(GrammarProvider grammarProvider) {
      this.grammar = internalFindGrammar(grammarProvider);
      this.pModel = new ModelElements();
      this.pLiteral = new LiteralElements();
      this.pIntegerLiteral = new IntegerLiteralElements();
      this.tDecimalIntegerLiteral = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DecimalIntegerLiteral");
      this.tHexIntegerLiteral = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HexIntegerLiteral");
      this.tOctalIntegerLiteral = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OctalIntegerLiteral");
      this.tBinaryIntegerLiteral = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BinaryIntegerLiteral");
      this.tIntegerTypeSuffix = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerTypeSuffix");
      this.tDecimalNumeral = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DecimalNumeral");
      this.tNonZeroDigit = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NonZeroDigit");
      this.tDigits = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "Digits");
      this.tDigit = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "Digit");
      this.tDigitsAndUnderscores = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DigitsAndUnderscores");
      this.tDigitOrUnderscore = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DigitOrUnderscore");
      this.tUnderscores = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "Underscores");
      this.tHexNumeral = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HexNumeral");
      this.tHexDigits = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HexDigits");
      this.tHexDigit = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HexDigit");
      this.tHexDigitsAndUnderscores = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(),
         "HexDigitsAndUnderscores");
      this.tHexDigitOrUnderscore = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HexDigitOrUnderscore");
      this.tOctalNumeral = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OctalNumeral");
      this.tOctalDigits = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OctalDigits");
      this.tOctalDigit = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OctalDigit");
      this.tOctalDigitsAndUnderscores = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(),
         "OctalDigitsAndUnderscores");
      this.tOctalDigitOrUnderscore = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OctalDigitOrUnderscore");
      this.tBinaryNumeral = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BinaryNumeral");
      this.tBinaryDigits = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BinaryDigits");
      this.tBinaryDigit = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BinaryDigit");
      this.tBinaryDigitsAndUnderscores = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(),
         "BinaryDigitsAndUnderscores");
      this.tBinaryDigitOrUnderscore = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(),
         "BinaryDigitOrUnderscore");
      this.pFloatingPointLiteral = new FloatingPointLiteralElements();
      this.tDecimalFloatingPointLiteral = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(),
         "DecimalFloatingPointLiteral");
      this.tExponentPart = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ExponentPart");
      this.tExponentIndicator = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ExponentIndicator");
      this.tSignedInteger = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SignedInteger");
      this.tSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SIGN");
      this.tFloatTypeSuffix = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FloatTypeSuffix");
      this.tHexadecimalFloatingPointLiteral = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(),
         "HexadecimalFloatingPointLiteral");
      this.tHexSignificand = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HexSignificand");
      this.tBinaryExponent = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BinaryExponent");
      this.tBinaryExponentIndicator = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(),
         "BinaryExponentIndicator");
      this.pBooleanLiteral = new BooleanLiteralElements();
      this.tTRUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TRUE");
      this.tFALSE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FALSE");
      this.pCharacterLiteral = new CharacterLiteralElements();
      this.tCHARACTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CHARACTER");
      this.pStringLiteral = new StringLiteralElements();
      this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING");
      this.tEscapeSequence = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EscapeSequence");
      this.tOctalEscape = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OctalEscape");
      this.tZeroToThree = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ZeroToThree");
      this.tUnicodeEscape = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UnicodeEscape");
      this.tUnicodeMarker = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UnicodeMarker");
      this.pNullLiteral = new NullLiteralElements();
      this.tNULL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NULL");
      this.tIDENTIFIER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IDENTIFIER");
      this.tJavaLetter = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "JavaLetter");
      this.tJavaLetterOrDigit = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "JavaLetterOrDigit");
      this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT");
      this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT");
      this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS");
   }

   protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
      Grammar grammar = grammarProvider.getGrammar(this);
      while (grammar != null) {
         if ("org.sourcepit.java.Java".equals(grammar.getName())) {
            return grammar;
         }
         List<Grammar> grammars = grammar.getUsedGrammars();
         if (!grammars.isEmpty()) {
            grammar = grammars.iterator().next();
         }
         else {
            return null;
         }
      }
      return grammar;
   }


   public Grammar getGrammar() {
      return grammar;
   }


   // Model:
   // literals+=Literal*;
   public ModelElements getModelAccess() {
      return pModel;
   }

   public ParserRule getModelRule() {
      return getModelAccess().getRule();
   }

   // Literal:
   // IntegerLiteral | FloatingPointLiteral | BooleanLiteral | CharacterLiteral | StringLiteral | NullLiteral;
   public LiteralElements getLiteralAccess() {
      return pLiteral;
   }

   public ParserRule getLiteralRule() {
      return getLiteralAccess().getRule();
   }

   // / *
   // * 3.10.1. Integer Literals
   // * / IntegerLiteral:
   // value=(DecimalIntegerLiteral | HexIntegerLiteral | OctalIntegerLiteral | BinaryIntegerLiteral);
   public IntegerLiteralElements getIntegerLiteralAccess() {
      return pIntegerLiteral;
   }

   public ParserRule getIntegerLiteralRule() {
      return getIntegerLiteralAccess().getRule();
   }

   // terminal DecimalIntegerLiteral:
   // DecimalNumeral IntegerTypeSuffix?;
   public TerminalRule getDecimalIntegerLiteralRule() {
      return tDecimalIntegerLiteral;
   }

   // terminal HexIntegerLiteral:
   // HexNumeral IntegerTypeSuffix?;
   public TerminalRule getHexIntegerLiteralRule() {
      return tHexIntegerLiteral;
   }

   // terminal OctalIntegerLiteral:
   // OctalNumeral IntegerTypeSuffix?;
   public TerminalRule getOctalIntegerLiteralRule() {
      return tOctalIntegerLiteral;
   }

   // terminal BinaryIntegerLiteral:
   // BinaryNumeral IntegerTypeSuffix?;
   public TerminalRule getBinaryIntegerLiteralRule() {
      return tBinaryIntegerLiteral;
   }

   // terminal fragment IntegerTypeSuffix:
   // "l" | "L";
   public TerminalRule getIntegerTypeSuffixRule() {
      return tIntegerTypeSuffix;
   }

   // // Decimal
   // terminal fragment DecimalNumeral:
   // "0" | NonZeroDigit Digits? | NonZeroDigit Underscores Digits;
   public TerminalRule getDecimalNumeralRule() {
      return tDecimalNumeral;
   }

   // terminal fragment NonZeroDigit:
   // "1".."9";
   public TerminalRule getNonZeroDigitRule() {
      return tNonZeroDigit;
   }

   // terminal fragment Digits:
   // Digit | Digit DigitsAndUnderscores? Digit;
   public TerminalRule getDigitsRule() {
      return tDigits;
   }

   // terminal fragment Digit:
   // "0" | NonZeroDigit;
   public TerminalRule getDigitRule() {
      return tDigit;
   }

   // terminal fragment DigitsAndUnderscores:
   // DigitOrUnderscore DigitOrUnderscore*;
   public TerminalRule getDigitsAndUnderscoresRule() {
      return tDigitsAndUnderscores;
   }

   // terminal fragment DigitOrUnderscore:
   // Digit | "_";
   public TerminalRule getDigitOrUnderscoreRule() {
      return tDigitOrUnderscore;
   }

   // terminal fragment Underscores:
   // "_"+;
   public TerminalRule getUnderscoresRule() {
      return tUnderscores;
   }

   // //Hexadecimal
   // terminal fragment HexNumeral:
   // "0" ("x" | "X") HexDigits;
   public TerminalRule getHexNumeralRule() {
      return tHexNumeral;
   }

   // terminal fragment HexDigits:
   // HexDigit | HexDigit HexDigitsAndUnderscores? HexDigit;
   public TerminalRule getHexDigitsRule() {
      return tHexDigits;
   }

   // terminal fragment HexDigit:
   // "0".."9" | "a".."f" | "A".."F";
   public TerminalRule getHexDigitRule() {
      return tHexDigit;
   }

   // terminal fragment HexDigitsAndUnderscores:
   // HexDigitOrUnderscore HexDigitOrUnderscore*;
   public TerminalRule getHexDigitsAndUnderscoresRule() {
      return tHexDigitsAndUnderscores;
   }

   // terminal fragment HexDigitOrUnderscore:
   // HexDigit | "_";
   public TerminalRule getHexDigitOrUnderscoreRule() {
      return tHexDigitOrUnderscore;
   }

   // //Octal
   // terminal fragment OctalNumeral:
   // "0" OctalDigits | "0" Underscores OctalDigits;
   public TerminalRule getOctalNumeralRule() {
      return tOctalNumeral;
   }

   // terminal fragment OctalDigits:
   // OctalDigit | OctalDigit OctalDigitsAndUnderscores? OctalDigit;
   public TerminalRule getOctalDigitsRule() {
      return tOctalDigits;
   }

   // terminal fragment OctalDigit:
   // "0".."7";
   public TerminalRule getOctalDigitRule() {
      return tOctalDigit;
   }

   // terminal fragment OctalDigitsAndUnderscores:
   // OctalDigitOrUnderscore OctalDigitOrUnderscore*;
   public TerminalRule getOctalDigitsAndUnderscoresRule() {
      return tOctalDigitsAndUnderscores;
   }

   // terminal fragment OctalDigitOrUnderscore:
   // OctalDigit | "_";
   public TerminalRule getOctalDigitOrUnderscoreRule() {
      return tOctalDigitOrUnderscore;
   }

   // // Binary
   // terminal fragment BinaryNumeral:
   // "0" ("b" | "B") BinaryDigits;
   public TerminalRule getBinaryNumeralRule() {
      return tBinaryNumeral;
   }

   // terminal fragment BinaryDigits:
   // BinaryDigit | BinaryDigit BinaryDigitsAndUnderscores? BinaryDigit;
   public TerminalRule getBinaryDigitsRule() {
      return tBinaryDigits;
   }

   // terminal fragment BinaryDigit:
   // "0" | "1";
   public TerminalRule getBinaryDigitRule() {
      return tBinaryDigit;
   }

   // terminal fragment BinaryDigitsAndUnderscores:
   // BinaryDigitOrUnderscore BinaryDigitOrUnderscore*;
   public TerminalRule getBinaryDigitsAndUnderscoresRule() {
      return tBinaryDigitsAndUnderscores;
   }

   // terminal fragment BinaryDigitOrUnderscore:
   // BinaryDigit | "_";
   public TerminalRule getBinaryDigitOrUnderscoreRule() {
      return tBinaryDigitOrUnderscore;
   }

   // / *
   // * 3.10.2. Floating-Point Literals
   // * / FloatingPointLiteral:
   // value=(DecimalFloatingPointLiteral | HexadecimalFloatingPointLiteral);
   public FloatingPointLiteralElements getFloatingPointLiteralAccess() {
      return pFloatingPointLiteral;
   }

   public ParserRule getFloatingPointLiteralRule() {
      return getFloatingPointLiteralAccess().getRule();
   }

   // terminal DecimalFloatingPointLiteral:
   // Digits "." Digits? ExponentPart? FloatTypeSuffix? | "." Digits ExponentPart? FloatTypeSuffix? | Digits
   // ExponentPart
   // FloatTypeSuffix? | Digits FloatTypeSuffix;
   public TerminalRule getDecimalFloatingPointLiteralRule() {
      return tDecimalFloatingPointLiteral;
   }

   // terminal fragment ExponentPart:
   // ExponentIndicator SignedInteger;
   public TerminalRule getExponentPartRule() {
      return tExponentPart;
   }

   // terminal fragment ExponentIndicator:
   // "e" | "E";
   public TerminalRule getExponentIndicatorRule() {
      return tExponentIndicator;
   }

   // terminal fragment SignedInteger:
   // SIGN? Digits;
   public TerminalRule getSignedIntegerRule() {
      return tSignedInteger;
   }

   // terminal fragment SIGN:
   // "+" | "-";
   public TerminalRule getSIGNRule() {
      return tSIGN;
   }

   // terminal fragment FloatTypeSuffix:
   // "f" | "F" | "d" | "D";
   public TerminalRule getFloatTypeSuffixRule() {
      return tFloatTypeSuffix;
   }

   // terminal HexadecimalFloatingPointLiteral:
   // HexSignificand BinaryExponent FloatTypeSuffix?;
   public TerminalRule getHexadecimalFloatingPointLiteralRule() {
      return tHexadecimalFloatingPointLiteral;
   }

   // terminal fragment HexSignificand:
   // HexNumeral "."? | "0" ("x" | "X") HexDigit* "." HexDigit+;
   public TerminalRule getHexSignificandRule() {
      return tHexSignificand;
   }

   // terminal fragment BinaryExponent:
   // BinaryExponentIndicator SignedInteger;
   public TerminalRule getBinaryExponentRule() {
      return tBinaryExponent;
   }

   // terminal fragment BinaryExponentIndicator:
   // "p" | "P";
   public TerminalRule getBinaryExponentIndicatorRule() {
      return tBinaryExponentIndicator;
   }

   // / *
   // * 3.10.3. Boolean Literals
   // * / BooleanLiteral:
   // value=(TRUE | FALSE);
   public BooleanLiteralElements getBooleanLiteralAccess() {
      return pBooleanLiteral;
   }

   public ParserRule getBooleanLiteralRule() {
      return getBooleanLiteralAccess().getRule();
   }

   // terminal TRUE:
   // "true";
   public TerminalRule getTRUERule() {
      return tTRUE;
   }

   // terminal FALSE:
   // "false";
   public TerminalRule getFALSERule() {
      return tFALSE;
   }

   // / *
   // * 3.10.4. Character Literals
   // * / CharacterLiteral:
   // value=CHARACTER;
   public CharacterLiteralElements getCharacterLiteralAccess() {
      return pCharacterLiteral;
   }

   public ParserRule getCharacterLiteralRule() {
      return getCharacterLiteralAccess().getRule();
   }

   // terminal CHARACTER:
   // "\'" (EscapeSequence | !("\'" | "\\")) "\'";
   public TerminalRule getCHARACTERRule() {
      return tCHARACTER;
   }

   // StringLiteral:
   // value=STRING;
   public StringLiteralElements getStringLiteralAccess() {
      return pStringLiteral;
   }

   public ParserRule getStringLiteralRule() {
      return getStringLiteralAccess().getRule();
   }

   // terminal STRING:
   // "\"" (EscapeSequence | !("\\" | "\""))* "\"";
   public TerminalRule getSTRINGRule() {
      return tSTRING;
   }

   // terminal fragment EscapeSequence:
   // "\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | UnicodeEscape | OctalEscape;
   public TerminalRule getEscapeSequenceRule() {
      return tEscapeSequence;
   }

   // terminal fragment OctalEscape:
   // "\\" ZeroToThree OctalDigit OctalDigit | "\\" OctalDigit OctalDigit | "\\" OctalDigit;
   public TerminalRule getOctalEscapeRule() {
      return tOctalEscape;
   }

   // terminal fragment ZeroToThree:
   // "0".."3";
   public TerminalRule getZeroToThreeRule() {
      return tZeroToThree;
   }

   // terminal fragment UnicodeEscape:
   // "\\" UnicodeMarker HexDigit HexDigit HexDigit HexDigit;
   public TerminalRule getUnicodeEscapeRule() {
      return tUnicodeEscape;
   }

   // terminal fragment UnicodeMarker:
   // "u" "u"*;
   public TerminalRule getUnicodeMarkerRule() {
      return tUnicodeMarker;
   }

   // / *
   // * 3.10.7. The Null Literal
   // * / NullLiteral:
   // value=NULL;
   public NullLiteralElements getNullLiteralAccess() {
      return pNullLiteral;
   }

   public ParserRule getNullLiteralRule() {
      return getNullLiteralAccess().getRule();
   }

   // terminal NULL:
   // "null";
   public TerminalRule getNULLRule() {
      return tNULL;
   }

   // / *
   // * Identifier
   // * / terminal IDENTIFIER:
   // JavaLetter JavaLetterOrDigit*;
   public TerminalRule getIDENTIFIERRule() {
      return tIDENTIFIER;
   }

   // terminal fragment JavaLetter:
   // "$" | "A".."Z" | "_" | "a".."z" | "¢".."¥" | "ª" | "µ" | "º" | "À".."Ö" | "Ø".."ö" | "ø".."ȶ" | "ɐ".."ˁ" |
   // "ˆ".."ˑ" |
   // "ˠ".."ˤ" | "ˮ" | "ͺ" | "Ά" | "Έ".."Ί" | "Ό" | "Ύ".."Ρ" | "Σ".."ώ" | "ϐ".."ϵ" | "Ϸ".."ϻ" | "Ѐ".."ҁ" | "Ҋ".."ӎ" |
   // "Ӑ".."ӵ" | "Ӹ".."ӹ" | "Ԁ".."ԏ" | "Ա".."Ֆ" | "ՙ" | "ա".."և" | "א".."ת" | "װ".."ײ" | "ء".."غ" | "ـ".."ي" | "ٮ".."ٯ"
   // |
   // "ٱ".."ۓ" | "ە" | "ۥ".."ۦ" | "ۮ".."ۯ" | "ۺ".."ۼ" | "ۿ" | "ܐ" | "ܒ".."ܯ" | "ݍ".."ݏ" | "ހ".."ޥ" | "ޱ" | "ऄ".."ह" |
   // "ऽ" |
   // "ॐ" | "क़".."ॡ" | "অ".."ঌ" | "এ".."ঐ" | "ও".."ন" | "প".."র" | "ল" | "শ".."হ" | "ঽ" | "ড়".."ঢ়" | "য়".."ৡ" | "ৰ".."৳"
   // |
   // "ਅ".."ਊ" | "ਏ".."ਐ" | "ਓ".."ਨ" | "ਪ".."ਰ" | "ਲ".."ਲ਼" | "ਵ".."ਸ਼" | "ਸ".."ਹ" | "ਖ਼".."ੜ" | "ਫ਼" | "ੲ".."ੴ" | "અ".."ઍ"
   // |
   // "એ".."ઑ" | "ઓ".."ન" | "પ".."ર" | "લ".."ળ" | "વ".."હ" | "ઽ" | "ૐ" | "ૠ".."ૡ" | "૱" | "ଅ".."ଌ" | "ଏ".."ଐ" | "ଓ".."ନ"
   // |
   // "ପ".."ର" | "ଲ".."ଳ" | "ଵ".."ହ" | "ଽ" | "ଡ଼".."ଢ଼" | "ୟ".."ୡ" | "ୱ" | "ஃ" | "அ".."ஊ" | "எ".."ஐ" | "ஒ".."க" | "ங".."ச"
   // |
   // "ஜ" | "ஞ".."ட" | "ண".."த" | "ந".."ப" | "ம".."வ" | "ஷ".."ஹ" | "௹" | "అ".."ఌ" | "ఎ".."ఐ" | "ఒ".."న" | "ప".."ళ" |
   // "వ".."హ" | "ౠ".."ౡ" | "ಅ".."ಌ" | "ಎ".."ಐ" | "ಒ".."ನ" | "ಪ".."ಳ" | "ವ".."ಹ" | "ಽ" | "ೞ" | "ೠ".."ೡ" | "അ".."ഌ" |
   // "എ".."ഐ" | "ഒ".."ന" | "പ".."ഹ" | "ൠ".."ൡ" | "අ".."ඖ" | "ක".."න" | "ඳ".."ර" | "ල" | "ව".."ෆ" | "ก".."ะ" | "า".."ำ"
   // |
   // "฿".."ๆ" | "ກ".."ຂ" | "ຄ" | "ງ".."ຈ" | "ຊ" | "ຍ" | "ດ".."ທ" | "ນ".."ຟ" | "ມ".."ຣ" | "ລ" | "ວ" | "ສ".."ຫ" |
   // "ອ".."ະ" |
   // "າ".."ຳ" | "ຽ" | "ເ".."ໄ" | "ໆ" | "ໜ".."ໝ" | "ༀ" | "ཀ".."ཇ" | "ཉ".."ཪ" | "ྈ".."ྋ" | "က".."အ" | "ဣ".."ဧ" | "ဩ".."ဪ"
   // |
   // "ၐ".."ၕ" | "Ⴀ".."Ⴥ" | "ა".."ჸ" | "ᄀ".."ᅙ" | "ᅟ".."ᆢ" | "ᆨ".."ᇹ" | "ሀ".."ሆ" | "ለ".."ቆ" | "ቈ" | "ቊ".."ቍ" | "ቐ".."ቖ"
   // |
   // "ቘ" | "ቚ".."ቝ" | "በ".."ኆ" | "ኈ" | "ኊ".."ኍ" | "ነ".."ኮ" | "ኰ" | "ኲ".."ኵ" | "ኸ".."ኾ" | "ዀ" | "ዂ".."ዅ" | "ወ".."ዎ" |
   // "ዐ".."ዖ" | "ዘ".."ዮ" | "ደ".."ጎ" | "ጐ" | "ጒ".."ጕ" | "ጘ".."ጞ" | "ጠ".."ፆ" | "ፈ".."ፚ" | "Ꭰ".."Ᏼ" | "ᐁ".."ᙬ" | "ᙯ".."ᙶ"
   // |
   // "ᚁ".."ᚚ" | "ᚠ".."ᛪ" | "ᛮ".."ᛰ" | "ᜀ".."ᜌ" | "ᜎ".."ᜑ" | "ᜠ".."ᜱ" | "ᝀ".."ᝑ" | "ᝠ".."ᝬ" | "ᝮ".."ᝰ" | "ក".."ឳ" | "ៗ"
   // |
   // "៛".."ៜ" | "ᠠ".."ᡷ" | "ᢀ".."ᢨ" | "ᤀ".."ᤜ" | "ᥐ".."ᥭ" | "ᥰ".."ᥴ" | "ᴀ".."ᵫ" | "Ḁ".."ẛ" | "Ạ".."ỹ" | "ἀ".."ἕ" |
   // "Ἐ".."Ἕ" | "ἠ".."ὅ" | "Ὀ".."Ὅ" | "ὐ".."ὗ" | "Ὑ" | "Ὓ" | "Ὕ" | "Ὗ".."ώ" | "ᾀ".."ᾴ" | "ᾶ".."ᾼ" | "ι" | "ῂ".."ῄ" |
   // "ῆ".."ῌ" | "ῐ".."ΐ" | "ῖ".."Ί" | "ῠ".."Ῥ" | "ῲ".."ῴ" | "ῶ".."ῼ" | "‿".."⁀" | "⁔" | "ⁱ" | "ⁿ" | "₠".."₱" | "ℂ" |
   // "ℇ" |
   // "ℊ".."ℓ" | "ℕ" | "ℙ".."ℝ" | "ℤ" | "Ω" | "ℨ" | "K".."ℭ" | "ℯ".."ℱ" | "ℳ".."ℹ" | "ℽ".."ℿ" | "ⅅ".."ⅉ" | "Ⅰ".."Ↄ" |
   // "々".."〇" | "〡".."〩" | "〱".."〵" | "〸".."〼" | "ぁ".."ゖ" | "ゝ".."ゟ" | "ァ".."ヿ" | "ㄅ".."ㄬ" | "ㄱ".."ㆎ" | "ㆠ".."ㆷ" |
   // "ㇰ".."ㇿ" | "㐀".."䶵" | "一".."龥" | "ꀀ".."ꒌ" | "가".."힣" | "豈".."鶴" | "侮".."頻" | "ﬀ".."ﬆ" | "ﬓ".."ﬗ" | "יִ" | "ײַ".."ﬨ"
   // |
   // "שׁ".."זּ" | "טּ".."לּ" | "מּ" | "נּ".."סּ" | "ףּ".."פּ" | "צּ".."ﮱ" | "ﯓ".."ﴽ" | "ﵐ".."ﶏ" | "ﶒ".."ﷇ" | "ﷰ".."﷼" | "︳".."︴"
   // |
   // "﹍".."﹏" | "﹩" | "ﹰ".."ﹴ" | "ﹶ".."ﻼ" | "＄" | "Ａ".."Ｚ" | "＿" | "ａ".."ｚ" | "･".."ﾾ" | "ￂ".."ￇ" | "ￊ".."ￏ" | "ￒ".."ￗ"
   // |
   // "ￚ".."ￜ" | "￠".."￡" | "￥".."￦" | "?".."?" "?".."?";
   public TerminalRule getJavaLetterRule() {
      return tJavaLetter;
   }

   // terminal fragment JavaLetterOrDigit:
   // " ".."\b" | "".."" | "$" | "0".."9" | "A".."Z" | "_" | "a".."z" | "".."" | "¢".."¥" | "ª" | "­" | "µ" | "º" |
   // "À".."Ö" | "Ø".."ö" | "ø".."ȶ" | "ɐ".."ˁ" | "ˆ".."ˑ" | "ˠ".."ˤ" | "ˮ" | "̀".."͗" | "͝".."ͯ" | "ͺ" | "Ά" | "Έ".."Ί"
   // |
   // "Ό" | "Ύ".."Ρ" | "Σ".."ώ" | "ϐ".."ϵ" | "Ϸ".."ϻ" | "Ѐ".."ҁ" | "҃".."҆" | "Ҋ".."ӎ" | "Ӑ".."ӵ" | "Ӹ".."ӹ" | "Ԁ".."ԏ"
   // |
   // "Ա".."Ֆ" | "ՙ" | "ա".."և" | "֑".."֡" | "֣".."ֹ" | "ֻ".."ֽ" | "ֿ" | "ׁ".."ׂ" | "ׄ" | "א".."ת" | "װ".."ײ" | "؀".."؃"
   // |
   // "ؐ".."ؕ" | "ء".."غ" | "ـ".."٘" | "٠".."٩" | "ٮ".."ۓ" | "ە".."۝" | "۟".."ۨ" | "۪".."ۼ" | "ۿ" | "܏".."݊" | "ݍ".."ݏ"
   // |
   // "ހ".."ޱ" | "ँ".."ह" | "़".."्" | "ॐ".."॔" | "क़".."ॣ" | "०".."९" | "ঁ".."ঃ" | "অ".."ঌ" | "এ".."ঐ" | "ও".."ন" |
   // "প".."র" | "ল" | "শ".."হ" | "়".."ৄ" | "ে".."ৈ" | "ো".."্" | "ৗ" | "ড়".."ঢ়" | "য়".."ৣ" | "০".."৳" | "ਁ".."ਃ" |
   // "ਅ".."ਊ" | "ਏ".."ਐ" | "ਓ".."ਨ" | "ਪ".."ਰ" | "ਲ".."ਲ਼" | "ਵ".."ਸ਼" | "ਸ".."ਹ" | "਼" | "ਾ".."ੂ" | "ੇ".."ੈ" | "ੋ".."੍"
   // |
   // "ਖ਼".."ੜ" | "ਫ਼" | "੦".."ੴ" | "ઁ".."ઃ" | "અ".."ઍ" | "એ".."ઑ" | "ઓ".."ન" | "પ".."ર" | "લ".."ળ" | "વ".."હ" | "઼".."ૅ"
   // |
   // "ે".."ૉ" | "ો".."્" | "ૐ" | "ૠ".."ૣ" | "૦".."૯" | "૱" | "ଁ".."ଃ" | "ଅ".."ଌ" | "ଏ".."ଐ" | "ଓ".."ନ" | "ପ".."ର" |
   // "ଲ".."ଳ" | "ଵ".."ହ" | "଼".."ୃ" | "େ".."ୈ" | "ୋ".."୍" | "ୖ".."ୗ" | "ଡ଼".."ଢ଼" | "ୟ".."ୡ" | "୦".."୯" | "ୱ" | "ஂ".."ஃ"
   // |
   // "அ".."ஊ" | "எ".."ஐ" | "ஒ".."க" | "ங".."ச" | "ஜ" | "ஞ".."ட" | "ண".."த" | "ந".."ப" | "ம".."வ" | "ஷ".."ஹ" | "ா".."ூ"
   // |
   // "ெ".."ை" | "ொ".."்" | "ௗ" | "௧".."௯" | "௹" | "ఁ".."ః" | "అ".."ఌ" | "ఎ".."ఐ" | "ఒ".."న" | "ప".."ళ" | "వ".."హ" |
   // "ా".."ౄ" | "ె".."ై" | "ొ".."్" | "ౕ".."ౖ" | "ౠ".."ౡ" | "౦".."౯" | "ಂ".."ಃ" | "ಅ".."ಌ" | "ಎ".."ಐ" | "ಒ".."ನ" |
   // "ಪ".."ಳ" | "ವ".."ಹ" | "಼".."ೄ" | "ೆ".."ೈ" | "ೊ".."್" | "ೕ".."ೖ" | "ೞ" | "ೠ".."ೡ" | "೦".."೯" | "ം".."ഃ" | "അ".."ഌ"
   // |
   // "എ".."ഐ" | "ഒ".."ന" | "പ".."ഹ" | "ാ".."ൃ" | "െ".."ൈ" | "ൊ".."്" | "ൗ" | "ൠ".."ൡ" | "൦".."൯" | "ං".."ඃ" | "අ".."ඖ"
   // |
   // "ක".."න" | "ඳ".."ර" | "ල" | "ව".."ෆ" | "්" | "ා".."ු" | "ූ" | "ෘ".."ෟ" | "ෲ".."ෳ" | "ก".."ฺ" | "฿".."๎" | "๐".."๙"
   // |
   // "ກ".."ຂ" | "ຄ" | "ງ".."ຈ" | "ຊ" | "ຍ" | "ດ".."ທ" | "ນ".."ຟ" | "ມ".."ຣ" | "ລ" | "ວ" | "ສ".."ຫ" | "ອ".."ູ" |
   // "ົ".."ຽ" |
   // "ເ".."ໄ" | "ໆ" | "່".."ໍ" | "໐".."໙" | "ໜ".."ໝ" | "ༀ" | "༘".."༙" | "༠".."༩" | "༵" | "༷" | "༹" | "༾".."ཇ" |
   // "ཉ".."ཪ" |
   // "ཱ".."྄" | "྆".."ྋ" | "ྐ".."ྗ" | "ྙ".."ྼ" | "࿆" | "က".."အ" | "ဣ".."ဧ" | "ဩ".."ဪ" | "ာ".."ဲ" | "ံ".."္" | "၀".."၉"
   // |
   // "ၐ".."ၙ" | "Ⴀ".."Ⴥ" | "ა".."ჸ" | "ᄀ".."ᅙ" | "ᅟ".."ᆢ" | "ᆨ".."ᇹ" | "ሀ".."ሆ" | "ለ".."ቆ" | "ቈ" | "ቊ".."ቍ" | "ቐ".."ቖ"
   // |
   // "ቘ" | "ቚ".."ቝ" | "በ".."ኆ" | "ኈ" | "ኊ".."ኍ" | "ነ".."ኮ" | "ኰ" | "ኲ".."ኵ" | "ኸ".."ኾ" | "ዀ" | "ዂ".."ዅ" | "ወ".."ዎ" |
   // "ዐ".."ዖ" | "ዘ".."ዮ" | "ደ".."ጎ" | "ጐ" | "ጒ".."ጕ" | "ጘ".."ጞ" | "ጠ".."ፆ" | "ፈ".."ፚ" | "፩".."፱" | "Ꭰ".."Ᏼ" | "ᐁ".."ᙬ"
   // |
   // "ᙯ".."ᙶ" | "ᚁ".."ᚚ" | "ᚠ".."ᛪ" | "ᛮ".."ᛰ" | "ᜀ".."ᜌ" | "ᜎ".."᜔" | "ᜠ".."᜴" | "ᝀ".."ᝓ" | "ᝠ".."ᝬ" | "ᝮ".."ᝰ" |
   // "ᝲ".."ᝳ" | "ក".."៓" | "ៗ" | "៛".."៝" | "០".."៩" | "᠋".."᠍" | "᠐".."᠙" | "ᠠ".."ᡷ" | "ᢀ".."ᢩ" | "ᤀ".."ᤜ" | "ᤠ".."ᤫ"
   // |
   // "ᤰ".."᤻" | "᥆".."ᥭ" | "ᥰ".."ᥴ" | "ᴀ".."ᵫ" | "Ḁ".."ẛ" | "Ạ".."ỹ" | "ἀ".."ἕ" | "Ἐ".."Ἕ" | "ἠ".."ὅ" | "Ὀ".."Ὅ" |
   // "ὐ".."ὗ" | "Ὑ" | "Ὓ" | "Ὕ" | "Ὗ".."ώ" | "ᾀ".."ᾴ" | "ᾶ".."ᾼ" | "ι" | "ῂ".."ῄ" | "ῆ".."ῌ" | "ῐ".."ΐ" | "ῖ".."Ί" |
   // "ῠ".."Ῥ" | "ῲ".."ῴ" | "ῶ".."ῼ" | "‌".."‏" | "‪".."‮" | "‿".."⁀" | "⁔" | "⁠".."⁣" | "⁪".."⁯" | "ⁱ" | "ⁿ" | "₠".."₱"
   // |
   // "⃐".."⃜" | "⃡" | "⃥".."⃪" | "ℂ" | "ℇ" | "ℊ".."ℓ" | "ℕ" | "ℙ".."ℝ" | "ℤ" | "Ω" | "ℨ" | "K".."ℭ" | "ℯ".."ℱ" |
   // "ℳ".."ℹ"
   // | "ℽ".."ℿ" | "ⅅ".."ⅉ" | "Ⅰ".."Ↄ" | "々".."〇" | "〡".."〯" | "〱".."〵" | "〸".."〼" | "ぁ".."ゖ" | "゙".."゚" | "ゝ".."ゟ" |
   // "ァ".."ヿ" | "ㄅ".."ㄬ" | "ㄱ".."ㆎ" | "ㆠ".."ㆷ" | "ㇰ".."ㇿ" | "㐀".."䶵" | "一".."龥" | "ꀀ".."ꒌ" | "가".."힣" | "豈".."鶴" |
   // "侮".."頻" | "ﬀ".."ﬆ" | "ﬓ".."ﬗ" | "יִ".."ﬨ" | "שׁ".."זּ" | "טּ".."לּ" | "מּ" | "נּ".."סּ" | "ףּ".."פּ" | "צּ".."ﮱ" | "ﯓ".."ﴽ"
   // |
   // "ﵐ".."ﶏ" | "ﶒ".."ﷇ" | "ﷰ".."﷼" | "︀".."️" | "︠".."︣" | "︳".."︴" | "﹍".."﹏" | "﹩" | "ﹰ".."ﹴ" | "ﹶ".."ﻼ" | "﻿" | "＄"
   // |
   // "０".."９" | "Ａ".."Ｚ" | "＿" | "ａ".."ｚ" | "･".."ﾾ" | "ￂ".."ￇ" | "ￊ".."ￏ" | "ￒ".."ￗ" | "ￚ".."ￜ" | "￠".."￡" | "￥".."￦"
   // |
   // "￹".."￻" | "?".."?" "?".."?";
   public TerminalRule getJavaLetterOrDigitRule() {
      return tJavaLetterOrDigit;
   }

   // terminal ML_COMMENT:
   // "/ *"->"* /";
   public TerminalRule getML_COMMENTRule() {
      return tML_COMMENT;
   }

   // terminal SL_COMMENT:
   // "//" !("\n" | "\r")* ("\r"? "\n")?;
   public TerminalRule getSL_COMMENTRule() {
      return tSL_COMMENT;
   }

   // terminal WS:
   // (" " | "\t" | "\r" | "\n")+;
   public TerminalRule getWSRule() {
      return tWS;
   }
}
