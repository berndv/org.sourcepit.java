grammar org.sourcepit.java.Java hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate java "http://www.sourcepit.org/java/Java"
/*
 * Productions from ยง10 (Arrays)
 * http://docs.oracle.com/javase/specs/jls/se8/html/jls-10.html
 */
ArrayInitializer:
	'{' (VariableInitializerList)? (',')? '}';

VariableInitializerList:
	VariableInitializer (',' VariableInitializer)?
	
/*
 * Productions from ยง14 (Blocks and Statements)
 * http://docs.oracle.com/javase/specs/jls/se8/html/jls-14.html 
 */
Block:
	'{' (BlockStatements)? '}';

BlockStatements:
	BlockStatement (BlockStatement)*;

BlockStatement:
	LocalVariableDeclarationStatement |
	ClassDeclaration |
	Statement;

LocalVariableDeclarationStatement:
	LocalVariableDeclaration ';';

LocalVariableDeclaration:
	(VariableModifier)* UnannType VariableDeclaratorList;

Statement:
	StatementWithoutTrailingSubstatement |
	LabeledStatement |
	IfThenStatement |
	IfThenElseStatement |
	WhileStatement |
	ForStatement;

StatementNoShortIf:
	StatementWithoutTrailingSubstatement |
	LabeledStatementNoShortIf |
	IfThenElseStatementNoShortIf |
	WhileStatementNoShortIf |
	ForStatementNoShortIf;

StatementWithoutTrailingSubstatement:
	Block |
	EmptyStatement |
	ExpressionStatement |
	AssertStatement |
	SwitchStatement |
	DoStatement |
	BreakStatement |
	ContinueStatement |
	ReturnStatement |
	SynchronizedStatement |
	ThrowStatement |
	TryStatement;

EmptyStatement:
	';';

LabeledStatement:
	Identifier ':' Statement;

LabeledStatementNoShortIf:
	Identifier ':' StatementNoShortIf;

ExpressionStatement:
	StatementExpression ';';

StatementExpression:
	Assignment |
	PreIncrementExpression |
	PreDecrementExpression |
	PostIncrementExpression |
	PostDecrementExpression |
	MethodInvocation |
	ClassInstanceCreationExpression;

IfThenStatement:
	'if' '(' Expression ')' Statement;

IfThenElseStatement:
	'if' '(' Expression ')' StatementNoShortIf 'else' Statement;

IfThenElseStatementNoShortIf:
	'if' '(' Expression ')' StatementNoShortIf 'else' StatementNoShortIf;

AssertStatement:
	'assert' Expression ';' |
	'assert' Expression ':' Expression ';';

SwitchStatement:
	'switch' '(' Expression ')' SwitchBlock;

SwitchBlock:
	'{' (SwitchBlockStatementGroup)* (SwitchLabel)* '}';

SwitchBlockStatementGroup:
	SwitchLabels BlockStatements;

SwitchLabels:
	SwitchLabel (SwitchLabel)*;

SwitchLabel:
	'case' ConstantExpression ':' |
	'case' EnumConstantName ':' |
	'default' ':';

EnumConstantName:
	Identifier;

WhileStatement:
	'while' '(' Expression ')' Statement;

WhileStatementNoShortIf:
	'while' '(' Expression ')' StatementNoShortIf;

DoStatement:
	'do' Statement 'while' '(' Expression ')' ';';

ForStatement:
	BasicForStatement |
	EnhancedForStatement;

ForStatementNoShortIf:
	BasicForStatementNoShortIf |
	EnhancedForStatementNoShortIf;

BasicForStatement:
	'for' '(' (ForInit)? ';' (Expression)? ';' (ForUpdate)? ')' Statement;

BasicForStatementNoShortIf:
	'for' '(' (ForInit)? ';' (Expression)? ';' (ForUpdate)? ')' StatementNoShortIf;

ForInit:
	StatementExpressionList |
	LocalVariableDeclaration;

ForUpdate:
	StatementExpressionList;

StatementExpressionList:
	StatementExpression (',' StatementExpression)*;

EnhancedForStatement:
	'for' '(' (VariableModifier)* UnannType VariableDeclaratorId ':' Expression ')' Statement;

EnhancedForStatementNoShortIf:
	'for' '(' (VariableModifier)* UnannType VariableDeclaratorId ':' Expression ')' StatementNoShortIf;

BreakStatement:
	'break' (Identifier)? ';';

ContinueStatement:
	'continue' (Identifier)? ';';

ReturnStatement:
	'return' (Expression)? ';';

ThrowStatement:
	'throw' Expression ';';

SynchronizedStatement:
	'synchronized' '(' Expression ')' Block;

TryStatement:
	'try' Block Catches |
	'try' Block (Catches)? Finally |
	TryWithResourcesStatement;

Catches:
	CatchClause (CatchClause)*;

CatchClause:
	'catch' '(' CatchFormalParameter ')' Block;

CatchFormalParameter:
	(VariableModifier)* CatchType VariableDeclaratorId;

CatchType:
	UnannClassType ('|' ClassType)*;

Finally:
	'finally' Block;

TryWithResourcesStatement:
	'try' ResourceSpecification Block (Catches)? (Finally)?;

ResourceSpecification:
	'(' ResourceList (';')? ')';

ResourceList:
	Resource (';' Resource)*;

Resource:
	(VariableModifier)* UnannType VariableDeclaratorId '=' Expression;

/*
 * Productions from ยง15 (Expressions)
 * http://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html 
 */
Primary:
	PrimaryNoNewArray |
	ArrayCreationExpression;

PrimaryNoNewArray:
	Literal |
	TypeName ('[' ']' } '.' 'class' |
	'void' '.' 'class' |
	'this' |
	TypeName '.' 'this' |
	'(' Expression ')' |
	ClassInstanceCreationExpression |
	FieldAccess |
	ArrayAccess |
	MethodInvocation |
	MethodReference;
ClassInstanceCreationExpression:
	'new' (TypeArguments)? (Annotation)* Identifier (TypeArgumentsOrDiamond)? '(' (ArgumentList)? ')' (ClassBody)? |
	ExpressionName '.' 'new' (TypeArguments)? (Annotation)* Identifier (TypeArgumentsOrDiamond)? '(' (ArgumentList)? ')'
	(ClassBody)? |
	Primary '.' 'new' (TypeArguments)? (Annotation)* Identifier (TypeArgumentsOrDiamond)? '(' (ArgumentList)? ')'
	(ClassBody)?;
TypeArgumentsOrDiamond:
	TypeArguments |
	'<' '>';
FieldAccess:
	Primary '.' Identifier |
	'super' '.' Identifier |
	TypeName '.' 'super' '.' Identifier;
ArrayAccess:
	ExpressionName '[' Expression ']' |
	PrimaryNoNewArray '[' Expression ']';
MethodInvocation:
	MethodName '(' (ArgumentList)? ')' |
	TypeName '.' (TypeArguments)? Identifier '(' (ArgumentList)? ')' |
	ExpressionName '.' (TypeArguments)? Identifier '(' (ArgumentList)? ')' |
	Primary '.' (TypeArguments)? Identifier '(' (ArgumentList)? ')' |
	'super' '.' (TypeArguments)? Identifier '(' (ArgumentList)? ')' |
	TypeName '.' 'super' '.' (TypeArguments)? Identifier '(' (ArgumentList)? ')';
ArgumentList:
	Expression (',' Expression)*;
MethodReference:
	ExpressionName '::' (TypeArguments)? Identifier |
	ReferenceType '::' (TypeArguments)? Identifier |
	Primary '::' (TypeArguments)? Identifier |
	'super' '::' (TypeArguments)? Identifier |
	TypeName '.' 'super' '::' (TypeArguments)? Identifier |
	ClassType '::' (TypeArguments)? 'new' |
	ArrayType '::' 'new';
ArrayCreationExpression:
	'new' PrimitiveType DimExprs (Dims)? |
	'new' ClassOrInterfaceType DimExprs (Dims)? |
	'new' PrimitiveType Dims ArrayInitializer |
	'new' ClassOrInterfaceType Dims ArrayInitializer;
DimExprs:
	DimExpr (DimExpr)*;
DimExpr:
	(Annotation)* '[' Expression ']';
ConstantExpression:
	Expression;
Expression:
	LambdaExpression |
	AssignmentExpression;
LambdaExpression:
	LambdaParameters '->' LambdaBody;
LambdaParameters:
	Identifier |
	'(' (FormalParameterList)? ')' |
	'(' InferredFormalParameterList ')';
InferredFormalParameterList:
	Identifier (',' Identifier)*;
LambdaBody:
	Expression |
	Block;
AssignmentExpression:
	ConditionalExpression |
	Assignment;
Assignment:
	LeftHandSide AssignmentOperator Expression;
LeftHandSide:
	ExpressionName |
	FieldAccess |
	ArrayAccess;
AssignmentOperator:
	'=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '>>>=' | '&=' | '^=' | '|=';
ConditionalExpression:
	ConditionalOrExpression |
	ConditionalOrExpression '?' Expression ':' ConditionalExpression;
ConditionalOrExpression:
	ConditionalAndExpression |
	ConditionalOrExpression '||' ConditionalAndExpression;
ConditionalAndExpression:
	InclusiveOrExpression |
	ConditionalAndExpression '&&' InclusiveOrExpression;
InclusiveOrExpression:
	ExclusiveOrExpression |
	InclusiveOrExpression '|' ExclusiveOrExpression;
ExclusiveOrExpression:
	AndExpression |
	ExclusiveOrExpression '^' AndExpression;
AndExpression:
	EqualityExpression |
	AndExpression '&' EqualityExpression;
EqualityExpression:
	RelationalExpression |
	EqualityExpression '==' RelationalExpression
	EqualityExpression '!=' RelationalExpression;
RelationalExpression:
	ShiftExpression |
	RelationalExpression '<' ShiftExpression |
	RelationalExpression '>' ShiftExpression |
	RelationalExpression '<=' ShiftExpression |
	RelationalExpression '>=' ShiftExpression |
	RelationalExpression 'instanceof' ReferenceType;
ShiftExpression:
	AdditiveExpression |
	ShiftExpression '<<' AdditiveExpression |
	ShiftExpression '>>' AdditiveExpression |
	ShiftExpression '>>>' AdditiveExpression;
AdditiveExpression:
	MultiplicativeExpression |
	AdditiveExpression '+' MultiplicativeExpression |
	AdditiveExpression '-' MultiplicativeExpression;
MultiplicativeExpression:
	UnaryExpression |
	MultiplicativeExpression '*' UnaryExpression |
	MultiplicativeExpression '/' UnaryExpression |
	MultiplicativeExpression '%' UnaryExpression;
UnaryExpression:
	PreIncrementExpression |
	PreDecrementExpression |
	'+' UnaryExpression |
	'-' UnaryExpression |
	UnaryExpressionNotPlusMinus;
PreIncrementExpression:
	'++' UnaryExpression;
PreDecrementExpression:
	'--' UnaryExpression;
UnaryExpressionNotPlusMinus:
	PostfixExpression |
	'~' UnaryExpression |
	'!' UnaryExpression |
	CastExpression;
PostfixExpression:
	Primary |
	ExpressionName |
	PostIncrementExpression |
	PostDecrementExpression;
PostIncrementExpression:
	PostfixExpression '++';
PostDecrementExpression:
	PostfixExpression '--';
CastExpression:
	'(' PrimitiveType ')' UnaryExpression |
	'(' ReferenceType (AdditionalBound)* ')' UnaryExpressionNotPlusMinus |
	'(' ReferenceType (AdditionalBound)* ')' LambdaExpression;