
Model:
	literals+=Literal*;

	/*
 * Productions from §4 (Types, Values, and Variables)
 * http://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html
 */
Type:
	PrimitiveType |
	ReferenceType;

PrimitiveType:
	(Annotation)* NumericType |
	(Annotation)* 'boolean';

NumericType:
	IntegralType |
	FloatingPointType;

IntegralType:
	'byte' | 'short' | 'int' | 'long' | 'char';

FloatingPointType:
	'float' | 'double';

ReferenceType:
	ClassOrInterfaceType |
	TypeVariable |
	ArrayType;

ClassOrInterfaceType:
	ClassType |
	InterfaceType;

ClassType:
	(Annotation)* Identifier (TypeArguments)? |
	ClassOrInterfaceType '.' (Annotation)* Identifier (TypeArguments)?;

InterfaceType:
	ClassType;

TypeVariable:
	(Annotation)* Identifier;

ArrayType:
	PrimitiveType Dims |
	ClassOrInterfaceType Dims |
	TypeVariable Dims;

Dims:
	(Annotation)* '[' ']' ((Annotation)* '[' ']')*;

TypeParameter:
	(TypeParameterModifier)* Identifier (TypeBound)?;

TypeBound:
	'extends' TypeVariable |
	'extends' ClassOrInterfaceType (AdditionalBound)*;

AdditionalBound:
	'&' InterfaceType;

TypeArguments:
	'<' TypeArgumentList '>';

TypeArgumentList:
	TypeArgument (',' TypeArgument)*;

TypeArgument:
	ReferenceType |
	Wildcard;

Wildcard:
	(Annotation)* '?' (WildcardBounds)?;

WildcardBounds:
	'extends' ReferenceType |
	'super' ReferenceType;

	/*
 * Productions from §8 (Classes)
 * http://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html 
 */
ClassDeclaration:
	NormalClassDeclaration |
	EnumDeclaration;

NormalClassDeclaration:
	(ClassModifier)* 'class' Identifier (TypeParameters)? (Superclass)? (Superinterfaces)? ClassBody;

ClassModifier:
	(Annotation | 'public' | 'protected' | 'private') |
	('abstract' | 'static' | 'final' | 'strictfp');

TypeParameters:
	'<' TypeParameterList '>';

TypeParameterList:
	TypeParameter (',' TypeParameter)*;

Superclass:
	'extends' ClassType;

Superinterfaces:
	'implements' InterfaceTypeList;

InterfaceTypeList:
	InterfaceType (',' InterfaceType)*;

ClassBody:
	'{' (ClassBodyDeclaration)* '}';

ClassBodyDeclaration:
	ClassMemberDeclaration |
	InstanceInitializer |
	StaticInitializer |
	ConstructorDeclaration;

ClassMemberDeclaration:
	FieldDeclaration |
	MethodDeclaration |
	ClassDeclaration |
	InterfaceDeclaration |
	';';

FieldDeclaration:
	(FieldModifier)* UnannType VariableDeclaratorList ';';

FieldModifier:
	(Annotation | 'public' | 'protected' | 'private') |
	('static' | 'final' | 'transient' | 'volatile');

VariableDeclaratorList:
	VariableDeclarator (',' VariableDeclarator)*;

VariableDeclarator:
	VariableDeclaratorId ('=' VariableInitializer)?;

VariableDeclaratorId:
	Identifier (Dims)?;

VariableInitializer:
	Expression |
	ArrayInitializer;

UnannType:
	UnannPrimitiveType |
	UnannReferenceType;

UnannPrimitiveType:
	NumericType |
	'boolean';

UnannReferenceType:
	UnannClassOrInterfaceType |
	UnannTypeVariable |
	UnannArrayType;

UnannClassOrInterfaceType:
	UnannClassType |
	UnannInterfaceType;

UnannClassType:
	Identifier (TypeArguments)? |
	UnannClassOrInterfaceType '.' (Annotation)* Identifier (TypeArguments)?;

UnannInterfaceType:
	UnannClassType;

UnannTypeVariable:
	Identifier;

UnannArrayType:
	UnannPrimitiveType Dims |
	UnannClassOrInterfaceType Dims |
	UnannTypeVariable Dims;

MethodDeclaration:
	(MethodModifier)* MethodHeader MethodBody;

MethodModifier:
	(Annotation | 'public' | 'protected' | 'private') |
	('abstract' | 'static' | 'final' | 'synchronized' | 'native' | 'strictfp');

MethodHeader:
	Result MethodDeclarator (Throws)? |
	TypeParameters (Annotation)* Result MethodDeclarator (Throws)?;

Result:
	UnannType |
	'void';

MethodDeclarator:
	Identifier ((FormalParameterList)?) (Dims)?;

FormalParameterList:
	FormalParameters ',' LastFormalParameter |
	LastFormalParameter;

FormalParameters:
	FormalParameter (',' FormalParameter)* |
	ReceiverParameter (',' FormalParameter)*;

FormalParameter:
	(VariableModifier)* UnannType VariableDeclaratorId;

VariableModifier:
	Annotation | 'final';

LastFormalParameter:
	(VariableModifier)* UnannType (Annotation)* '...' VariableDeclaratorId |
	FormalParameter;

ReceiverParameter:
	(Annotation)* UnannType (Identifier '.')? 'this';

Throws:
	'throws' ExceptionTypeList;

ExceptionTypeList:
	ExceptionType (',' ExceptionType)*;

ExceptionType:
	ClassType |
	TypeVariable;

MethodBody:
	Block |
	';';

InstanceInitializer:
	Block;

StaticInitializer:
	'static' Block;

ConstructorDeclaration:
	(ConstructorModifier)* ConstructorDeclarator (Throws)? ConstructorBody;

ConstructorModifier:
	Annotation | 'public' | 'protected' | 'private';

ConstructorDeclarator:
	(TypeParameters)? SimpleTypeName '(' (FormalParameterList)? ')';

ConstructorBody:
	((ExplicitConstructorInvocation)? (BlockStatements)?)*;

ExplicitConstructorInvocation:
	(TypeArguments)? 'this' '(' (ArgumentList)? ')' ';' |
	(TypeArguments)? 'super' '(' (ArgumentList)? ')' ';' |
	ExpressionName '.' (TypeArguments)? 'super' '(' (ArgumentList)? ')' ';' |
	Primary '.' (TypeArguments)? 'super' '(' (ArgumentList)? ')' ';';

EnumDeclaration:
	(ClassModifier)* 'enum' Identifier (Superinterfaces)? EnumBody;

EnumBody:
	'{' (EnumConstantList)? (',')? (EnumBodyDeclarations)? '}';

EnumConstantList:
	EnumConstant (',' EnumConstant)*;

EnumConstant:
	(EnumConstantModifier)* Identifier ('(' (ArgumentList)? ')')? (ClassBody)?;

EnumConstantModifier:
	Annotation;

EnumBodyDeclarations:
	';' (ClassBodyDeclaration)*;

	/*
 * Productions from §7 (Packages)
 * http://docs.oracle.com/javase/specs/jls/se8/html/jls-7.html
 */
CompilationUnit:
	(PackageDeclaration)? (ImportDeclaration)* (TypeDeclaration)*;

PackageDeclaration:
	(PackageModifier)* 'package' Identifier ('.' Identifier)* ';';

PackageModifier:
	Annotation;

ImportDeclaration:
	SingleTypeImportDeclaration |
	TypeImportOnDemandDeclaration |
	SingleStaticImportDeclaration |
	StaticImportOnDemandDeclaration;

SingleTypeImportDeclaration:
	'import' TypeName ';';

TypeImportOnDemandDeclaration:
	'import' PackageOrTypeName '.' '*' ';';

SingleStaticImportDeclaration:
	'import' 'static' TypeName '.' Identifier ';';

StaticImportOnDemandDeclaration:
	'import' 'static' TypeName '.' '*' ';';

TypeDeclaration:
	ClassDeclaration |
	InterfaceDeclaration |
	';';

	/*
 * Productions from §9 (Interfaces)
 * http://docs.oracle.com/javase/specs/jls/se8/html/jls-9.html 
 */
InterfaceDeclaration:
	NormalInterfaceDeclaration |
	AnnotationTypeDeclaration;

NormalInterfaceDeclaration:
	(InterfaceModifier)* 'interface' Identifier (TypeParameters)? (ExtendsInterfaces)? InterfaceBody;

InterfaceModifier:
	(Annotation | 'public' | 'protected' | 'private') |
	('abstract' | 'static' | 'strictfp');

ExtendsInterfaces:
	'extends' InterfaceTypeList;

InterfaceBody:
	'{' (InterfaceMemberDeclaration)* '}';

InterfaceMemberDeclaration:
	ConstantDeclaration |
	InterfaceMethodDeclaration |
	ClassDeclaration |
	InterfaceDeclaration |
	';';

ConstantDeclaration:
	(ConstantModifier)* UnannType VariableDeclaratorList ';';

ConstantModifier:
	(Annotation | 'public') |
	('static' | 'final');

InterfaceMethodDeclaration:
	(InterfaceMethodModifier)* MethodHeader MethodBody;

InterfaceMethodModifier:
	(Annotation | 'public') |
	('abstract' | 'default' | 'static' | 'strictfp');

AnnotationTypeDeclaration:
	(InterfaceModifier)* '@' 'interface' Identifier AnnotationTypeBody;

AnnotationTypeBody:
	'{' (AnnotationTypeMemberDeclaration)* '}';

AnnotationTypeMemberDeclaration:
	AnnotationTypeElementDeclaration |
	ConstantDeclaration |
	ClassDeclaration |
	InterfaceDeclaration |
	';';

AnnotationTypeElementDeclaration:
	(AnnotationTypeElementModifier)* UnannType Identifier '(' ')' (Dims)? (DefaultValue)? ';';

AnnotationTypeElementModifier:
	(Annotation | 'public') |
	'abstract';

DefaultValue:
	'default' | ElementValue;

Annotation:
	NormalAnnotation |
	MarkerAnnotation |
	SingleElementAnnotation;

NormalAnnotation:
	'@' TypeName '(' (ElementValuePairList)? ')';

ElementValuePairList:
	ElementValuePair (',' ElementValuePair)*;

ElementValuePair:
	Identifier '=' ElementValue;

ElementValue:
	ConditionalExpression |
	ElementValueArrayInitializer |
	Annotation;

ElementValueArrayInitializer:
	'{' (ElementValueList)? (',')? '}';

ElementValueList:
	ElementValue (',' ElementValue)*;

MarkerAnnotation:
	'@' TypeName;

SingleElementAnnotation:
	'@' TypeName '(' ElementValue ')';

/*
 * Productions from §10 (Arrays)
 * http://docs.oracle.com/javase/specs/jls/se8/html/jls-10.html
 */
ArrayInitializer:
	'{' (VariableInitializerList)? (',')? '}';

VariableInitializerList:
	VariableInitializer (',' VariableInitializer)?
	
	/*
 * Productions from §14 (Blocks and Statements)
 * http://docs.oracle.com/javase/specs/jls/se8/html/jls-14.html 
 */
	Block :
	'{' (BlockStatements)? '}';

BlockStatements:
	BlockStatement (BlockStatement)*;

BlockStatement:
	LocalVariableDeclarationStatement |
	ClassDeclaration |
	Statement;

LocalVariableDeclarationStatement:
	LocalVariableDeclaration ';';

LocalVariableDeclaration:
	(VariableModifier)* UnannType VariableDeclaratorList;

Statement:
	StatementWithoutTrailingSubstatement |
	LabeledStatement |
	IfThenStatement |
	IfThenElseStatement |
	WhileStatement |
	ForStatement;

StatementNoShortIf:
	StatementWithoutTrailingSubstatement |
	LabeledStatementNoShortIf |
	IfThenElseStatementNoShortIf |
	WhileStatementNoShortIf |
	ForStatementNoShortIf;

StatementWithoutTrailingSubstatement:
	Block |
	EmptyStatement |
	ExpressionStatement |
	AssertStatement |
	SwitchStatement |
	DoStatement |
	BreakStatement |
	ContinueStatement |
	ReturnStatement |
	SynchronizedStatement |
	ThrowStatement |
	TryStatement;

EmptyStatement:
	';';

LabeledStatement:
	Identifier ':' Statement;

LabeledStatementNoShortIf:
	Identifier ':' StatementNoShortIf;

ExpressionStatement:
	StatementExpression ';';

StatementExpression:
	Assignment |
	PreIncrementExpression |
	PreDecrementExpression |
	PostIncrementExpression |
	PostDecrementExpression |
	MethodInvocation |
	ClassInstanceCreationExpression;

IfThenStatement:
	'if' '(' Expression ')' Statement;

IfThenElseStatement:
	'if' '(' Expression ')' StatementNoShortIf 'else' Statement;

IfThenElseStatementNoShortIf:
	'if' '(' Expression ')' StatementNoShortIf 'else' StatementNoShortIf;

AssertStatement:
	'assert' Expression ';' |
	'assert' Expression ':' Expression ';';

SwitchStatement:
	'switch' '(' Expression ')' SwitchBlock;

SwitchBlock:
	'{' (SwitchBlockStatementGroup)* (SwitchLabel)* '}';

SwitchBlockStatementGroup:
	SwitchLabels BlockStatements;

SwitchLabels:
	SwitchLabel (SwitchLabel)*;

SwitchLabel:
	'case' ConstantExpression ':' |
	'case' EnumConstantName ':' |
	'default' ':';





