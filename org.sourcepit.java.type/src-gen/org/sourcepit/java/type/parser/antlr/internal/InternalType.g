/*
* generated by Xtext
*/
grammar InternalType;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	 memoize=true;
	
}

@lexer::header {
package org.sourcepit.java.type.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.sourcepit.java.type.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.sourcepit.java.type.services.TypeGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private TypeGrammarAccess grammarAccess;
 	
    public InternalTypeParser(TokenStream input, TypeGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected TypeGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getTypeLiteralParserRuleCall_0()); 
	    }
		lv_type_0_0=ruleliteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"literal");
	        afterParserOrEnumRuleCall();
	    }

)
)
;







// Entry rule entryRuleprimitiveType
entryRuleprimitiveType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimitiveTypeRule()); }
	 iv_ruleprimitiveType=ruleprimitiveType 
	 { $current=$iv_ruleprimitiveType.current; } 
	 EOF 
;

// Rule primitiveType
ruleprimitiveType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPrimitiveTypeAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleannotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimitiveTypeRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
(
		lv_typeName_1_1=RULE_NUMERICTYPE
		{
			newLeafNode(lv_typeName_1_1, grammarAccess.getPrimitiveTypeAccess().getTypeNameNumericTypeTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimitiveTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"typeName",
        		lv_typeName_1_1, 
        		"numericType");
	    }

    |		lv_typeName_1_2=RULE_BOOLEANTYPE
		{
			newLeafNode(lv_typeName_1_2, grammarAccess.getPrimitiveTypeAccess().getTypeNameBooleanTypeTerminalRuleCall_1_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimitiveTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"typeName",
        		lv_typeName_1_2, 
        		"booleanType");
	    }

)

)
))
;





// Entry rule entryRulereferenceType
entryRulereferenceType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReferenceTypeRule()); }
	 iv_rulereferenceType=rulereferenceType 
	 { $current=$iv_rulereferenceType.current; } 
	 EOF 
;

// Rule referenceType
rulereferenceType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getReferenceTypeAccess().getClassOrInterfaceTypeParserRuleCall_0()); 
    }
    this_classOrInterfaceType_0=ruleclassOrInterfaceType
    { 
        $current = $this_classOrInterfaceType_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getReferenceTypeAccess().getTypeVariableParserRuleCall_1()); 
    }
    this_typeVariable_1=ruletypeVariable
    { 
        $current = $this_typeVariable_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getReferenceTypeAccess().getArrayTypeParserRuleCall_2()); 
    }
    this_arrayType_2=rulearrayType
    { 
        $current = $this_arrayType_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleclassOrInterfaceType
entryRuleclassOrInterfaceType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassOrInterfaceTypeRule()); }
	 iv_ruleclassOrInterfaceType=ruleclassOrInterfaceType 
	 { $current=$iv_ruleclassOrInterfaceType.current; } 
	 EOF 
;

// Rule classOrInterfaceType
ruleclassOrInterfaceType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getClassOrInterfaceTypeAccess().getClassOrInterfaceTypeSegmentsClassOrInterfaceTypeSegmentParserRuleCall_0_0()); 
	    }
		lv_classOrInterfaceTypeSegments_0_0=ruleclassOrInterfaceTypeSegment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassOrInterfaceTypeRule());
	        }
       		add(
       			$current, 
       			"classOrInterfaceTypeSegments",
        		lv_classOrInterfaceTypeSegments_0_0, 
        		"classOrInterfaceTypeSegment");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getClassOrInterfaceTypeAccess().getFullStopKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClassOrInterfaceTypeAccess().getClassOrInterfaceTypeSegmentsClassOrInterfaceTypeSegmentParserRuleCall_1_1_0()); 
	    }
		lv_classOrInterfaceTypeSegments_2_0=ruleclassOrInterfaceTypeSegment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassOrInterfaceTypeRule());
	        }
       		add(
       			$current, 
       			"classOrInterfaceTypeSegments",
        		lv_classOrInterfaceTypeSegments_2_0, 
        		"classOrInterfaceTypeSegment");
	        afterParserOrEnumRuleCall();
	    }

)
)?)*)
;





// Entry rule entryRuleclassOrInterfaceTypeSegment
entryRuleclassOrInterfaceTypeSegment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassOrInterfaceTypeSegmentRule()); }
	 iv_ruleclassOrInterfaceTypeSegment=ruleclassOrInterfaceTypeSegment 
	 { $current=$iv_ruleclassOrInterfaceTypeSegment.current; } 
	 EOF 
;

// Rule classOrInterfaceTypeSegment
ruleclassOrInterfaceTypeSegment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getClassOrInterfaceTypeSegmentAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleannotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassOrInterfaceTypeSegmentRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		lv_name_1_0=RULE_IDENTIFIER
		{
			newLeafNode(lv_name_1_0, grammarAccess.getClassOrInterfaceTypeSegmentAccess().getNameIdentifierTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassOrInterfaceTypeSegmentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"Identifier");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getClassOrInterfaceTypeSegmentAccess().getTypeArgumentsTypeArgumentsParserRuleCall_2_0()); 
	    }
		lv_typeArguments_2_0=ruletypeArguments		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassOrInterfaceTypeSegmentRule());
	        }
       		set(
       			$current, 
       			"typeArguments",
        		lv_typeArguments_2_0, 
        		"typeArguments");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleclassType
entryRuleclassType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassTypeRule()); }
	 iv_ruleclassType=ruleclassType 
	 { $current=$iv_ruleclassType.current; } 
	 EOF 
;

// Rule classType
ruleclassType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getClassTypeAccess().getAnnotationsAnnotationParserRuleCall_0_0_0()); 
	    }
		lv_annotations_0_0=ruleannotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassTypeRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		lv_name_1_0=RULE_IDENTIFIER
		{
			newLeafNode(lv_name_1_0, grammarAccess.getClassTypeAccess().getNameIdentifierTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"Identifier");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getClassTypeAccess().getTypeArgumentsTypeArgumentsParserRuleCall_0_2_0()); 
	    }
		lv_typeArguments_2_0=ruletypeArguments		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassTypeRule());
	        }
       		set(
       			$current, 
       			"typeArguments",
        		lv_typeArguments_2_0, 
        		"typeArguments");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getClassTypeAccess().getClassOrInterfaceTypeClassOrInterfaceTypeParserRuleCall_1_0_0()); 
	    }
		lv_classOrInterfaceType_3_0=ruleclassOrInterfaceType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassTypeRule());
	        }
       		set(
       			$current, 
       			"classOrInterfaceType",
        		lv_classOrInterfaceType_3_0, 
        		"classOrInterfaceType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='.' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getClassTypeAccess().getFullStopKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClassTypeAccess().getAnnotationsAnnotationParserRuleCall_1_2_0()); 
	    }
		lv_annotations_5_0=ruleannotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassTypeRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_5_0, 
        		"annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		lv_name_6_0=RULE_IDENTIFIER
		{
			newLeafNode(lv_name_6_0, grammarAccess.getClassTypeAccess().getNameIdentifierTerminalRuleCall_1_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_6_0, 
        		"Identifier");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getClassTypeAccess().getTypeArgumentsTypeArgumentsParserRuleCall_1_4_0()); 
	    }
		lv_typeArguments_7_0=ruletypeArguments		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassTypeRule());
	        }
       		set(
       			$current, 
       			"typeArguments",
        		lv_typeArguments_7_0, 
        		"typeArguments");
	        afterParserOrEnumRuleCall();
	    }

)
)?))
;





// Entry rule entryRuleclassType_lf_classOrInterfaceType
entryRuleclassType_lf_classOrInterfaceType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassType_lf_classOrInterfaceTypeRule()); }
	 iv_ruleclassType_lf_classOrInterfaceType=ruleclassType_lf_classOrInterfaceType 
	 { $current=$iv_ruleclassType_lf_classOrInterfaceType.current; } 
	 EOF 
;

// Rule classType_lf_classOrInterfaceType
ruleclassType_lf_classOrInterfaceType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='.' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getClassType_lf_classOrInterfaceTypeAccess().getFullStopKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClassType_lf_classOrInterfaceTypeAccess().getAnnotationsAnnotationParserRuleCall_1_0()); 
	    }
		lv_annotations_1_0=ruleannotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassType_lf_classOrInterfaceTypeRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_1_0, 
        		"annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		lv_name_2_0=RULE_IDENTIFIER
		{
			newLeafNode(lv_name_2_0, grammarAccess.getClassType_lf_classOrInterfaceTypeAccess().getNameIdentifierTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassType_lf_classOrInterfaceTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"Identifier");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getClassType_lf_classOrInterfaceTypeAccess().getTypeArgumentsTypeArgumentsParserRuleCall_3_0()); 
	    }
		lv_typeArguments_3_0=ruletypeArguments		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassType_lf_classOrInterfaceTypeRule());
	        }
       		set(
       			$current, 
       			"typeArguments",
        		lv_typeArguments_3_0, 
        		"typeArguments");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleclassType_lfno_classOrInterfaceType
entryRuleclassType_lfno_classOrInterfaceType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassType_lfno_classOrInterfaceTypeRule()); }
	 iv_ruleclassType_lfno_classOrInterfaceType=ruleclassType_lfno_classOrInterfaceType 
	 { $current=$iv_ruleclassType_lfno_classOrInterfaceType.current; } 
	 EOF 
;

// Rule classType_lfno_classOrInterfaceType
ruleclassType_lfno_classOrInterfaceType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getClassType_lfno_classOrInterfaceTypeAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleannotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassType_lfno_classOrInterfaceTypeRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		lv_name_1_0=RULE_IDENTIFIER
		{
			newLeafNode(lv_name_1_0, grammarAccess.getClassType_lfno_classOrInterfaceTypeAccess().getNameIdentifierTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassType_lfno_classOrInterfaceTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"Identifier");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getClassType_lfno_classOrInterfaceTypeAccess().getTypeArgumentsTypeArgumentsParserRuleCall_2_0()); 
	    }
		lv_typeArguments_2_0=ruletypeArguments		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassType_lfno_classOrInterfaceTypeRule());
	        }
       		set(
       			$current, 
       			"typeArguments",
        		lv_typeArguments_2_0, 
        		"typeArguments");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleinterfaceType
entryRuleinterfaceType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterfaceTypeRule()); }
	 iv_ruleinterfaceType=ruleinterfaceType 
	 { $current=$iv_ruleinterfaceType.current; } 
	 EOF 
;

// Rule interfaceType
ruleinterfaceType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getInterfaceTypeAccess().getClassTypeParserRuleCall()); 
    }
    this_classType_0=ruleclassType
    { 
        $current = $this_classType_0.current; 
        afterParserOrEnumRuleCall();
    }

;









// Entry rule entryRuletypeVariable
entryRuletypeVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeVariableRule()); }
	 iv_ruletypeVariable=ruletypeVariable 
	 { $current=$iv_ruletypeVariable.current; } 
	 EOF 
;

// Rule typeVariable
ruletypeVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTypeVariableAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleannotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeVariableRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		lv_name_1_0=RULE_IDENTIFIER
		{
			newLeafNode(lv_name_1_0, grammarAccess.getTypeVariableAccess().getNameIdentifierTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeVariableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"Identifier");
	    }

)
))
;





// Entry rule entryRulearrayType
entryRulearrayType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayTypeRule()); }
	 iv_rulearrayType=rulearrayType 
	 { $current=$iv_rulearrayType.current; } 
	 EOF 
;

// Rule arrayType
rulearrayType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayTypeAccess().getTypePrimitiveTypeParserRuleCall_0_0_0()); 
	    }
		lv_type_0_1=ruleprimitiveType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayTypeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_1, 
        		"primitiveType");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getArrayTypeAccess().getTypeClassOrInterfaceTypeParserRuleCall_0_0_1()); 
	    }
		lv_type_0_2=ruleclassOrInterfaceType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayTypeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_2, 
        		"classOrInterfaceType");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getArrayTypeAccess().getTypeTypeVariableParserRuleCall_0_0_2()); 
	    }
		lv_type_0_3=ruletypeVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayTypeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_3, 
        		"typeVariable");
	        afterParserOrEnumRuleCall();
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayTypeAccess().getDimsDimsParserRuleCall_1_0()); 
	    }
		lv_dims_1_0=ruledims		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayTypeRule());
	        }
       		set(
       			$current, 
       			"dims",
        		lv_dims_1_0, 
        		"dims");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuledims
entryRuledims returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDimsRule()); }
	 iv_ruledims=ruledims 
	 { $current=$iv_ruledims.current; } 
	 EOF 
;

// Rule dims
ruledims returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDimsAccess().getDimsDimParserRuleCall_0_0()); 
	    }
		lv_dims_0_0=ruledim		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDimsRule());
	        }
       		add(
       			$current, 
       			"dims",
        		lv_dims_0_0, 
        		"dim");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDimsAccess().getDimsDimParserRuleCall_1_0()); 
	    }
		lv_dims_1_0=ruledim		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDimsRule());
	        }
       		add(
       			$current, 
       			"dims",
        		lv_dims_1_0, 
        		"dim");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuledim
entryRuledim returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDimRule()); }
	 iv_ruledim=ruledim 
	 { $current=$iv_ruledim.current; } 
	 EOF 
;

// Rule dim
ruledim returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getDimAccess().getDimAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDimAccess().getAnnotationsAnnotationParserRuleCall_1_0()); 
	    }
		lv_annotations_1_0=ruleannotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDimRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_1_0, 
        		"annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDimAccess().getLeftSquareBracketKeyword_2());
    }
	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDimAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuletypeParameter
entryRuletypeParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeParameterRule()); }
	 iv_ruletypeParameter=ruletypeParameter 
	 { $current=$iv_ruletypeParameter.current; } 
	 EOF 
;

// Rule typeParameter
ruletypeParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTypeParameterAccess().getTypeParameterModifiersTypeParameterModifierParserRuleCall_0_0()); 
	    }
		lv_typeParameterModifiers_0_0=ruletypeParameterModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeParameterRule());
	        }
       		add(
       			$current, 
       			"typeParameterModifiers",
        		lv_typeParameterModifiers_0_0, 
        		"typeParameterModifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		lv_name_1_0=RULE_IDENTIFIER
		{
			newLeafNode(lv_name_1_0, grammarAccess.getTypeParameterAccess().getNameIdentifierTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeParameterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"Identifier");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeParameterAccess().getTypeBoundTypeBoundParserRuleCall_2_0()); 
	    }
		lv_typeBound_2_0=ruletypeBound		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeParameterRule());
	        }
       		set(
       			$current, 
       			"typeBound",
        		lv_typeBound_2_0, 
        		"typeBound");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuletypeParameterModifier
entryRuletypeParameterModifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeParameterModifierRule()); }
	 iv_ruletypeParameterModifier=ruletypeParameterModifier 
	 { $current=$iv_ruletypeParameterModifier.current; } 
	 EOF 
;

// Rule typeParameterModifier
ruletypeParameterModifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTypeParameterModifierAccess().getAnnotationParserRuleCall()); 
    }
    this_annotation_0=ruleannotation
    { 
        $current = $this_annotation_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuletypeBound
entryRuletypeBound returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeBoundRule()); }
	 iv_ruletypeBound=ruletypeBound 
	 { $current=$iv_ruletypeBound.current; } 
	 EOF 
;

// Rule typeBound
ruletypeBound returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='extends' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTypeBoundAccess().getExtendsKeyword_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeBoundAccess().getTypeVariableTypeVariableParserRuleCall_0_1_0()); 
	    }
		lv_typeVariable_1_0=ruletypeVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeBoundRule());
	        }
       		set(
       			$current, 
       			"typeVariable",
        		lv_typeVariable_1_0, 
        		"typeVariable");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_2='extends' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypeBoundAccess().getExtendsKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeBoundAccess().getClassOrInterfaceTypeClassOrInterfaceTypeParserRuleCall_1_1_0()); 
	    }
		lv_classOrInterfaceType_3_0=ruleclassOrInterfaceType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeBoundRule());
	        }
       		set(
       			$current, 
       			"classOrInterfaceType",
        		lv_classOrInterfaceType_3_0, 
        		"classOrInterfaceType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeBoundAccess().getAdditionalBoundAdditionalBoundParserRuleCall_1_2_0()); 
	    }
		lv_additionalBound_4_0=ruleadditionalBound		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeBoundRule());
	        }
       		add(
       			$current, 
       			"additionalBound",
        		lv_additionalBound_4_0, 
        		"additionalBound");
	        afterParserOrEnumRuleCall();
	    }

)
)*))
;





// Entry rule entryRuleadditionalBound
entryRuleadditionalBound returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditionalBoundRule()); }
	 iv_ruleadditionalBound=ruleadditionalBound 
	 { $current=$iv_ruleadditionalBound.current; } 
	 EOF 
;

// Rule additionalBound
ruleadditionalBound returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='&' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAdditionalBoundAccess().getAmpersandKeyword_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAdditionalBoundAccess().getInterfaceTypeParserRuleCall_1()); 
    }
    this_interfaceType_1=ruleinterfaceType
    { 
        $current = $this_interfaceType_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuletypeArguments
entryRuletypeArguments returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeArgumentsRule()); }
	 iv_ruletypeArguments=ruletypeArguments 
	 { $current=$iv_ruletypeArguments.current; } 
	 EOF 
;

// Rule typeArguments
ruletypeArguments returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='<' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTypeArgumentsAccess().getLessThanSignKeyword_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTypeArgumentsAccess().getTypeArgumentListParserRuleCall_1()); 
    }
    this_typeArgumentList_1=ruletypeArgumentList
    { 
        $current = $this_typeArgumentList_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2='>' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypeArgumentsAccess().getGreaterThanSignKeyword_2());
    }
)
;





// Entry rule entryRuletypeArgumentList
entryRuletypeArgumentList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeArgumentListRule()); }
	 iv_ruletypeArgumentList=ruletypeArgumentList 
	 { $current=$iv_ruletypeArgumentList.current; } 
	 EOF 
;

// Rule typeArgumentList
ruletypeArgumentList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTypeArgumentListAccess().getTypeArgumentsTypeArgumentParserRuleCall_0_0()); 
	    }
		lv_typeArguments_0_0=ruletypeArgument		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeArgumentListRule());
	        }
       		add(
       			$current, 
       			"typeArguments",
        		lv_typeArguments_0_0, 
        		"typeArgument");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTypeArgumentListAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeArgumentListAccess().getTypeArgumentsTypeArgumentParserRuleCall_1_1_0()); 
	    }
		lv_typeArguments_2_0=ruletypeArgument		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeArgumentListRule());
	        }
       		add(
       			$current, 
       			"typeArguments",
        		lv_typeArguments_2_0, 
        		"typeArgument");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuletypeArgument
entryRuletypeArgument returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeArgumentRule()); }
	 iv_ruletypeArgument=ruletypeArgument 
	 { $current=$iv_ruletypeArgument.current; } 
	 EOF 
;

// Rule typeArgument
ruletypeArgument returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTypeArgumentAccess().getReferenceTypeParserRuleCall_0()); 
    }
    this_referenceType_0=rulereferenceType
    { 
        $current = $this_referenceType_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTypeArgumentAccess().getWildcardParserRuleCall_1()); 
    }
    this_wildcard_1=rulewildcard
    { 
        $current = $this_wildcard_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulewildcard
entryRulewildcard returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWildcardRule()); }
	 iv_rulewildcard=rulewildcard 
	 { $current=$iv_rulewildcard.current; } 
	 EOF 
;

// Rule wildcard
rulewildcard returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getWildcardAccess().getWildcardAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getWildcardAccess().getAnnotationsAnnotationParserRuleCall_1_0()); 
	    }
		lv_annotations_1_0=ruleannotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWildcardRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_1_0, 
        		"annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_2='?' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getWildcardAccess().getQuestionMarkKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWildcardAccess().getWildcardBoundsWildcardBoundsParserRuleCall_3_0()); 
	    }
		lv_wildcardBounds_3_0=rulewildcardBounds		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWildcardRule());
	        }
       		set(
       			$current, 
       			"wildcardBounds",
        		lv_wildcardBounds_3_0, 
        		"wildcardBounds");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRulewildcardBounds
entryRulewildcardBounds returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWildcardBoundsRule()); }
	 iv_rulewildcardBounds=rulewildcardBounds 
	 { $current=$iv_rulewildcardBounds.current; } 
	 EOF 
;

// Rule wildcardBounds
rulewildcardBounds returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='extends' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getWildcardBoundsAccess().getExtendsKeyword_0_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getWildcardBoundsAccess().getReferenceTypeParserRuleCall_0_1()); 
    }
    this_referenceType_1=rulereferenceType
    { 
        $current = $this_referenceType_1.current; 
        afterParserOrEnumRuleCall();
    }
)
    |(	otherlv_2='super' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getWildcardBoundsAccess().getSuperKeyword_1_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getWildcardBoundsAccess().getReferenceTypeParserRuleCall_1_1()); 
    }
    this_referenceType_3=rulereferenceType
    { 
        $current = $this_referenceType_3.current; 
        afterParserOrEnumRuleCall();
    }
))
;





// Entry rule entryRulepackageName
entryRulepackageName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPackageNameRule()); } 
	 iv_rulepackageName=rulepackageName 
	 { $current=$iv_rulepackageName.current.getText(); }  
	 EOF 
;

// Rule packageName
rulepackageName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getPackageNameAccess().getQualifiedNameParserRuleCall()); 
    }
    this_qualifiedName_0=rulequalifiedName    {
		$current.merge(this_qualifiedName_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRuletypeName
entryRuletypeName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeNameRule()); } 
	 iv_ruletypeName=ruletypeName 
	 { $current=$iv_ruletypeName.current.getText(); }  
	 EOF 
;

// Rule typeName
ruletypeName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getTypeNameAccess().getQualifiedNameParserRuleCall()); 
    }
    this_qualifiedName_0=rulequalifiedName    {
		$current.merge(this_qualifiedName_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRulepackageOrTypeName
entryRulepackageOrTypeName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPackageOrTypeNameRule()); } 
	 iv_rulepackageOrTypeName=rulepackageOrTypeName 
	 { $current=$iv_rulepackageOrTypeName.current.getText(); }  
	 EOF 
;

// Rule packageOrTypeName
rulepackageOrTypeName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getPackageOrTypeNameAccess().getQualifiedNameParserRuleCall()); 
    }
    this_qualifiedName_0=rulequalifiedName    {
		$current.merge(this_qualifiedName_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;











// Entry rule entryRulequalifiedName
entryRulequalifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_rulequalifiedName=rulequalifiedName 
	 { $current=$iv_rulequalifiedName.current.getText(); }  
	 EOF 
;

// Rule qualifiedName
rulequalifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_Identifier_0=RULE_IDENTIFIER    {
		$current.merge(this_Identifier_0);
    }

    { 
    newLeafNode(this_Identifier_0, grammarAccess.getQualifiedNameAccess().getIdentifierTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }
    this_Identifier_2=RULE_IDENTIFIER    {
		$current.merge(this_Identifier_2);
    }

    { 
    newLeafNode(this_Identifier_2, grammarAccess.getQualifiedNameAccess().getIdentifierTerminalRuleCall_1_1()); 
    }
)*)
    ;







// Entry rule entryRulepackageDeclaration
entryRulepackageDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPackageDeclarationRule()); }
	 iv_rulepackageDeclaration=rulepackageDeclaration 
	 { $current=$iv_rulepackageDeclaration.current; } 
	 EOF 
;

// Rule packageDeclaration
rulepackageDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPackageDeclarationAccess().getModifiersPackageModifierParserRuleCall_0_0()); 
	    }
		lv_modifiers_0_0=rulepackageModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackageDeclarationRule());
	        }
       		add(
       			$current, 
       			"modifiers",
        		lv_modifiers_0_0, 
        		"packageModifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='package' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPackageDeclarationAccess().getPackageKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPackageDeclarationAccess().getNamePackageNameParserRuleCall_2_0()); 
	    }
		lv_name_2_0=rulepackageName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackageDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"packageName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPackageDeclarationAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRulepackageModifier
entryRulepackageModifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPackageModifierRule()); }
	 iv_rulepackageModifier=rulepackageModifier 
	 { $current=$iv_rulepackageModifier.current; } 
	 EOF 
;

// Rule packageModifier
rulepackageModifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPackageModifierAccess().getAnnotationParserRuleCall()); 
    }
    this_annotation_0=ruleannotation
    { 
        $current = $this_annotation_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleimportDeclaration
entryRuleimportDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportDeclarationRule()); }
	 iv_ruleimportDeclaration=ruleimportDeclaration 
	 { $current=$iv_ruleimportDeclaration.current; } 
	 EOF 
;

// Rule importDeclaration
ruleimportDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getImportDeclarationAccess().getSingleTypeImportDeclarationParserRuleCall_0()); 
    }
    this_singleTypeImportDeclaration_0=rulesingleTypeImportDeclaration
    { 
        $current = $this_singleTypeImportDeclaration_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getImportDeclarationAccess().getTypeImportOnDemandDeclarationParserRuleCall_1()); 
    }
    this_typeImportOnDemandDeclaration_1=ruletypeImportOnDemandDeclaration
    { 
        $current = $this_typeImportOnDemandDeclaration_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getImportDeclarationAccess().getSingleStaticImportDeclarationParserRuleCall_2()); 
    }
    this_singleStaticImportDeclaration_2=rulesingleStaticImportDeclaration
    { 
        $current = $this_singleStaticImportDeclaration_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getImportDeclarationAccess().getStaticImportOnDemandDeclarationParserRuleCall_3()); 
    }
    this_staticImportOnDemandDeclaration_3=rulestaticImportOnDemandDeclaration
    { 
        $current = $this_staticImportOnDemandDeclaration_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulesingleTypeImportDeclaration
entryRulesingleTypeImportDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSingleTypeImportDeclarationRule()); }
	 iv_rulesingleTypeImportDeclaration=rulesingleTypeImportDeclaration 
	 { $current=$iv_rulesingleTypeImportDeclaration.current; } 
	 EOF 
;

// Rule singleTypeImportDeclaration
rulesingleTypeImportDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSingleTypeImportDeclarationAccess().getImportKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSingleTypeImportDeclarationAccess().getNameTypeNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruletypeName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSingleTypeImportDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"typeName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSingleTypeImportDeclarationAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuletypeImportOnDemandDeclaration
entryRuletypeImportOnDemandDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeImportOnDemandDeclarationRule()); }
	 iv_ruletypeImportOnDemandDeclaration=ruletypeImportOnDemandDeclaration 
	 { $current=$iv_ruletypeImportOnDemandDeclaration.current; } 
	 EOF 
;

// Rule typeImportOnDemandDeclaration
ruletypeImportOnDemandDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTypeImportOnDemandDeclarationAccess().getImportKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeImportOnDemandDeclarationAccess().getNamePackageOrTypeNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=rulepackageOrTypeName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeImportOnDemandDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"packageOrTypeName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='.' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypeImportOnDemandDeclarationAccess().getFullStopKeyword_2());
    }
	otherlv_3='*' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTypeImportOnDemandDeclarationAccess().getAsteriskKeyword_3());
    }
	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTypeImportOnDemandDeclarationAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRulesingleStaticImportDeclaration
entryRulesingleStaticImportDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSingleStaticImportDeclarationRule()); }
	 iv_rulesingleStaticImportDeclaration=rulesingleStaticImportDeclaration 
	 { $current=$iv_rulesingleStaticImportDeclaration.current; } 
	 EOF 
;

// Rule singleStaticImportDeclaration
rulesingleStaticImportDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSingleStaticImportDeclarationAccess().getImportKeyword_0());
    }
	otherlv_1='static' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSingleStaticImportDeclarationAccess().getStaticKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSingleStaticImportDeclarationAccess().getNameTypeNameParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruletypeName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSingleStaticImportDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"typeName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSingleStaticImportDeclarationAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRulestaticImportOnDemandDeclaration
entryRulestaticImportOnDemandDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStaticImportOnDemandDeclarationRule()); }
	 iv_rulestaticImportOnDemandDeclaration=rulestaticImportOnDemandDeclaration 
	 { $current=$iv_rulestaticImportOnDemandDeclaration.current; } 
	 EOF 
;

// Rule staticImportOnDemandDeclaration
rulestaticImportOnDemandDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStaticImportOnDemandDeclarationAccess().getImportKeyword_0());
    }
	otherlv_1='static' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStaticImportOnDemandDeclarationAccess().getStaticKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStaticImportOnDemandDeclarationAccess().getNameTypeNameParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruletypeName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStaticImportOnDemandDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"typeName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='.' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStaticImportOnDemandDeclarationAccess().getFullStopKeyword_3());
    }
	otherlv_4='*' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getStaticImportOnDemandDeclarationAccess().getAsteriskKeyword_4());
    }
	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getStaticImportOnDemandDeclarationAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuletypeDeclaration
entryRuletypeDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeDeclarationRule()); }
	 iv_ruletypeDeclaration=ruletypeDeclaration 
	 { $current=$iv_ruletypeDeclaration.current; } 
	 EOF 
;

// Rule typeDeclaration
ruletypeDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTypeDeclarationAccess().getClassDeclarationParserRuleCall_0()); 
    }
    this_classDeclaration_0=ruleclassDeclaration
    { 
        $current = $this_classDeclaration_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTypeDeclarationAccess().getInterfaceDeclarationParserRuleCall_1()); 
    }
    this_interfaceDeclaration_1=ruleinterfaceDeclaration
    { 
        $current = $this_interfaceDeclaration_1.current; 
        afterParserOrEnumRuleCall();
    }

    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeDeclarationAccess().getEmptyTypeDeclarationAction_2_0(),
            $current);
    }
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTypeDeclarationAccess().getSemicolonKeyword_2_1());
    }
))
;





// Entry rule entryRuleclassDeclaration
entryRuleclassDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassDeclarationRule()); }
	 iv_ruleclassDeclaration=ruleclassDeclaration 
	 { $current=$iv_ruleclassDeclaration.current; } 
	 EOF 
;

// Rule classDeclaration
ruleclassDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getClassDeclarationAccess().getNormalClassDeclarationParserRuleCall_0()); 
    }
    this_normalClassDeclaration_0=rulenormalClassDeclaration
    { 
        $current = $this_normalClassDeclaration_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getClassDeclarationAccess().getEnumDeclarationParserRuleCall_1()); 
    }
    this_enumDeclaration_1=ruleenumDeclaration
    { 
        $current = $this_enumDeclaration_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulenormalClassDeclaration
entryRulenormalClassDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNormalClassDeclarationRule()); }
	 iv_rulenormalClassDeclaration=rulenormalClassDeclaration 
	 { $current=$iv_rulenormalClassDeclaration.current; } 
	 EOF 
;

// Rule normalClassDeclaration
rulenormalClassDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getNormalClassDeclarationAccess().getModifiersClassModifierParserRuleCall_0_0()); 
	    }
		lv_modifiers_0_0=ruleclassModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNormalClassDeclarationRule());
	        }
       		add(
       			$current, 
       			"modifiers",
        		lv_modifiers_0_0, 
        		"classModifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='class' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNormalClassDeclarationAccess().getClassKeyword_1());
    }
(
(
		lv_name_2_0=RULE_IDENTIFIER
		{
			newLeafNode(lv_name_2_0, grammarAccess.getNormalClassDeclarationAccess().getNameIdentifierTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNormalClassDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"Identifier");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNormalClassDeclarationAccess().getTypeParametersTypeParametersParserRuleCall_3_0()); 
	    }
		lv_typeParameters_3_0=ruletypeParameters		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNormalClassDeclarationRule());
	        }
       		set(
       			$current, 
       			"typeParameters",
        		lv_typeParameters_3_0, 
        		"typeParameters");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getNormalClassDeclarationAccess().getSuperclassSuperclassParserRuleCall_4_0()); 
	    }
		lv_superclass_4_0=rulesuperclass		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNormalClassDeclarationRule());
	        }
       		set(
       			$current, 
       			"superclass",
        		lv_superclass_4_0, 
        		"superclass");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getNormalClassDeclarationAccess().getSuperinterfacesSuperinterfacesParserRuleCall_5_0()); 
	    }
		lv_superinterfaces_5_0=rulesuperinterfaces		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNormalClassDeclarationRule());
	        }
       		set(
       			$current, 
       			"superinterfaces",
        		lv_superinterfaces_5_0, 
        		"superinterfaces");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getNormalClassDeclarationAccess().getClassBodyClassBodyParserRuleCall_6_0()); 
	    }
		lv_classBody_6_0=ruleclassBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNormalClassDeclarationRule());
	        }
       		set(
       			$current, 
       			"classBody",
        		lv_classBody_6_0, 
        		"classBody");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleclassModifier
entryRuleclassModifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassModifierRule()); }
	 iv_ruleclassModifier=ruleclassModifier 
	 { $current=$iv_ruleclassModifier.current; } 
	 EOF 
;

// Rule classModifier
ruleclassModifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getClassModifierAccess().getAnnotationParserRuleCall_0()); 
    }
    this_annotation_0=ruleannotation
    { 
        $current = $this_annotation_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getClassModifierAccess().getJavaClassModifierParserRuleCall_1()); 
    }
    this_JavaClassModifier_1=ruleJavaClassModifier
    { 
        $current = $this_JavaClassModifier_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleJavaClassModifier
entryRuleJavaClassModifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJavaClassModifierRule()); }
	 iv_ruleJavaClassModifier=ruleJavaClassModifier 
	 { $current=$iv_ruleJavaClassModifier.current; } 
	 EOF 
;

// Rule JavaClassModifier
ruleJavaClassModifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getJavaClassModifierAccess().getModifierClassModifiersEnumRuleCall_0()); 
	    }
		lv_modifier_0_0=ruleClassModifiers		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJavaClassModifierRule());
	        }
       		set(
       			$current, 
       			"modifier",
        		lv_modifier_0_0, 
        		"ClassModifiers");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuletypeParameters
entryRuletypeParameters returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeParametersRule()); }
	 iv_ruletypeParameters=ruletypeParameters 
	 { $current=$iv_ruletypeParameters.current; } 
	 EOF 
;

// Rule typeParameters
ruletypeParameters returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='<' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTypeParametersAccess().getLessThanSignKeyword_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTypeParametersAccess().getTypeParameterListParserRuleCall_1()); 
    }
    this_typeParameterList_1=ruletypeParameterList
    { 
        $current = $this_typeParameterList_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2='>' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypeParametersAccess().getGreaterThanSignKeyword_2());
    }
)
;





// Entry rule entryRuletypeParameterList
entryRuletypeParameterList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeParameterListRule()); }
	 iv_ruletypeParameterList=ruletypeParameterList 
	 { $current=$iv_ruletypeParameterList.current; } 
	 EOF 
;

// Rule typeParameterList
ruletypeParameterList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTypeParameterListAccess().getTypeParametersTypeParameterParserRuleCall_0_0()); 
	    }
		lv_typeParameters_0_0=ruletypeParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeParameterListRule());
	        }
       		add(
       			$current, 
       			"typeParameters",
        		lv_typeParameters_0_0, 
        		"typeParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTypeParameterListAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeParameterListAccess().getTypeParametersTypeParameterParserRuleCall_1_1_0()); 
	    }
		lv_typeParameters_2_0=ruletypeParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeParameterListRule());
	        }
       		add(
       			$current, 
       			"typeParameters",
        		lv_typeParameters_2_0, 
        		"typeParameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulesuperclass
entryRulesuperclass returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSuperclassRule()); }
	 iv_rulesuperclass=rulesuperclass 
	 { $current=$iv_rulesuperclass.current; } 
	 EOF 
;

// Rule superclass
rulesuperclass returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='extends' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSuperclassAccess().getExtendsKeyword_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSuperclassAccess().getClassTypeParserRuleCall_1()); 
    }
    this_classType_1=ruleclassType
    { 
        $current = $this_classType_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulesuperinterfaces
entryRulesuperinterfaces returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSuperinterfacesRule()); }
	 iv_rulesuperinterfaces=rulesuperinterfaces 
	 { $current=$iv_rulesuperinterfaces.current; } 
	 EOF 
;

// Rule superinterfaces
rulesuperinterfaces returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='implements' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSuperinterfacesAccess().getImplementsKeyword_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSuperinterfacesAccess().getInterfaceTypeListParserRuleCall_1()); 
    }
    this_interfaceTypeList_1=ruleinterfaceTypeList
    { 
        $current = $this_interfaceTypeList_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleinterfaceTypeList
entryRuleinterfaceTypeList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterfaceTypeListRule()); }
	 iv_ruleinterfaceTypeList=ruleinterfaceTypeList 
	 { $current=$iv_ruleinterfaceTypeList.current; } 
	 EOF 
;

// Rule interfaceTypeList
ruleinterfaceTypeList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceTypeListAccess().getInterfaceTypesInterfaceTypeParserRuleCall_0_0()); 
	    }
		lv_interfaceTypes_0_0=ruleinterfaceType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceTypeListRule());
	        }
       		add(
       			$current, 
       			"interfaceTypes",
        		lv_interfaceTypes_0_0, 
        		"interfaceType");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInterfaceTypeListAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceTypeListAccess().getInterfaceTypesInterfaceTypeParserRuleCall_1_1_0()); 
	    }
		lv_interfaceTypes_2_0=ruleinterfaceType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceTypeListRule());
	        }
       		add(
       			$current, 
       			"interfaceTypes",
        		lv_interfaceTypes_2_0, 
        		"interfaceType");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleclassBody
entryRuleclassBody returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassBodyRule()); }
	 iv_ruleclassBody=ruleclassBody 
	 { $current=$iv_ruleclassBody.current; } 
	 EOF 
;

// Rule classBody
ruleclassBody returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getClassBodyAccess().getClassBodyAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getClassBodyAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClassBodyAccess().getDeclarationsClassBodyDeclarationParserRuleCall_2_0()); 
	    }
		lv_declarations_2_0=ruleclassBodyDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassBodyRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_2_0, 
        		"classBodyDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getClassBodyAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleclassBodyDeclaration
entryRuleclassBodyDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassBodyDeclarationRule()); }
	 iv_ruleclassBodyDeclaration=ruleclassBodyDeclaration 
	 { $current=$iv_ruleclassBodyDeclaration.current; } 
	 EOF 
;

// Rule classBodyDeclaration
ruleclassBodyDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getClassBodyDeclarationAccess().getClassMemberDeclarationParserRuleCall_0()); 
    }
    this_classMemberDeclaration_0=ruleclassMemberDeclaration
    { 
        $current = $this_classMemberDeclaration_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getClassBodyDeclarationAccess().getInstanceInitializerParserRuleCall_1()); 
    }
    this_instanceInitializer_1=ruleinstanceInitializer
    { 
        $current = $this_instanceInitializer_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getClassBodyDeclarationAccess().getStaticInitializerParserRuleCall_2()); 
    }
    this_staticInitializer_2=rulestaticInitializer
    { 
        $current = $this_staticInitializer_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getClassBodyDeclarationAccess().getConstructorDeclarationParserRuleCall_3()); 
    }
    this_constructorDeclaration_3=ruleconstructorDeclaration
    { 
        $current = $this_constructorDeclaration_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleclassMemberDeclaration
entryRuleclassMemberDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassMemberDeclarationRule()); }
	 iv_ruleclassMemberDeclaration=ruleclassMemberDeclaration 
	 { $current=$iv_ruleclassMemberDeclaration.current; } 
	 EOF 
;

// Rule classMemberDeclaration
ruleclassMemberDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getClassMemberDeclarationAccess().getFieldDeclarationParserRuleCall_0()); 
    }
    this_fieldDeclaration_0=rulefieldDeclaration
    { 
        $current = $this_fieldDeclaration_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getClassMemberDeclarationAccess().getMethodDeclarationParserRuleCall_1()); 
    }
    this_methodDeclaration_1=rulemethodDeclaration
    { 
        $current = $this_methodDeclaration_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getClassMemberDeclarationAccess().getClassDeclarationParserRuleCall_2()); 
    }
    this_classDeclaration_2=ruleclassDeclaration
    { 
        $current = $this_classDeclaration_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getClassMemberDeclarationAccess().getInterfaceDeclarationParserRuleCall_3()); 
    }
    this_interfaceDeclaration_3=ruleinterfaceDeclaration
    { 
        $current = $this_interfaceDeclaration_3.current; 
        afterParserOrEnumRuleCall();
    }

    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getClassMemberDeclarationAccess().getEmptyClassMemberDeclarationAction_4_0(),
            $current);
    }
)	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getClassMemberDeclarationAccess().getSemicolonKeyword_4_1());
    }
))
;





// Entry rule entryRulefieldDeclaration
entryRulefieldDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFieldDeclarationRule()); }
	 iv_rulefieldDeclaration=rulefieldDeclaration 
	 { $current=$iv_rulefieldDeclaration.current; } 
	 EOF 
;

// Rule fieldDeclaration
rulefieldDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFieldDeclarationAccess().getFieldModifiersFieldModifierParserRuleCall_0_0()); 
	    }
		lv_fieldModifiers_0_0=rulefieldModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldDeclarationRule());
	        }
       		add(
       			$current, 
       			"fieldModifiers",
        		lv_fieldModifiers_0_0, 
        		"fieldModifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getFieldDeclarationAccess().getUnannTypeUnannTypeParserRuleCall_1_0()); 
	    }
		lv_unannType_1_0=ruleunannType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldDeclarationRule());
	        }
       		set(
       			$current, 
       			"unannType",
        		lv_unannType_1_0, 
        		"unannType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFieldDeclarationAccess().getVariableDeclaratorListVariableDeclaratorListParserRuleCall_2_0()); 
	    }
		lv_variableDeclaratorList_2_0=rulevariableDeclaratorList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldDeclarationRule());
	        }
       		set(
       			$current, 
       			"variableDeclaratorList",
        		lv_variableDeclaratorList_2_0, 
        		"variableDeclaratorList");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFieldDeclarationAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRulefieldModifier
entryRulefieldModifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFieldModifierRule()); }
	 iv_rulefieldModifier=rulefieldModifier 
	 { $current=$iv_rulefieldModifier.current; } 
	 EOF 
;

// Rule fieldModifier
rulefieldModifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFieldModifierAccess().getAnnotationParserRuleCall_0()); 
    }
    this_annotation_0=ruleannotation
    { 
        $current = $this_annotation_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFieldModifierAccess().getJavaFieldModifierParserRuleCall_1()); 
    }
    this_JavaFieldModifier_1=ruleJavaFieldModifier
    { 
        $current = $this_JavaFieldModifier_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleJavaFieldModifier
entryRuleJavaFieldModifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJavaFieldModifierRule()); }
	 iv_ruleJavaFieldModifier=ruleJavaFieldModifier 
	 { $current=$iv_ruleJavaFieldModifier.current; } 
	 EOF 
;

// Rule JavaFieldModifier
ruleJavaFieldModifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getJavaFieldModifierAccess().getModifierFieldModifiersEnumRuleCall_0()); 
	    }
		lv_modifier_0_0=ruleFieldModifiers		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJavaFieldModifierRule());
	        }
       		set(
       			$current, 
       			"modifier",
        		lv_modifier_0_0, 
        		"FieldModifiers");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRulevariableDeclaratorList
entryRulevariableDeclaratorList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableDeclaratorListRule()); }
	 iv_rulevariableDeclaratorList=rulevariableDeclaratorList 
	 { $current=$iv_rulevariableDeclaratorList.current; } 
	 EOF 
;

// Rule variableDeclaratorList
rulevariableDeclaratorList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclaratorListAccess().getVariableDeclaratorsVariableDeclaratorParserRuleCall_0_0()); 
	    }
		lv_variableDeclarators_0_0=rulevariableDeclarator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclaratorListRule());
	        }
       		add(
       			$current, 
       			"variableDeclarators",
        		lv_variableDeclarators_0_0, 
        		"variableDeclarator");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVariableDeclaratorListAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclaratorListAccess().getVariableDeclaratorsVariableDeclaratorParserRuleCall_1_1_0()); 
	    }
		lv_variableDeclarators_2_0=rulevariableDeclarator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclaratorListRule());
	        }
       		add(
       			$current, 
       			"variableDeclarators",
        		lv_variableDeclarators_2_0, 
        		"variableDeclarator");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulevariableDeclarator
entryRulevariableDeclarator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableDeclaratorRule()); }
	 iv_rulevariableDeclarator=rulevariableDeclarator 
	 { $current=$iv_rulevariableDeclarator.current; } 
	 EOF 
;

// Rule variableDeclarator
rulevariableDeclarator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclaratorAccess().getIdVariableDeclaratorIdParserRuleCall_0_0()); 
	    }
		lv_id_0_0=rulevariableDeclaratorId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclaratorRule());
	        }
       		set(
       			$current, 
       			"id",
        		lv_id_0_0, 
        		"variableDeclaratorId");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVariableDeclaratorAccess().getEqualsSignKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclaratorAccess().getInitializerVariableInitializerParserRuleCall_1_1_0()); 
	    }
		lv_initializer_2_0=rulevariableInitializer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclaratorRule());
	        }
       		set(
       			$current, 
       			"initializer",
        		lv_initializer_2_0, 
        		"variableInitializer");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRulevariableDeclaratorId
entryRulevariableDeclaratorId returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableDeclaratorIdRule()); }
	 iv_rulevariableDeclaratorId=rulevariableDeclaratorId 
	 { $current=$iv_rulevariableDeclaratorId.current; } 
	 EOF 
;

// Rule variableDeclaratorId
rulevariableDeclaratorId returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_id_0_0=RULE_IDENTIFIER
		{
			newLeafNode(lv_id_0_0, grammarAccess.getVariableDeclaratorIdAccess().getIdIdentifierTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableDeclaratorIdRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_0_0, 
        		"Identifier");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclaratorIdAccess().getDimsDimsParserRuleCall_1_0()); 
	    }
		lv_dims_1_0=ruledims		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclaratorIdRule());
	        }
       		set(
       			$current, 
       			"dims",
        		lv_dims_1_0, 
        		"dims");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRulevariableInitializer
entryRulevariableInitializer returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableInitializerRule()); }
	 iv_rulevariableInitializer=rulevariableInitializer 
	 { $current=$iv_rulevariableInitializer.current; } 
	 EOF 
;

// Rule variableInitializer
rulevariableInitializer returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getVariableInitializerAccess().getExpressionParserRuleCall_0()); 
    }
    this_expression_0=ruleexpression
    { 
        $current = $this_expression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getVariableInitializerAccess().getArrayInitializerParserRuleCall_1()); 
    }
    this_arrayInitializer_1=rulearrayInitializer
    { 
        $current = $this_arrayInitializer_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleunannType
entryRuleunannType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnannTypeRule()); }
	 iv_ruleunannType=ruleunannType 
	 { $current=$iv_ruleunannType.current; } 
	 EOF 
;

// Rule unannType
ruleunannType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getUnannTypeAccess().getUnannPrimitiveTypeParserRuleCall_0()); 
    }
    this_unannPrimitiveType_0=ruleunannPrimitiveType
    { 
        $current = $this_unannPrimitiveType_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getUnannTypeAccess().getUnannReferenceTypeParserRuleCall_1()); 
    }
    this_unannReferenceType_1=ruleunannReferenceType
    { 
        $current = $this_unannReferenceType_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleunannPrimitiveType
entryRuleunannPrimitiveType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnannPrimitiveTypeRule()); }
	 iv_ruleunannPrimitiveType=ruleunannPrimitiveType 
	 { $current=$iv_ruleunannPrimitiveType.current; } 
	 EOF 
;

// Rule unannPrimitiveType
ruleunannPrimitiveType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		lv_name_0_1=RULE_NUMERICTYPE
		{
			newLeafNode(lv_name_0_1, grammarAccess.getUnannPrimitiveTypeAccess().getNameNumericTypeTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnannPrimitiveTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_1, 
        		"numericType");
	    }

    |		lv_name_0_2=RULE_BOOLEANTYPE
		{
			newLeafNode(lv_name_0_2, grammarAccess.getUnannPrimitiveTypeAccess().getNameBooleanTypeTerminalRuleCall_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnannPrimitiveTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_2, 
        		"booleanType");
	    }

)

)
)
;





// Entry rule entryRuleunannReferenceType
entryRuleunannReferenceType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnannReferenceTypeRule()); }
	 iv_ruleunannReferenceType=ruleunannReferenceType 
	 { $current=$iv_ruleunannReferenceType.current; } 
	 EOF 
;

// Rule unannReferenceType
ruleunannReferenceType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getUnannReferenceTypeAccess().getUnannClassOrInterfaceTypeParserRuleCall_0()); 
    }
    this_unannClassOrInterfaceType_0=ruleunannClassOrInterfaceType
    { 
        $current = $this_unannClassOrInterfaceType_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getUnannReferenceTypeAccess().getUnannTypeVariableParserRuleCall_1()); 
    }
    this_unannTypeVariable_1=ruleunannTypeVariable
    { 
        $current = $this_unannTypeVariable_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getUnannReferenceTypeAccess().getUnannArrayTypeParserRuleCall_2()); 
    }
    this_unannArrayType_2=ruleunannArrayType
    { 
        $current = $this_unannArrayType_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleunannClassOrInterfaceType
entryRuleunannClassOrInterfaceType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnannClassOrInterfaceTypeRule()); }
	 iv_ruleunannClassOrInterfaceType=ruleunannClassOrInterfaceType 
	 { $current=$iv_ruleunannClassOrInterfaceType.current; } 
	 EOF 
;

// Rule unannClassOrInterfaceType
ruleunannClassOrInterfaceType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getUnannClassOrInterfaceTypeAccess().getUnannClassTypeParserRuleCall_0()); 
    }
    this_unannClassType_0=ruleunannClassType
    { 
        $current = $this_unannClassType_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getUnannClassOrInterfaceTypeAccess().getUnannInterfaceTypeParserRuleCall_1()); 
    }
    this_unannInterfaceType_1=ruleunannInterfaceType
    { 
        $current = $this_unannInterfaceType_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleunannClassType
entryRuleunannClassType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnannClassTypeRule()); }
	 iv_ruleunannClassType=ruleunannClassType 
	 { $current=$iv_ruleunannClassType.current; } 
	 EOF 
;

// Rule unannClassType
ruleunannClassType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getUnannClassTypeAccess().getClassTypeSegmentClassTypeSegmentParserRuleCall_0_0()); 
	    }
		lv_classTypeSegment_0_0=ruleClassTypeSegment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnannClassTypeRule());
	        }
       		add(
       			$current, 
       			"classTypeSegment",
        		lv_classTypeSegment_0_0, 
        		"ClassTypeSegment");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getUnannClassTypeAccess().getFullStopKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnannClassTypeAccess().getClassTypeSegmentClassTypeSegmentParserRuleCall_1_1_0()); 
	    }
		lv_classTypeSegment_2_0=ruleClassTypeSegment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnannClassTypeRule());
	        }
       		add(
       			$current, 
       			"classTypeSegment",
        		lv_classTypeSegment_2_0, 
        		"ClassTypeSegment");
	        afterParserOrEnumRuleCall();
	    }

)
))*(	otherlv_3='.' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getUnannClassTypeAccess().getFullStopKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnannClassTypeAccess().getClassTypeSegmentClassTypeSegmentWithAnnotationsParserRuleCall_2_1_0()); 
	    }
		lv_classTypeSegment_4_0=ruleClassTypeSegmentWithAnnotations		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnannClassTypeRule());
	        }
       		add(
       			$current, 
       			"classTypeSegment",
        		lv_classTypeSegment_4_0, 
        		"ClassTypeSegmentWithAnnotations");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleClassTypeSegment
entryRuleClassTypeSegment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassTypeSegmentRule()); }
	 iv_ruleClassTypeSegment=ruleClassTypeSegment 
	 { $current=$iv_ruleClassTypeSegment.current; } 
	 EOF 
;

// Rule ClassTypeSegment
ruleClassTypeSegment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_IDENTIFIER
		{
			newLeafNode(lv_name_0_0, grammarAccess.getClassTypeSegmentAccess().getNameIdentifierTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassTypeSegmentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"Identifier");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getClassTypeSegmentAccess().getTypeArgumentsTypeArgumentsParserRuleCall_1_0()); 
	    }
		lv_typeArguments_1_0=ruletypeArguments		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassTypeSegmentRule());
	        }
       		set(
       			$current, 
       			"typeArguments",
        		lv_typeArguments_1_0, 
        		"typeArguments");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleClassTypeSegmentWithAnnotations
entryRuleClassTypeSegmentWithAnnotations returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassTypeSegmentWithAnnotationsRule()); }
	 iv_ruleClassTypeSegmentWithAnnotations=ruleClassTypeSegmentWithAnnotations 
	 { $current=$iv_ruleClassTypeSegmentWithAnnotations.current; } 
	 EOF 
;

// Rule ClassTypeSegmentWithAnnotations
ruleClassTypeSegmentWithAnnotations returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getClassTypeSegmentWithAnnotationsAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleannotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassTypeSegmentWithAnnotationsRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		lv_name_1_0=RULE_IDENTIFIER
		{
			newLeafNode(lv_name_1_0, grammarAccess.getClassTypeSegmentWithAnnotationsAccess().getNameIdentifierTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassTypeSegmentWithAnnotationsRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"Identifier");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getClassTypeSegmentWithAnnotationsAccess().getTypeArgumentsTypeArgumentsParserRuleCall_2_0()); 
	    }
		lv_typeArguments_2_0=ruletypeArguments		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassTypeSegmentWithAnnotationsRule());
	        }
       		set(
       			$current, 
       			"typeArguments",
        		lv_typeArguments_2_0, 
        		"typeArguments");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleunannInterfaceType
entryRuleunannInterfaceType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnannInterfaceTypeRule()); }
	 iv_ruleunannInterfaceType=ruleunannInterfaceType 
	 { $current=$iv_ruleunannInterfaceType.current; } 
	 EOF 
;

// Rule unannInterfaceType
ruleunannInterfaceType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getUnannInterfaceTypeAccess().getUnannClassTypeParserRuleCall()); 
    }
    this_unannClassType_0=ruleunannClassType
    { 
        $current = $this_unannClassType_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleunannTypeVariable
entryRuleunannTypeVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnannTypeVariableRule()); }
	 iv_ruleunannTypeVariable=ruleunannTypeVariable 
	 { $current=$iv_ruleunannTypeVariable.current; } 
	 EOF 
;

// Rule unannTypeVariable
ruleunannTypeVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_IDENTIFIER
		{
			newLeafNode(lv_name_0_0, grammarAccess.getUnannTypeVariableAccess().getNameIdentifierTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnannTypeVariableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"Identifier");
	    }

)
)
;





// Entry rule entryRuleunannArrayType
entryRuleunannArrayType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnannArrayTypeRule()); }
	 iv_ruleunannArrayType=ruleunannArrayType 
	 { $current=$iv_ruleunannArrayType.current; } 
	 EOF 
;

// Rule unannArrayType
ruleunannArrayType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getUnannArrayTypeAccess().getUnannPrimitiveTypeParserRuleCall_0_0()); 
    }
    this_unannPrimitiveType_0=ruleunannPrimitiveType
    { 
        $current = $this_unannPrimitiveType_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getUnannArrayTypeAccess().getUnannClassOrInterfaceTypeParserRuleCall_0_1()); 
    }
    this_unannClassOrInterfaceType_1=ruleunannClassOrInterfaceType
    { 
        $current = $this_unannClassOrInterfaceType_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getUnannArrayTypeAccess().getUnannTypeVariableParserRuleCall_0_2()); 
    }
    this_unannTypeVariable_2=ruleunannTypeVariable
    { 
        $current = $this_unannTypeVariable_2.current; 
        afterParserOrEnumRuleCall();
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUnannArrayTypeAccess().getDimsDimsParserRuleCall_1_0()); 
	    }
		lv_dims_3_0=ruledims		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnannArrayTypeRule());
	        }
       		set(
       			$current, 
       			"dims",
        		lv_dims_3_0, 
        		"dims");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulemethodDeclaration
entryRulemethodDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethodDeclarationRule()); }
	 iv_rulemethodDeclaration=rulemethodDeclaration 
	 { $current=$iv_rulemethodDeclaration.current; } 
	 EOF 
;

// Rule methodDeclaration
rulemethodDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMethodDeclarationAccess().getMethodModifiersMethodModifierParserRuleCall_0_0()); 
	    }
		lv_methodModifiers_0_0=rulemethodModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodDeclarationRule());
	        }
       		add(
       			$current, 
       			"methodModifiers",
        		lv_methodModifiers_0_0, 
        		"methodModifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodDeclarationAccess().getMethodHeaderMethodHeaderParserRuleCall_1_0()); 
	    }
		lv_methodHeader_1_0=rulemethodHeader		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodDeclarationRule());
	        }
       		set(
       			$current, 
       			"methodHeader",
        		lv_methodHeader_1_0, 
        		"methodHeader");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodDeclarationAccess().getMethodBodyMethodBodyParserRuleCall_2_0()); 
	    }
		lv_methodBody_2_0=rulemethodBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodDeclarationRule());
	        }
       		set(
       			$current, 
       			"methodBody",
        		lv_methodBody_2_0, 
        		"methodBody");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulemethodModifier
entryRulemethodModifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethodModifierRule()); }
	 iv_rulemethodModifier=rulemethodModifier 
	 { $current=$iv_rulemethodModifier.current; } 
	 EOF 
;

// Rule methodModifier
rulemethodModifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getMethodModifierAccess().getAnnotationParserRuleCall_0()); 
    }
    this_annotation_0=ruleannotation
    { 
        $current = $this_annotation_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getMethodModifierAccess().getJavaMethodModifierParserRuleCall_1()); 
    }
    this_JavaMethodModifier_1=ruleJavaMethodModifier
    { 
        $current = $this_JavaMethodModifier_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleJavaMethodModifier
entryRuleJavaMethodModifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJavaMethodModifierRule()); }
	 iv_ruleJavaMethodModifier=ruleJavaMethodModifier 
	 { $current=$iv_ruleJavaMethodModifier.current; } 
	 EOF 
;

// Rule JavaMethodModifier
ruleJavaMethodModifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getJavaMethodModifierAccess().getModifierMethodModifiersEnumRuleCall_0()); 
	    }
		lv_modifier_0_0=rulemethodModifiers		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJavaMethodModifierRule());
	        }
       		set(
       			$current, 
       			"modifier",
        		lv_modifier_0_0, 
        		"methodModifiers");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRulemethodHeader
entryRulemethodHeader returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethodHeaderRule()); }
	 iv_rulemethodHeader=rulemethodHeader 
	 { $current=$iv_rulemethodHeader.current; } 
	 EOF 
;

// Rule methodHeader
rulemethodHeader returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getMethodHeaderAccess().getResultResultParserRuleCall_0_0_0()); 
	    }
		lv_result_0_0=ruleresult		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodHeaderRule());
	        }
       		set(
       			$current, 
       			"result",
        		lv_result_0_0, 
        		"result");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodHeaderAccess().getMethodDeclaratorMethodDeclaratorParserRuleCall_0_1_0()); 
	    }
		lv_methodDeclarator_1_0=rulemethodDeclarator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodHeaderRule());
	        }
       		set(
       			$current, 
       			"methodDeclarator",
        		lv_methodDeclarator_1_0, 
        		"methodDeclarator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodHeaderAccess().getThrows_Throws_ParserRuleCall_0_2_0()); 
	    }
		lv_throws__2_0=rulethrows_		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodHeaderRule());
	        }
       		set(
       			$current, 
       			"throws_",
        		lv_throws__2_0, 
        		"throws_");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getMethodHeaderAccess().getTypeParametersTypeParametersParserRuleCall_1_0_0()); 
	    }
		lv_typeParameters_3_0=ruletypeParameters		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodHeaderRule());
	        }
       		set(
       			$current, 
       			"typeParameters",
        		lv_typeParameters_3_0, 
        		"typeParameters");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodHeaderAccess().getAnnotationsAnnotationParserRuleCall_1_1_0()); 
	    }
		lv_annotations_4_0=ruleannotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodHeaderRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_4_0, 
        		"annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodHeaderAccess().getResultResultParserRuleCall_1_2_0()); 
	    }
		lv_result_5_0=ruleresult		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodHeaderRule());
	        }
       		set(
       			$current, 
       			"result",
        		lv_result_5_0, 
        		"result");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodHeaderAccess().getMethodDeclaratorMethodDeclaratorParserRuleCall_1_3_0()); 
	    }
		lv_methodDeclarator_6_0=rulemethodDeclarator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodHeaderRule());
	        }
       		set(
       			$current, 
       			"methodDeclarator",
        		lv_methodDeclarator_6_0, 
        		"methodDeclarator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodHeaderAccess().getThrows_Throws_ParserRuleCall_1_4_0()); 
	    }
		lv_throws__7_0=rulethrows_		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodHeaderRule());
	        }
       		set(
       			$current, 
       			"throws_",
        		lv_throws__7_0, 
        		"throws_");
	        afterParserOrEnumRuleCall();
	    }

)
)?))
;





// Entry rule entryRuleresult
entryRuleresult returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getResultRule()); }
	 iv_ruleresult=ruleresult 
	 { $current=$iv_ruleresult.current; } 
	 EOF 
;

// Rule result
ruleresult returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getResultAccess().getUnannTypeParserRuleCall_0()); 
    }
    this_unannType_0=ruleunannType
    { 
        $current = $this_unannType_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getResultAccess().getVoidTypeParserRuleCall_1()); 
    }
    this_voidType_1=rulevoidType
    { 
        $current = $this_voidType_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulevoidType
entryRulevoidType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVoidTypeRule()); }
	 iv_rulevoidType=rulevoidType 
	 { $current=$iv_rulevoidType.current; } 
	 EOF 
;

// Rule voidType
rulevoidType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=	'void' 
    {
        newLeafNode(lv_name_0_0, grammarAccess.getVoidTypeAccess().getNameVoidKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVoidTypeRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_0, "void");
	    }

)
)
;





// Entry rule entryRulemethodDeclarator
entryRulemethodDeclarator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethodDeclaratorRule()); }
	 iv_rulemethodDeclarator=rulemethodDeclarator 
	 { $current=$iv_rulemethodDeclarator.current; } 
	 EOF 
;

// Rule methodDeclarator
rulemethodDeclarator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_IDENTIFIER
		{
			newLeafNode(lv_name_0_0, grammarAccess.getMethodDeclaratorAccess().getNameIdentifierTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMethodDeclaratorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"Identifier");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMethodDeclaratorAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodDeclaratorAccess().getParametersFormalParameterListParserRuleCall_2_0()); 
	    }
		lv_parameters_2_0=ruleformalParameterList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodDeclaratorRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_2_0, 
        		"formalParameterList");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMethodDeclaratorAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodDeclaratorAccess().getDims_DimsParserRuleCall_4_0()); 
	    }
		lv_dims__4_0=ruledims		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodDeclaratorRule());
	        }
       		set(
       			$current, 
       			"dims_",
        		lv_dims__4_0, 
        		"dims");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleformalParameterList
entryRuleformalParameterList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFormalParameterListRule()); }
	 iv_ruleformalParameterList=ruleformalParameterList 
	 { $current=$iv_ruleformalParameterList.current; } 
	 EOF 
;

// Rule formalParameterList
ruleformalParameterList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getFormalParameterListAccess().getParametersFormalParametersParserRuleCall_0_0_0()); 
	    }
		lv_parameters_0_0=ruleformalParameters		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFormalParameterListRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_0_0, 
        		"formalParameters");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFormalParameterListAccess().getCommaKeyword_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFormalParameterListAccess().getParametersLastFormalParameterParserRuleCall_0_2_0()); 
	    }
		lv_parameters_2_0=rulelastFormalParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFormalParameterListRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_2_0, 
        		"lastFormalParameter");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getFormalParameterListAccess().getParametersLastFormalParameterParserRuleCall_1_0()); 
	    }
		lv_parameters_3_0=rulelastFormalParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFormalParameterListRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_3_0, 
        		"lastFormalParameter");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleformalParameters
entryRuleformalParameters returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFormalParametersRule()); }
	 iv_ruleformalParameters=ruleformalParameters 
	 { $current=$iv_ruleformalParameters.current; } 
	 EOF 
;

// Rule formalParameters
ruleformalParameters returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getFormalParametersAccess().getParametersFormalParameterParserRuleCall_0_0_0()); 
	    }
		lv_parameters_0_0=ruleformalParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFormalParametersRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_0_0, 
        		"formalParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFormalParametersAccess().getCommaKeyword_0_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFormalParametersAccess().getParametersFormalParameterParserRuleCall_0_1_1_0()); 
	    }
		lv_parameters_2_0=ruleformalParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFormalParametersRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_2_0, 
        		"formalParameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getFormalParametersAccess().getParametersReceiverParameterParserRuleCall_1_0_0()); 
	    }
		lv_parameters_3_0=rulereceiverParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFormalParametersRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_3_0, 
        		"receiverParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFormalParametersAccess().getCommaKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFormalParametersAccess().getParametersFormalParameterParserRuleCall_1_1_1_0()); 
	    }
		lv_parameters_5_0=ruleformalParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFormalParametersRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_5_0, 
        		"formalParameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*))
;





// Entry rule entryRuleformalParameter
entryRuleformalParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFormalParameterRule()); }
	 iv_ruleformalParameter=ruleformalParameter 
	 { $current=$iv_ruleformalParameter.current; } 
	 EOF 
;

// Rule formalParameter
ruleformalParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFormalParameterAccess().getModifiersVariableModifierParserRuleCall_0_0()); 
	    }
		lv_modifiers_0_0=rulevariableModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFormalParameterRule());
	        }
       		add(
       			$current, 
       			"modifiers",
        		lv_modifiers_0_0, 
        		"variableModifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getFormalParameterAccess().getTypeUnannTypeParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleunannType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFormalParameterRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"unannType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFormalParameterAccess().getNameVariableDeclaratorIdParserRuleCall_2_0()); 
	    }
		lv_name_2_0=rulevariableDeclaratorId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFormalParameterRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"variableDeclaratorId");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulevariableModifier
entryRulevariableModifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableModifierRule()); }
	 iv_rulevariableModifier=rulevariableModifier 
	 { $current=$iv_rulevariableModifier.current; } 
	 EOF 
;

// Rule variableModifier
rulevariableModifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getVariableModifierAccess().getAnnotationParserRuleCall_0()); 
    }
    this_annotation_0=ruleannotation
    { 
        $current = $this_annotation_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getVariableModifierAccess().getJavaVariableModifierParserRuleCall_1()); 
    }
    this_JavaVariableModifier_1=ruleJavaVariableModifier
    { 
        $current = $this_JavaVariableModifier_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleJavaVariableModifier
entryRuleJavaVariableModifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJavaVariableModifierRule()); }
	 iv_ruleJavaVariableModifier=ruleJavaVariableModifier 
	 { $current=$iv_ruleJavaVariableModifier.current; } 
	 EOF 
;

// Rule JavaVariableModifier
ruleJavaVariableModifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getJavaVariableModifierAccess().getModifierVariableModifiersEnumRuleCall_0()); 
	    }
		lv_modifier_0_0=ruleVariableModifiers		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJavaVariableModifierRule());
	        }
       		set(
       			$current, 
       			"modifier",
        		lv_modifier_0_0, 
        		"VariableModifiers");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRulelastFormalParameter
entryRulelastFormalParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLastFormalParameterRule()); }
	 iv_rulelastFormalParameter=rulelastFormalParameter 
	 { $current=$iv_rulelastFormalParameter.current; } 
	 EOF 
;

// Rule lastFormalParameter
rulelastFormalParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getLastFormalParameterAccess().getModifiersVariableModifierParserRuleCall_0_0_0()); 
	    }
		lv_modifiers_0_0=rulevariableModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLastFormalParameterRule());
	        }
       		add(
       			$current, 
       			"modifiers",
        		lv_modifiers_0_0, 
        		"variableModifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getLastFormalParameterAccess().getTypeUnannTypeParserRuleCall_0_1_0()); 
	    }
		lv_type_1_0=ruleunannType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLastFormalParameterRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"unannType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLastFormalParameterAccess().getAnnotationsAnnotationParserRuleCall_0_2_0()); 
	    }
		lv_annotations_2_0=ruleannotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLastFormalParameterRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_2_0, 
        		"annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		lv_varargs_3_0=	'...' 
    {
        newLeafNode(lv_varargs_3_0, grammarAccess.getLastFormalParameterAccess().getVarargsFullStopFullStopFullStopKeyword_0_3_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLastFormalParameterRule());
	        }
       		setWithLastConsumed($current, "varargs", true, "...");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLastFormalParameterAccess().getNameVariableDeclaratorIdParserRuleCall_0_4_0()); 
	    }
		lv_name_4_0=rulevariableDeclaratorId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLastFormalParameterRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"variableDeclaratorId");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLastFormalParameterAccess().getFormalParameterParserRuleCall_1()); 
    }
    this_formalParameter_5=ruleformalParameter
    { 
        $current = $this_formalParameter_5.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulereceiverParameter
entryRulereceiverParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReceiverParameterRule()); }
	 iv_rulereceiverParameter=rulereceiverParameter 
	 { $current=$iv_rulereceiverParameter.current; } 
	 EOF 
;

// Rule receiverParameter
rulereceiverParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getReceiverParameterAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleannotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReceiverParameterRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getReceiverParameterAccess().getTypeUnannTypeParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleunannType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReceiverParameterRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"unannType");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		lv_qualifier_2_0=RULE_IDENTIFIER
		{
			newLeafNode(lv_qualifier_2_0, grammarAccess.getReceiverParameterAccess().getQualifierIdentifierTerminalRuleCall_2_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getReceiverParameterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"qualifier",
        		lv_qualifier_2_0, 
        		"Identifier");
	    }

)
)	otherlv_3='.' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getReceiverParameterAccess().getFullStopKeyword_2_1());
    }
)?(
(
		lv_name_4_0=	'this' 
    {
        newLeafNode(lv_name_4_0, grammarAccess.getReceiverParameterAccess().getNameThisKeyword_3_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getReceiverParameterRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_4_0, "this");
	    }

)
))
;





// Entry rule entryRulethrows_
entryRulethrows_ returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getThrows_Rule()); }
	 iv_rulethrows_=rulethrows_ 
	 { $current=$iv_rulethrows_.current; } 
	 EOF 
;

// Rule throws_
rulethrows_ returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='throws' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getThrows_Access().getThrowsKeyword_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getThrows_Access().getExceptionTypeListParserRuleCall_1()); 
    }
    this_exceptionTypeList_1=ruleexceptionTypeList
    { 
        $current = $this_exceptionTypeList_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleexceptionTypeList
entryRuleexceptionTypeList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExceptionTypeListRule()); }
	 iv_ruleexceptionTypeList=ruleexceptionTypeList 
	 { $current=$iv_ruleexceptionTypeList.current; } 
	 EOF 
;

// Rule exceptionTypeList
ruleexceptionTypeList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExceptionTypeListAccess().getExceptionTypesExceptionTypeParserRuleCall_0_0()); 
	    }
		lv_exceptionTypes_0_0=ruleexceptionType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExceptionTypeListRule());
	        }
       		add(
       			$current, 
       			"exceptionTypes",
        		lv_exceptionTypes_0_0, 
        		"exceptionType");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExceptionTypeListAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExceptionTypeListAccess().getExceptionTypesExceptionTypeParserRuleCall_1_1_0()); 
	    }
		lv_exceptionTypes_2_0=ruleexceptionType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExceptionTypeListRule());
	        }
       		add(
       			$current, 
       			"exceptionTypes",
        		lv_exceptionTypes_2_0, 
        		"exceptionType");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleexceptionType
entryRuleexceptionType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExceptionTypeRule()); }
	 iv_ruleexceptionType=ruleexceptionType 
	 { $current=$iv_ruleexceptionType.current; } 
	 EOF 
;

// Rule exceptionType
ruleexceptionType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExceptionTypeAccess().getClassTypeParserRuleCall_0()); 
    }
    this_classType_0=ruleclassType
    { 
        $current = $this_classType_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExceptionTypeAccess().getTypeVariableParserRuleCall_1()); 
    }
    this_typeVariable_1=ruletypeVariable
    { 
        $current = $this_typeVariable_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulemethodBody
entryRulemethodBody returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethodBodyRule()); }
	 iv_rulemethodBody=rulemethodBody 
	 { $current=$iv_rulemethodBody.current; } 
	 EOF 
;

// Rule methodBody
rulemethodBody returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getMethodBodyAccess().getBlockParserRuleCall_0()); 
    }
    this_block_0=ruleblock
    { 
        $current = $this_block_0.current; 
        afterParserOrEnumRuleCall();
    }

    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getMethodBodyAccess().getMethodBodyAction_1_0(),
            $current);
    }
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMethodBodyAccess().getSemicolonKeyword_1_1());
    }
))
;





// Entry rule entryRuleinstanceInitializer
entryRuleinstanceInitializer returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInstanceInitializerRule()); }
	 iv_ruleinstanceInitializer=ruleinstanceInitializer 
	 { $current=$iv_ruleinstanceInitializer.current; } 
	 EOF 
;

// Rule instanceInitializer
ruleinstanceInitializer returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getInstanceInitializerAccess().getBlockParserRuleCall()); 
    }
    this_block_0=ruleblock
    { 
        $current = $this_block_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRulestaticInitializer
entryRulestaticInitializer returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStaticInitializerRule()); }
	 iv_rulestaticInitializer=rulestaticInitializer 
	 { $current=$iv_rulestaticInitializer.current; } 
	 EOF 
;

// Rule staticInitializer
rulestaticInitializer returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='static' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStaticInitializerAccess().getStaticKeyword_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStaticInitializerAccess().getBlockParserRuleCall_1()); 
    }
    this_block_1=ruleblock
    { 
        $current = $this_block_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleconstructorDeclaration
entryRuleconstructorDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstructorDeclarationRule()); }
	 iv_ruleconstructorDeclaration=ruleconstructorDeclaration 
	 { $current=$iv_ruleconstructorDeclaration.current; } 
	 EOF 
;

// Rule constructorDeclaration
ruleconstructorDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConstructorDeclarationAccess().getConstructorModifiersConstructorModifierParserRuleCall_0_0()); 
	    }
		lv_constructorModifiers_0_0=ruleconstructorModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstructorDeclarationRule());
	        }
       		add(
       			$current, 
       			"constructorModifiers",
        		lv_constructorModifiers_0_0, 
        		"constructorModifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getConstructorDeclarationAccess().getConstructorDeclaratorConstructorDeclaratorParserRuleCall_1_0()); 
	    }
		lv_constructorDeclarator_1_0=ruleconstructorDeclarator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstructorDeclarationRule());
	        }
       		set(
       			$current, 
       			"constructorDeclarator",
        		lv_constructorDeclarator_1_0, 
        		"constructorDeclarator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getConstructorDeclarationAccess().getThrows_Throws_ParserRuleCall_2_0()); 
	    }
		lv_throws__2_0=rulethrows_		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstructorDeclarationRule());
	        }
       		set(
       			$current, 
       			"throws_",
        		lv_throws__2_0, 
        		"throws_");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleconstructorModifier
entryRuleconstructorModifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstructorModifierRule()); }
	 iv_ruleconstructorModifier=ruleconstructorModifier 
	 { $current=$iv_ruleconstructorModifier.current; } 
	 EOF 
;

// Rule constructorModifier
ruleconstructorModifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConstructorModifierAccess().getAnnotationParserRuleCall_0()); 
    }
    this_annotation_0=ruleannotation
    { 
        $current = $this_annotation_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConstructorModifierAccess().getJavaConstructorModifierParserRuleCall_1()); 
    }
    this_JavaConstructorModifier_1=ruleJavaConstructorModifier
    { 
        $current = $this_JavaConstructorModifier_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleJavaConstructorModifier
entryRuleJavaConstructorModifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJavaConstructorModifierRule()); }
	 iv_ruleJavaConstructorModifier=ruleJavaConstructorModifier 
	 { $current=$iv_ruleJavaConstructorModifier.current; } 
	 EOF 
;

// Rule JavaConstructorModifier
ruleJavaConstructorModifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getJavaConstructorModifierAccess().getModifierConstructorModifiersEnumRuleCall_0()); 
	    }
		lv_modifier_0_0=ruleConstructorModifiers		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJavaConstructorModifierRule());
	        }
       		set(
       			$current, 
       			"modifier",
        		lv_modifier_0_0, 
        		"ConstructorModifiers");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleconstructorDeclarator
entryRuleconstructorDeclarator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstructorDeclaratorRule()); }
	 iv_ruleconstructorDeclarator=ruleconstructorDeclarator 
	 { $current=$iv_ruleconstructorDeclarator.current; } 
	 EOF 
;

// Rule constructorDeclarator
ruleconstructorDeclarator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConstructorDeclaratorAccess().getTypeParametersTypeParametersParserRuleCall_0_0()); 
	    }
		lv_typeParameters_0_0=ruletypeParameters		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstructorDeclaratorRule());
	        }
       		add(
       			$current, 
       			"typeParameters",
        		lv_typeParameters_0_0, 
        		"typeParameters");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getConstructorDeclaratorAccess().getSimpleTypeNameSimpleTypeNameParserRuleCall_1_0()); 
	    }
		lv_simpleTypeName_1_0=rulesimpleTypeName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstructorDeclaratorRule());
	        }
       		set(
       			$current, 
       			"simpleTypeName",
        		lv_simpleTypeName_1_0, 
        		"simpleTypeName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getConstructorDeclaratorAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstructorDeclaratorAccess().getFormalParameterListFormalParameterListParserRuleCall_3_0()); 
	    }
		lv_formalParameterList_3_0=ruleformalParameterList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstructorDeclaratorRule());
	        }
       		set(
       			$current, 
       			"formalParameterList",
        		lv_formalParameterList_3_0, 
        		"formalParameterList");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getConstructorDeclaratorAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRulesimpleTypeName
entryRulesimpleTypeName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleTypeNameRule()); } 
	 iv_rulesimpleTypeName=rulesimpleTypeName 
	 { $current=$iv_rulesimpleTypeName.current.getText(); }  
	 EOF 
;

// Rule simpleTypeName
rulesimpleTypeName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_Identifier_0=RULE_IDENTIFIER    {
		$current.merge(this_Identifier_0);
    }

    { 
    newLeafNode(this_Identifier_0, grammarAccess.getSimpleTypeNameAccess().getIdentifierTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleenumDeclaration
entryRuleenumDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumDeclarationRule()); }
	 iv_ruleenumDeclaration=ruleenumDeclaration 
	 { $current=$iv_ruleenumDeclaration.current; } 
	 EOF 
;

// Rule enumDeclaration
ruleenumDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEnumDeclarationAccess().getModifiersClassModifierParserRuleCall_0_0()); 
	    }
		lv_modifiers_0_0=ruleclassModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumDeclarationRule());
	        }
       		add(
       			$current, 
       			"modifiers",
        		lv_modifiers_0_0, 
        		"classModifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='enum' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEnumDeclarationAccess().getEnumKeyword_1());
    }
(
(
		lv_name_2_0=RULE_IDENTIFIER
		{
			newLeafNode(lv_name_2_0, grammarAccess.getEnumDeclarationAccess().getNameIdentifierTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"Identifier");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumDeclarationAccess().getSuperinterfacesSuperinterfacesParserRuleCall_3_0()); 
	    }
		lv_superinterfaces_3_0=rulesuperinterfaces		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumDeclarationRule());
	        }
       		set(
       			$current, 
       			"superinterfaces",
        		lv_superinterfaces_3_0, 
        		"superinterfaces");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumDeclarationAccess().getEnumBodyEnumBodyParserRuleCall_4_0()); 
	    }
		lv_enumBody_4_0=ruleenumBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumDeclarationRule());
	        }
       		set(
       			$current, 
       			"enumBody",
        		lv_enumBody_4_0, 
        		"enumBody");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleenumBody
entryRuleenumBody returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumBodyRule()); }
	 iv_ruleenumBody=ruleenumBody 
	 { $current=$iv_ruleenumBody.current; } 
	 EOF 
;

// Rule enumBody
ruleenumBody returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getEnumBodyAccess().getEnumBodyAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEnumBodyAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumBodyAccess().getEnumConstantListEnumConstantListParserRuleCall_2_0()); 
	    }
		lv_enumConstantList_2_0=ruleenumConstantList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumBodyRule());
	        }
       		set(
       			$current, 
       			"enumConstantList",
        		lv_enumConstantList_2_0, 
        		"enumConstantList");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getEnumBodyAccess().getCommaKeyword_3());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumBodyAccess().getEnumBodyDeclarationsEnumBodyDeclarationsParserRuleCall_4_0()); 
	    }
		lv_enumBodyDeclarations_4_0=ruleenumBodyDeclarations		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumBodyRule());
	        }
       		set(
       			$current, 
       			"enumBodyDeclarations",
        		lv_enumBodyDeclarations_4_0, 
        		"enumBodyDeclarations");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getEnumBodyAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleenumConstantList
entryRuleenumConstantList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumConstantListRule()); }
	 iv_ruleenumConstantList=ruleenumConstantList 
	 { $current=$iv_ruleenumConstantList.current; } 
	 EOF 
;

// Rule enumConstantList
ruleenumConstantList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEnumConstantListAccess().getEnumConstantsEnumConstantParserRuleCall_0_0()); 
	    }
		lv_enumConstants_0_0=ruleenumConstant		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumConstantListRule());
	        }
       		add(
       			$current, 
       			"enumConstants",
        		lv_enumConstants_0_0, 
        		"enumConstant");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEnumConstantListAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumConstantListAccess().getEnumConstantsEnumConstantParserRuleCall_1_1_0()); 
	    }
		lv_enumConstants_2_0=ruleenumConstant		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumConstantListRule());
	        }
       		add(
       			$current, 
       			"enumConstants",
        		lv_enumConstants_2_0, 
        		"enumConstant");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleenumConstant
entryRuleenumConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumConstantRule()); }
	 iv_ruleenumConstant=ruleenumConstant 
	 { $current=$iv_ruleenumConstant.current; } 
	 EOF 
;

// Rule enumConstant
ruleenumConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEnumConstantAccess().getEnumConstantModifiersEnumConstantModifierParserRuleCall_0_0()); 
	    }
		lv_enumConstantModifiers_0_0=ruleenumConstantModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumConstantRule());
	        }
       		add(
       			$current, 
       			"enumConstantModifiers",
        		lv_enumConstantModifiers_0_0, 
        		"enumConstantModifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		lv_name_1_0=RULE_IDENTIFIER
		{
			newLeafNode(lv_name_1_0, grammarAccess.getEnumConstantAccess().getNameIdentifierTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumConstantRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"Identifier");
	    }

)
)(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEnumConstantAccess().getLeftParenthesisKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumConstantAccess().getArgumentListArgumentListParserRuleCall_2_1_0()); 
	    }
		lv_argumentList_3_0=ruleargumentList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumConstantRule());
	        }
       		set(
       			$current, 
       			"argumentList",
        		lv_argumentList_3_0, 
        		"argumentList");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getEnumConstantAccess().getRightParenthesisKeyword_2_2());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumConstantAccess().getClassBodyClassBodyParserRuleCall_3_0()); 
	    }
		lv_classBody_5_0=ruleclassBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumConstantRule());
	        }
       		set(
       			$current, 
       			"classBody",
        		lv_classBody_5_0, 
        		"classBody");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleenumConstantModifier
entryRuleenumConstantModifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumConstantModifierRule()); }
	 iv_ruleenumConstantModifier=ruleenumConstantModifier 
	 { $current=$iv_ruleenumConstantModifier.current; } 
	 EOF 
;

// Rule enumConstantModifier
ruleenumConstantModifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEnumConstantModifierAccess().getAnnotationParserRuleCall()); 
    }
    this_annotation_0=ruleannotation
    { 
        $current = $this_annotation_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleenumBodyDeclarations
entryRuleenumBodyDeclarations returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumBodyDeclarationsRule()); }
	 iv_ruleenumBodyDeclarations=ruleenumBodyDeclarations 
	 { $current=$iv_ruleenumBodyDeclarations.current; } 
	 EOF 
;

// Rule enumBodyDeclarations
ruleenumBodyDeclarations returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getEnumBodyDeclarationsAccess().getEnumBodyDeclarationsAction_0(),
            $current);
    }
)	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEnumBodyDeclarationsAccess().getSemicolonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumBodyDeclarationsAccess().getClassBodyDeclarationsClassBodyDeclarationParserRuleCall_2_0()); 
	    }
		lv_classBodyDeclarations_2_0=ruleclassBodyDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumBodyDeclarationsRule());
	        }
       		add(
       			$current, 
       			"classBodyDeclarations",
        		lv_classBodyDeclarations_2_0, 
        		"classBodyDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleinterfaceDeclaration
entryRuleinterfaceDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterfaceDeclarationRule()); }
	 iv_ruleinterfaceDeclaration=ruleinterfaceDeclaration 
	 { $current=$iv_ruleinterfaceDeclaration.current; } 
	 EOF 
;

// Rule interfaceDeclaration
ruleinterfaceDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getInterfaceDeclarationAccess().getNormalInterfaceDeclarationParserRuleCall_0()); 
    }
    this_normalInterfaceDeclaration_0=rulenormalInterfaceDeclaration
    { 
        $current = $this_normalInterfaceDeclaration_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getInterfaceDeclarationAccess().getAnnotationTypeDeclarationParserRuleCall_1()); 
    }
    this_annotationTypeDeclaration_1=ruleannotationTypeDeclaration
    { 
        $current = $this_annotationTypeDeclaration_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulenormalInterfaceDeclaration
entryRulenormalInterfaceDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNormalInterfaceDeclarationRule()); }
	 iv_rulenormalInterfaceDeclaration=rulenormalInterfaceDeclaration 
	 { $current=$iv_rulenormalInterfaceDeclaration.current; } 
	 EOF 
;

// Rule normalInterfaceDeclaration
rulenormalInterfaceDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getNormalInterfaceDeclarationAccess().getInterfaceModifiersInterfaceModifierParserRuleCall_0_0()); 
	    }
		lv_interfaceModifiers_0_0=ruleinterfaceModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNormalInterfaceDeclarationRule());
	        }
       		add(
       			$current, 
       			"interfaceModifiers",
        		lv_interfaceModifiers_0_0, 
        		"interfaceModifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='interface' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNormalInterfaceDeclarationAccess().getInterfaceKeyword_1());
    }
(
(
		lv_name_2_0=RULE_IDENTIFIER
		{
			newLeafNode(lv_name_2_0, grammarAccess.getNormalInterfaceDeclarationAccess().getNameIdentifierTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNormalInterfaceDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"Identifier");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNormalInterfaceDeclarationAccess().getTypeParametersTypeParametersParserRuleCall_3_0()); 
	    }
		lv_typeParameters_3_0=ruletypeParameters		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNormalInterfaceDeclarationRule());
	        }
       		set(
       			$current, 
       			"typeParameters",
        		lv_typeParameters_3_0, 
        		"typeParameters");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getNormalInterfaceDeclarationAccess().getExtendsInterfacesExtendsInterfacesParserRuleCall_4_0()); 
	    }
		lv_extendsInterfaces_4_0=ruleextendsInterfaces		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNormalInterfaceDeclarationRule());
	        }
       		set(
       			$current, 
       			"extendsInterfaces",
        		lv_extendsInterfaces_4_0, 
        		"extendsInterfaces");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getNormalInterfaceDeclarationAccess().getInterfaceBodyInterfaceBodyParserRuleCall_5_0()); 
	    }
		lv_interfaceBody_5_0=ruleinterfaceBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNormalInterfaceDeclarationRule());
	        }
       		set(
       			$current, 
       			"interfaceBody",
        		lv_interfaceBody_5_0, 
        		"interfaceBody");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleinterfaceModifier
entryRuleinterfaceModifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterfaceModifierRule()); }
	 iv_ruleinterfaceModifier=ruleinterfaceModifier 
	 { $current=$iv_ruleinterfaceModifier.current; } 
	 EOF 
;

// Rule interfaceModifier
ruleinterfaceModifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getInterfaceModifierAccess().getAnnotationParserRuleCall_0()); 
    }
    this_annotation_0=ruleannotation
    { 
        $current = $this_annotation_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getInterfaceModifierAccess().getJavaInterfaceModifierParserRuleCall_1()); 
    }
    this_JavaInterfaceModifier_1=ruleJavaInterfaceModifier
    { 
        $current = $this_JavaInterfaceModifier_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleJavaInterfaceModifier
entryRuleJavaInterfaceModifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJavaInterfaceModifierRule()); }
	 iv_ruleJavaInterfaceModifier=ruleJavaInterfaceModifier 
	 { $current=$iv_ruleJavaInterfaceModifier.current; } 
	 EOF 
;

// Rule JavaInterfaceModifier
ruleJavaInterfaceModifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getJavaInterfaceModifierAccess().getModifierInterfaceModifiersEnumRuleCall_0()); 
	    }
		lv_modifier_0_0=ruleInterfaceModifiers		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJavaInterfaceModifierRule());
	        }
       		set(
       			$current, 
       			"modifier",
        		lv_modifier_0_0, 
        		"InterfaceModifiers");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleextendsInterfaces
entryRuleextendsInterfaces returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExtendsInterfacesRule()); }
	 iv_ruleextendsInterfaces=ruleextendsInterfaces 
	 { $current=$iv_ruleextendsInterfaces.current; } 
	 EOF 
;

// Rule extendsInterfaces
ruleextendsInterfaces returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='extends' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExtendsInterfacesAccess().getExtendsKeyword_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExtendsInterfacesAccess().getInterfaceTypeListParserRuleCall_1()); 
    }
    this_interfaceTypeList_1=ruleinterfaceTypeList
    { 
        $current = $this_interfaceTypeList_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleinterfaceBody
entryRuleinterfaceBody returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterfaceBodyRule()); }
	 iv_ruleinterfaceBody=ruleinterfaceBody 
	 { $current=$iv_ruleinterfaceBody.current; } 
	 EOF 
;

// Rule interfaceBody
ruleinterfaceBody returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getInterfaceBodyAccess().getInterfaceBodyAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInterfaceBodyAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceBodyAccess().getInterfaceMemberDeclarationsInterfaceMemberDeclarationParserRuleCall_2_0()); 
	    }
		lv_interfaceMemberDeclarations_2_0=ruleinterfaceMemberDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceBodyRule());
	        }
       		add(
       			$current, 
       			"interfaceMemberDeclarations",
        		lv_interfaceMemberDeclarations_2_0, 
        		"interfaceMemberDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getInterfaceBodyAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleinterfaceMemberDeclaration
entryRuleinterfaceMemberDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterfaceMemberDeclarationRule()); }
	 iv_ruleinterfaceMemberDeclaration=ruleinterfaceMemberDeclaration 
	 { $current=$iv_ruleinterfaceMemberDeclaration.current; } 
	 EOF 
;

// Rule interfaceMemberDeclaration
ruleinterfaceMemberDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getInterfaceMemberDeclarationAccess().getConstantDeclarationParserRuleCall_0()); 
    }
    this_constantDeclaration_0=ruleconstantDeclaration
    { 
        $current = $this_constantDeclaration_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getInterfaceMemberDeclarationAccess().getInterfaceMethodDeclarationParserRuleCall_1()); 
    }
    this_interfaceMethodDeclaration_1=ruleinterfaceMethodDeclaration
    { 
        $current = $this_interfaceMethodDeclaration_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getInterfaceMemberDeclarationAccess().getClassDeclarationParserRuleCall_2()); 
    }
    this_classDeclaration_2=ruleclassDeclaration
    { 
        $current = $this_classDeclaration_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getInterfaceMemberDeclarationAccess().getInterfaceDeclarationParserRuleCall_3()); 
    }
    this_interfaceDeclaration_3=ruleinterfaceDeclaration
    { 
        $current = $this_interfaceDeclaration_3.current; 
        afterParserOrEnumRuleCall();
    }

    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getInterfaceMemberDeclarationAccess().getInterfaceMemberDeclarationAction_4_0(),
            $current);
    }
)	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getInterfaceMemberDeclarationAccess().getSemicolonKeyword_4_1());
    }
))
;





// Entry rule entryRuleconstantDeclaration
entryRuleconstantDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantDeclarationRule()); }
	 iv_ruleconstantDeclaration=ruleconstantDeclaration 
	 { $current=$iv_ruleconstantDeclaration.current; } 
	 EOF 
;

// Rule constantDeclaration
ruleconstantDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConstantDeclarationAccess().getConstantModifiersConstantModifierParserRuleCall_0_0()); 
	    }
		lv_constantModifiers_0_0=ruleconstantModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantDeclarationRule());
	        }
       		add(
       			$current, 
       			"constantModifiers",
        		lv_constantModifiers_0_0, 
        		"constantModifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantDeclarationAccess().getUnannTypeUnannTypeParserRuleCall_1_0()); 
	    }
		lv_unannType_1_0=ruleunannType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantDeclarationRule());
	        }
       		set(
       			$current, 
       			"unannType",
        		lv_unannType_1_0, 
        		"unannType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantDeclarationAccess().getVariableDeclaratorListVariableDeclaratorListParserRuleCall_2_0()); 
	    }
		lv_variableDeclaratorList_2_0=rulevariableDeclaratorList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantDeclarationRule());
	        }
       		set(
       			$current, 
       			"variableDeclaratorList",
        		lv_variableDeclaratorList_2_0, 
        		"variableDeclaratorList");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getConstantDeclarationAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleconstantModifier
entryRuleconstantModifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantModifierRule()); }
	 iv_ruleconstantModifier=ruleconstantModifier 
	 { $current=$iv_ruleconstantModifier.current; } 
	 EOF 
;

// Rule constantModifier
ruleconstantModifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConstantModifierAccess().getAnnotationParserRuleCall_0()); 
    }
    this_annotation_0=ruleannotation
    { 
        $current = $this_annotation_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConstantModifierAccess().getJavaConstantModifierParserRuleCall_1()); 
    }
    this_JavaConstantModifier_1=ruleJavaConstantModifier
    { 
        $current = $this_JavaConstantModifier_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleJavaConstantModifier
entryRuleJavaConstantModifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJavaConstantModifierRule()); }
	 iv_ruleJavaConstantModifier=ruleJavaConstantModifier 
	 { $current=$iv_ruleJavaConstantModifier.current; } 
	 EOF 
;

// Rule JavaConstantModifier
ruleJavaConstantModifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getJavaConstantModifierAccess().getModifierConstantModifiersEnumRuleCall_0()); 
	    }
		lv_modifier_0_0=ruleConstantModifiers		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJavaConstantModifierRule());
	        }
       		set(
       			$current, 
       			"modifier",
        		lv_modifier_0_0, 
        		"ConstantModifiers");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleinterfaceMethodDeclaration
entryRuleinterfaceMethodDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterfaceMethodDeclarationRule()); }
	 iv_ruleinterfaceMethodDeclaration=ruleinterfaceMethodDeclaration 
	 { $current=$iv_ruleinterfaceMethodDeclaration.current; } 
	 EOF 
;

// Rule interfaceMethodDeclaration
ruleinterfaceMethodDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceMethodDeclarationAccess().getInterfaceMethodModifiersInterfaceMethodModifierParserRuleCall_0_0()); 
	    }
		lv_interfaceMethodModifiers_0_0=ruleinterfaceMethodModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceMethodDeclarationRule());
	        }
       		add(
       			$current, 
       			"interfaceMethodModifiers",
        		lv_interfaceMethodModifiers_0_0, 
        		"interfaceMethodModifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceMethodDeclarationAccess().getMethodHeaderMethodHeaderParserRuleCall_1_0()); 
	    }
		lv_methodHeader_1_0=rulemethodHeader		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceMethodDeclarationRule());
	        }
       		set(
       			$current, 
       			"methodHeader",
        		lv_methodHeader_1_0, 
        		"methodHeader");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceMethodDeclarationAccess().getMethodBodyMethodBodyParserRuleCall_2_0()); 
	    }
		lv_methodBody_2_0=rulemethodBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceMethodDeclarationRule());
	        }
       		set(
       			$current, 
       			"methodBody",
        		lv_methodBody_2_0, 
        		"methodBody");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleinterfaceMethodModifier
entryRuleinterfaceMethodModifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterfaceMethodModifierRule()); }
	 iv_ruleinterfaceMethodModifier=ruleinterfaceMethodModifier 
	 { $current=$iv_ruleinterfaceMethodModifier.current; } 
	 EOF 
;

// Rule interfaceMethodModifier
ruleinterfaceMethodModifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getInterfaceMethodModifierAccess().getAnnotationParserRuleCall_0()); 
    }
    this_annotation_0=ruleannotation
    { 
        $current = $this_annotation_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getInterfaceMethodModifierAccess().getJavaInterfaceMethodModifiersParserRuleCall_1()); 
    }
    this_JavaInterfaceMethodModifiers_1=ruleJavaInterfaceMethodModifiers
    { 
        $current = $this_JavaInterfaceMethodModifiers_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleJavaInterfaceMethodModifiers
entryRuleJavaInterfaceMethodModifiers returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJavaInterfaceMethodModifiersRule()); }
	 iv_ruleJavaInterfaceMethodModifiers=ruleJavaInterfaceMethodModifiers 
	 { $current=$iv_ruleJavaInterfaceMethodModifiers.current; } 
	 EOF 
;

// Rule JavaInterfaceMethodModifiers
ruleJavaInterfaceMethodModifiers returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getJavaInterfaceMethodModifiersAccess().getModifiersInterfaceMethodModifiersEnumRuleCall_0()); 
	    }
		lv_modifiers_0_0=ruleInterfaceMethodModifiers		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJavaInterfaceMethodModifiersRule());
	        }
       		set(
       			$current, 
       			"modifiers",
        		lv_modifiers_0_0, 
        		"InterfaceMethodModifiers");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleannotationTypeDeclaration
entryRuleannotationTypeDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnnotationTypeDeclarationRule()); }
	 iv_ruleannotationTypeDeclaration=ruleannotationTypeDeclaration 
	 { $current=$iv_ruleannotationTypeDeclaration.current; } 
	 EOF 
;

// Rule annotationTypeDeclaration
ruleannotationTypeDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationTypeDeclarationAccess().getInterfaceModifiersInterfaceModifierParserRuleCall_0_0()); 
	    }
		lv_interfaceModifiers_0_0=ruleinterfaceModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationTypeDeclarationRule());
	        }
       		add(
       			$current, 
       			"interfaceModifiers",
        		lv_interfaceModifiers_0_0, 
        		"interfaceModifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='@' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAnnotationTypeDeclarationAccess().getCommercialAtKeyword_1());
    }
	otherlv_2='interface' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAnnotationTypeDeclarationAccess().getInterfaceKeyword_2());
    }
(
(
		lv_name_3_0=RULE_IDENTIFIER
		{
			newLeafNode(lv_name_3_0, grammarAccess.getAnnotationTypeDeclarationAccess().getNameIdentifierTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAnnotationTypeDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"Identifier");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationTypeDeclarationAccess().getAnnotationTypeBodyAnnotationTypeBodyParserRuleCall_4_0()); 
	    }
		lv_annotationTypeBody_4_0=ruleannotationTypeBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationTypeDeclarationRule());
	        }
       		set(
       			$current, 
       			"annotationTypeBody",
        		lv_annotationTypeBody_4_0, 
        		"annotationTypeBody");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleannotationTypeBody
entryRuleannotationTypeBody returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnnotationTypeBodyRule()); }
	 iv_ruleannotationTypeBody=ruleannotationTypeBody 
	 { $current=$iv_ruleannotationTypeBody.current; } 
	 EOF 
;

// Rule annotationTypeBody
ruleannotationTypeBody returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getAnnotationTypeBodyAccess().getAnnotationTypeBodyAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAnnotationTypeBodyAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationTypeBodyAccess().getAnnotationTypeMemberDeclarationsAnnotationTypeMemberDeclarationParserRuleCall_2_0()); 
	    }
		lv_annotationTypeMemberDeclarations_2_0=ruleannotationTypeMemberDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationTypeBodyRule());
	        }
       		add(
       			$current, 
       			"annotationTypeMemberDeclarations",
        		lv_annotationTypeMemberDeclarations_2_0, 
        		"annotationTypeMemberDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAnnotationTypeBodyAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleannotationTypeMemberDeclaration
entryRuleannotationTypeMemberDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnnotationTypeMemberDeclarationRule()); }
	 iv_ruleannotationTypeMemberDeclaration=ruleannotationTypeMemberDeclaration 
	 { $current=$iv_ruleannotationTypeMemberDeclaration.current; } 
	 EOF 
;

// Rule annotationTypeMemberDeclaration
ruleannotationTypeMemberDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAnnotationTypeMemberDeclarationAccess().getAnnotationTypeElementDeclarationParserRuleCall_0()); 
    }
    this_annotationTypeElementDeclaration_0=ruleannotationTypeElementDeclaration
    { 
        $current = $this_annotationTypeElementDeclaration_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAnnotationTypeMemberDeclarationAccess().getConstantDeclarationParserRuleCall_1()); 
    }
    this_constantDeclaration_1=ruleconstantDeclaration
    { 
        $current = $this_constantDeclaration_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAnnotationTypeMemberDeclarationAccess().getClassDeclarationParserRuleCall_2()); 
    }
    this_classDeclaration_2=ruleclassDeclaration
    { 
        $current = $this_classDeclaration_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAnnotationTypeMemberDeclarationAccess().getInterfaceDeclarationParserRuleCall_3()); 
    }
    this_interfaceDeclaration_3=ruleinterfaceDeclaration
    { 
        $current = $this_interfaceDeclaration_3.current; 
        afterParserOrEnumRuleCall();
    }

    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getAnnotationTypeMemberDeclarationAccess().getAnnotationTypeMemberDeclarationAction_4_0(),
            $current);
    }
)	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAnnotationTypeMemberDeclarationAccess().getSemicolonKeyword_4_1());
    }
))
;





// Entry rule entryRuleannotationTypeElementDeclaration
entryRuleannotationTypeElementDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnnotationTypeElementDeclarationRule()); }
	 iv_ruleannotationTypeElementDeclaration=ruleannotationTypeElementDeclaration 
	 { $current=$iv_ruleannotationTypeElementDeclaration.current; } 
	 EOF 
;

// Rule annotationTypeElementDeclaration
ruleannotationTypeElementDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationTypeElementDeclarationAccess().getAnnotationTypeElementModifiersAnnotationTypeElementModifierParserRuleCall_0_0()); 
	    }
		lv_annotationTypeElementModifiers_0_0=ruleannotationTypeElementModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationTypeElementDeclarationRule());
	        }
       		add(
       			$current, 
       			"annotationTypeElementModifiers",
        		lv_annotationTypeElementModifiers_0_0, 
        		"annotationTypeElementModifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationTypeElementDeclarationAccess().getUnannTypeUnannTypeParserRuleCall_1_0()); 
	    }
		lv_unannType_1_0=ruleunannType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationTypeElementDeclarationRule());
	        }
       		set(
       			$current, 
       			"unannType",
        		lv_unannType_1_0, 
        		"unannType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_2_0=RULE_IDENTIFIER
		{
			newLeafNode(lv_name_2_0, grammarAccess.getAnnotationTypeElementDeclarationAccess().getNameIdentifierTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAnnotationTypeElementDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"Identifier");
	    }

)
)	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAnnotationTypeElementDeclarationAccess().getLeftParenthesisKeyword_3());
    }
	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAnnotationTypeElementDeclarationAccess().getRightParenthesisKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationTypeElementDeclarationAccess().getDimsDimsParserRuleCall_5_0()); 
	    }
		lv_dims_5_0=ruledims		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationTypeElementDeclarationRule());
	        }
       		set(
       			$current, 
       			"dims",
        		lv_dims_5_0, 
        		"dims");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationTypeElementDeclarationAccess().getDefaultValueDefaultValueParserRuleCall_6_0()); 
	    }
		lv_defaultValue_6_0=ruledefaultValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationTypeElementDeclarationRule());
	        }
       		set(
       			$current, 
       			"defaultValue",
        		lv_defaultValue_6_0, 
        		"defaultValue");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_7=';' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getAnnotationTypeElementDeclarationAccess().getSemicolonKeyword_7());
    }
)
;





// Entry rule entryRuleannotationTypeElementModifier
entryRuleannotationTypeElementModifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnnotationTypeElementModifierRule()); }
	 iv_ruleannotationTypeElementModifier=ruleannotationTypeElementModifier 
	 { $current=$iv_ruleannotationTypeElementModifier.current; } 
	 EOF 
;

// Rule annotationTypeElementModifier
ruleannotationTypeElementModifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAnnotationTypeElementModifierAccess().getAnnotationParserRuleCall_0()); 
    }
    this_annotation_0=ruleannotation
    { 
        $current = $this_annotation_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAnnotationTypeElementModifierAccess().getJavaAnnotationTypeElementModifiersParserRuleCall_1()); 
    }
    this_JavaAnnotationTypeElementModifiers_1=ruleJavaAnnotationTypeElementModifiers
    { 
        $current = $this_JavaAnnotationTypeElementModifiers_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleJavaAnnotationTypeElementModifiers
entryRuleJavaAnnotationTypeElementModifiers returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJavaAnnotationTypeElementModifiersRule()); }
	 iv_ruleJavaAnnotationTypeElementModifiers=ruleJavaAnnotationTypeElementModifiers 
	 { $current=$iv_ruleJavaAnnotationTypeElementModifiers.current; } 
	 EOF 
;

// Rule JavaAnnotationTypeElementModifiers
ruleJavaAnnotationTypeElementModifiers returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getJavaAnnotationTypeElementModifiersAccess().getModifierAnnotationTypeElementModifiersEnumRuleCall_0()); 
	    }
		lv_modifier_0_0=ruleAnnotationTypeElementModifiers		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJavaAnnotationTypeElementModifiersRule());
	        }
       		set(
       			$current, 
       			"modifier",
        		lv_modifier_0_0, 
        		"AnnotationTypeElementModifiers");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuledefaultValue
entryRuledefaultValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefaultValueRule()); }
	 iv_ruledefaultValue=ruledefaultValue 
	 { $current=$iv_ruledefaultValue.current; } 
	 EOF 
;

// Rule defaultValue
ruledefaultValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='default' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDefaultValueAccess().getDefaultKeyword_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getDefaultValueAccess().getElementValueParserRuleCall_1()); 
    }
    this_elementValue_1=ruleelementValue
    { 
        $current = $this_elementValue_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleannotation
entryRuleannotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnnotationRule()); }
	 iv_ruleannotation=ruleannotation 
	 { $current=$iv_ruleannotation.current; } 
	 EOF 
;

// Rule annotation
ruleannotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAnnotationAccess().getNormalAnnotationParserRuleCall_0()); 
    }
    this_normalAnnotation_0=rulenormalAnnotation
    { 
        $current = $this_normalAnnotation_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAnnotationAccess().getMarkerAnnotationParserRuleCall_1()); 
    }
    this_markerAnnotation_1=rulemarkerAnnotation
    { 
        $current = $this_markerAnnotation_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAnnotationAccess().getSingleElementAnnotationParserRuleCall_2()); 
    }
    this_singleElementAnnotation_2=rulesingleElementAnnotation
    { 
        $current = $this_singleElementAnnotation_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulenormalAnnotation
entryRulenormalAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNormalAnnotationRule()); }
	 iv_rulenormalAnnotation=rulenormalAnnotation 
	 { $current=$iv_rulenormalAnnotation.current; } 
	 EOF 
;

// Rule normalAnnotation
rulenormalAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNormalAnnotationAccess().getCommercialAtKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNormalAnnotationAccess().getTypeNameTypeNameParserRuleCall_1_0()); 
	    }
		lv_typeName_1_0=ruletypeName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNormalAnnotationRule());
	        }
       		set(
       			$current, 
       			"typeName",
        		lv_typeName_1_0, 
        		"typeName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNormalAnnotationAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNormalAnnotationAccess().getElementValuePairListElementValuePairListParserRuleCall_3_0()); 
	    }
		lv_elementValuePairList_3_0=ruleelementValuePairList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNormalAnnotationRule());
	        }
       		set(
       			$current, 
       			"elementValuePairList",
        		lv_elementValuePairList_3_0, 
        		"elementValuePairList");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getNormalAnnotationAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleelementValuePairList
entryRuleelementValuePairList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElementValuePairListRule()); }
	 iv_ruleelementValuePairList=ruleelementValuePairList 
	 { $current=$iv_ruleelementValuePairList.current; } 
	 EOF 
;

// Rule elementValuePairList
ruleelementValuePairList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getElementValuePairListAccess().getElementValuePairsElementValuePairParserRuleCall_0_0()); 
	    }
		lv_elementValuePairs_0_0=ruleelementValuePair		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElementValuePairListRule());
	        }
       		add(
       			$current, 
       			"elementValuePairs",
        		lv_elementValuePairs_0_0, 
        		"elementValuePair");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getElementValuePairListAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getElementValuePairListAccess().getElementValuePairsElementValuePairParserRuleCall_1_1_0()); 
	    }
		lv_elementValuePairs_2_0=ruleelementValuePair		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElementValuePairListRule());
	        }
       		add(
       			$current, 
       			"elementValuePairs",
        		lv_elementValuePairs_2_0, 
        		"elementValuePair");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleelementValuePair
entryRuleelementValuePair returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElementValuePairRule()); }
	 iv_ruleelementValuePair=ruleelementValuePair 
	 { $current=$iv_ruleelementValuePair.current; } 
	 EOF 
;

// Rule elementValuePair
ruleelementValuePair returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_IDENTIFIER
		{
			newLeafNode(lv_name_0_0, grammarAccess.getElementValuePairAccess().getNameIdentifierTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getElementValuePairRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"Identifier");
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getElementValuePairAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getElementValuePairAccess().getElementValueElementValueParserRuleCall_2_0()); 
	    }
		lv_elementValue_2_0=ruleelementValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElementValuePairRule());
	        }
       		set(
       			$current, 
       			"elementValue",
        		lv_elementValue_2_0, 
        		"elementValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleelementValue
entryRuleelementValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElementValueRule()); }
	 iv_ruleelementValue=ruleelementValue 
	 { $current=$iv_ruleelementValue.current; } 
	 EOF 
;

// Rule elementValue
ruleelementValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getElementValueAccess().getConditionalExpressionParserRuleCall_0()); 
    }
    this_conditionalExpression_0=ruleconditionalExpression
    { 
        $current = $this_conditionalExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getElementValueAccess().getElementValueArrayInitializerParserRuleCall_1()); 
    }
    this_elementValueArrayInitializer_1=ruleelementValueArrayInitializer
    { 
        $current = $this_elementValueArrayInitializer_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getElementValueAccess().getAnnotationParserRuleCall_2()); 
    }
    this_annotation_2=ruleannotation
    { 
        $current = $this_annotation_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleelementValueArrayInitializer
entryRuleelementValueArrayInitializer returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElementValueArrayInitializerRule()); }
	 iv_ruleelementValueArrayInitializer=ruleelementValueArrayInitializer 
	 { $current=$iv_ruleelementValueArrayInitializer.current; } 
	 EOF 
;

// Rule elementValueArrayInitializer
ruleelementValueArrayInitializer returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getElementValueArrayInitializerAccess().getElementValueArrayInitializerAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getElementValueArrayInitializerAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getElementValueArrayInitializerAccess().getElementValueListElementValueListParserRuleCall_2_0()); 
	    }
		lv_elementValueList_2_0=ruleelementValueList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElementValueArrayInitializerRule());
	        }
       		set(
       			$current, 
       			"elementValueList",
        		lv_elementValueList_2_0, 
        		"elementValueList");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getElementValueArrayInitializerAccess().getCommaKeyword_3());
    }
)?	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getElementValueArrayInitializerAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleelementValueList
entryRuleelementValueList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElementValueListRule()); }
	 iv_ruleelementValueList=ruleelementValueList 
	 { $current=$iv_ruleelementValueList.current; } 
	 EOF 
;

// Rule elementValueList
ruleelementValueList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getElementValueListAccess().getElementValuesElementValueParserRuleCall_0_0()); 
	    }
		lv_elementValues_0_0=ruleelementValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElementValueListRule());
	        }
       		add(
       			$current, 
       			"elementValues",
        		lv_elementValues_0_0, 
        		"elementValue");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getElementValueListAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getElementValueListAccess().getElementValuesElementValueParserRuleCall_1_1_0()); 
	    }
		lv_elementValues_2_0=ruleelementValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElementValueListRule());
	        }
       		add(
       			$current, 
       			"elementValues",
        		lv_elementValues_2_0, 
        		"elementValue");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulemarkerAnnotation
entryRulemarkerAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMarkerAnnotationRule()); }
	 iv_rulemarkerAnnotation=rulemarkerAnnotation 
	 { $current=$iv_rulemarkerAnnotation.current; } 
	 EOF 
;

// Rule markerAnnotation
rulemarkerAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMarkerAnnotationAccess().getCommercialAtKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMarkerAnnotationAccess().getTypeNameTypeNameParserRuleCall_1_0()); 
	    }
		lv_typeName_1_0=ruletypeName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMarkerAnnotationRule());
	        }
       		set(
       			$current, 
       			"typeName",
        		lv_typeName_1_0, 
        		"typeName");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulesingleElementAnnotation
entryRulesingleElementAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSingleElementAnnotationRule()); }
	 iv_rulesingleElementAnnotation=rulesingleElementAnnotation 
	 { $current=$iv_rulesingleElementAnnotation.current; } 
	 EOF 
;

// Rule singleElementAnnotation
rulesingleElementAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSingleElementAnnotationAccess().getCommercialAtKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSingleElementAnnotationAccess().getTypeNameTypeNameParserRuleCall_1_0()); 
	    }
		lv_typeName_1_0=ruletypeName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSingleElementAnnotationRule());
	        }
       		set(
       			$current, 
       			"typeName",
        		lv_typeName_1_0, 
        		"typeName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSingleElementAnnotationAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSingleElementAnnotationAccess().getElementValueElementValueParserRuleCall_3_0()); 
	    }
		lv_elementValue_3_0=ruleelementValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSingleElementAnnotationRule());
	        }
       		set(
       			$current, 
       			"elementValue",
        		lv_elementValue_3_0, 
        		"elementValue");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSingleElementAnnotationAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRulearrayInitializer
entryRulearrayInitializer returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayInitializerRule()); }
	 iv_rulearrayInitializer=rulearrayInitializer 
	 { $current=$iv_rulearrayInitializer.current; } 
	 EOF 
;

// Rule arrayInitializer
rulearrayInitializer returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getArrayInitializerAccess().getArrayInitializerAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getArrayInitializerAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayInitializerAccess().getVariableInitializerListVariableInitializerListParserRuleCall_2_0()); 
	    }
		lv_variableInitializerList_2_0=rulevariableInitializerList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayInitializerRule());
	        }
       		set(
       			$current, 
       			"variableInitializerList",
        		lv_variableInitializerList_2_0, 
        		"variableInitializerList");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getArrayInitializerAccess().getCommaKeyword_3());
    }
)?	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getArrayInitializerAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRulevariableInitializerList
entryRulevariableInitializerList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableInitializerListRule()); }
	 iv_rulevariableInitializerList=rulevariableInitializerList 
	 { $current=$iv_rulevariableInitializerList.current; } 
	 EOF 
;

// Rule variableInitializerList
rulevariableInitializerList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getVariableInitializerListAccess().getVariableInitializerVariableInitializerParserRuleCall_0_0()); 
	    }
		lv_variableInitializer_0_0=rulevariableInitializer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableInitializerListRule());
	        }
       		add(
       			$current, 
       			"variableInitializer",
        		lv_variableInitializer_0_0, 
        		"variableInitializer");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVariableInitializerListAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableInitializerListAccess().getVariableInitializerVariableInitializerParserRuleCall_1_1_0()); 
	    }
		lv_variableInitializer_2_0=rulevariableInitializer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableInitializerListRule());
	        }
       		add(
       			$current, 
       			"variableInitializer",
        		lv_variableInitializer_2_0, 
        		"variableInitializer");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleblock
entryRuleblock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	 iv_ruleblock=ruleblock 
	 { $current=$iv_ruleblock.current; } 
	 EOF 
;

// Rule block
ruleblock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_dummy_0_0=	'block' 
    {
        newLeafNode(lv_dummy_0_0, grammarAccess.getBlockAccess().getDummyBlockKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBlockRule());
	        }
       		setWithLastConsumed($current, "dummy", lv_dummy_0_0, "block");
	    }

)
)
;







// Entry rule entryRuleargumentList
entryRuleargumentList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArgumentListRule()); }
	 iv_ruleargumentList=ruleargumentList 
	 { $current=$iv_ruleargumentList.current; } 
	 EOF 
;

// Rule argumentList
ruleargumentList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_dummy_0_0=	'argumentList' 
    {
        newLeafNode(lv_dummy_0_0, grammarAccess.getArgumentListAccess().getDummyArgumentListKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArgumentListRule());
	        }
       		setWithLastConsumed($current, "dummy", lv_dummy_0_0, "argumentList");
	    }

)
)
;







// Entry rule entryRuleexpression
entryRuleexpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleexpression=ruleexpression 
	 { $current=$iv_ruleexpression.current; } 
	 EOF 
;

// Rule expression
ruleexpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_dummy_0_0=	'expression' 
    {
        newLeafNode(lv_dummy_0_0, grammarAccess.getExpressionAccess().getDummyExpressionKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionRule());
	        }
       		setWithLastConsumed($current, "dummy", lv_dummy_0_0, "expression");
	    }

)
)
;





// Entry rule entryRuleconditionalExpression
entryRuleconditionalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionalExpressionRule()); }
	 iv_ruleconditionalExpression=ruleconditionalExpression 
	 { $current=$iv_ruleconditionalExpression.current; } 
	 EOF 
;

// Rule conditionalExpression
ruleconditionalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_dummy_0_0=	'conditionalExpression' 
    {
        newLeafNode(lv_dummy_0_0, grammarAccess.getConditionalExpressionAccess().getDummyConditionalExpressionKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConditionalExpressionRule());
	        }
       		setWithLastConsumed($current, "dummy", lv_dummy_0_0, "conditionalExpression");
	    }

)
)
;







// Entry rule entryRuleliteral
entryRuleliteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	 iv_ruleliteral=ruleliteral 
	 { $current=$iv_ruleliteral.current; } 
	 EOF 
;

// Rule literal
ruleliteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getIntegerLiteralParserRuleCall_0()); 
    }
    this_IntegerLiteral_0=ruleIntegerLiteral
    { 
        $current = $this_IntegerLiteral_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getFloatingPointLiteralParserRuleCall_1()); 
    }
    this_FloatingPointLiteral_1=ruleFloatingPointLiteral
    { 
        $current = $this_FloatingPointLiteral_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_2()); 
    }
    this_BooleanLiteral_2=ruleBooleanLiteral
    { 
        $current = $this_BooleanLiteral_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getCharacterLiteralParserRuleCall_3()); 
    }
    this_CharacterLiteral_3=ruleCharacterLiteral
    { 
        $current = $this_CharacterLiteral_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_4()); 
    }
    this_StringLiteral_4=ruleStringLiteral
    { 
        $current = $this_StringLiteral_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getNullLiteralParserRuleCall_5()); 
    }
    this_NullLiteral_5=ruleNullLiteral
    { 
        $current = $this_NullLiteral_5.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleIntegerLiteral
entryRuleIntegerLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntegerLiteralRule()); }
	 iv_ruleIntegerLiteral=ruleIntegerLiteral 
	 { $current=$iv_ruleIntegerLiteral.current; } 
	 EOF 
;

// Rule IntegerLiteral
ruleIntegerLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		lv_value_0_1=RULE_DECIMALINTEGERLITERAL
		{
			newLeafNode(lv_value_0_1, grammarAccess.getIntegerLiteralAccess().getValueDecimalIntegerLiteralTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntegerLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_1, 
        		"DecimalIntegerLiteral");
	    }

    |		lv_value_0_2=RULE_HEXINTEGERLITERAL
		{
			newLeafNode(lv_value_0_2, grammarAccess.getIntegerLiteralAccess().getValueHexIntegerLiteralTerminalRuleCall_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntegerLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_2, 
        		"HexIntegerLiteral");
	    }

    |		lv_value_0_3=RULE_OCTALINTEGERLITERAL
		{
			newLeafNode(lv_value_0_3, grammarAccess.getIntegerLiteralAccess().getValueOctalIntegerLiteralTerminalRuleCall_0_2()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntegerLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_3, 
        		"OctalIntegerLiteral");
	    }

    |		lv_value_0_4=RULE_BINARYINTEGERLITERAL
		{
			newLeafNode(lv_value_0_4, grammarAccess.getIntegerLiteralAccess().getValueBinaryIntegerLiteralTerminalRuleCall_0_3()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntegerLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_4, 
        		"BinaryIntegerLiteral");
	    }

)

)
)
;





// Entry rule entryRuleFloatingPointLiteral
entryRuleFloatingPointLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFloatingPointLiteralRule()); }
	 iv_ruleFloatingPointLiteral=ruleFloatingPointLiteral 
	 { $current=$iv_ruleFloatingPointLiteral.current; } 
	 EOF 
;

// Rule FloatingPointLiteral
ruleFloatingPointLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		lv_value_0_1=RULE_DECIMALFLOATINGPOINTLITERAL
		{
			newLeafNode(lv_value_0_1, grammarAccess.getFloatingPointLiteralAccess().getValueDecimalFloatingPointLiteralTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFloatingPointLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_1, 
        		"DecimalFloatingPointLiteral");
	    }

    |		lv_value_0_2=RULE_HEXADECIMALFLOATINGPOINTLITERAL
		{
			newLeafNode(lv_value_0_2, grammarAccess.getFloatingPointLiteralAccess().getValueHexadecimalFloatingPointLiteralTerminalRuleCall_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFloatingPointLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_2, 
        		"HexadecimalFloatingPointLiteral");
	    }

)

)
)
;





// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanLiteralRule()); }
	 iv_ruleBooleanLiteral=ruleBooleanLiteral 
	 { $current=$iv_ruleBooleanLiteral.current; } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		lv_value_0_1=RULE_TRUE
		{
			newLeafNode(lv_value_0_1, grammarAccess.getBooleanLiteralAccess().getValueTRUETerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_1, 
        		"TRUE");
	    }

    |		lv_value_0_2=RULE_FALSE
		{
			newLeafNode(lv_value_0_2, grammarAccess.getBooleanLiteralAccess().getValueFALSETerminalRuleCall_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_2, 
        		"FALSE");
	    }

)

)
)
;





// Entry rule entryRuleCharacterLiteral
entryRuleCharacterLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCharacterLiteralRule()); }
	 iv_ruleCharacterLiteral=ruleCharacterLiteral 
	 { $current=$iv_ruleCharacterLiteral.current; } 
	 EOF 
;

// Rule CharacterLiteral
ruleCharacterLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_CHARACTER
		{
			newLeafNode(lv_value_0_0, grammarAccess.getCharacterLiteralAccess().getValueCHARACTERTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCharacterLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"CHARACTER");
	    }

)
)
;





// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringLiteralRule()); }
	 iv_ruleStringLiteral=ruleStringLiteral 
	 { $current=$iv_ruleStringLiteral.current; } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_STRING
		{
			newLeafNode(lv_value_0_0, grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"STRING");
	    }

)
)
;





// Entry rule entryRuleNullLiteral
entryRuleNullLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNullLiteralRule()); }
	 iv_ruleNullLiteral=ruleNullLiteral 
	 { $current=$iv_ruleNullLiteral.current; } 
	 EOF 
;

// Rule NullLiteral
ruleNullLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_NULL
		{
			newLeafNode(lv_value_0_0, grammarAccess.getNullLiteralAccess().getValueNULLTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNullLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"NULL");
	    }

)
)
;





// Rule ClassModifiers
ruleClassModifiers returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='public' 
	{
        $current = grammarAccess.getClassModifiersAccess().getPUBLICEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getClassModifiersAccess().getPUBLICEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='protected' 
	{
        $current = grammarAccess.getClassModifiersAccess().getPROTECTEDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getClassModifiersAccess().getPROTECTEDEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='private' 
	{
        $current = grammarAccess.getClassModifiersAccess().getPRIVATEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getClassModifiersAccess().getPRIVATEEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='abstract' 
	{
        $current = grammarAccess.getClassModifiersAccess().getABSTRACTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getClassModifiersAccess().getABSTRACTEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='static' 
	{
        $current = grammarAccess.getClassModifiersAccess().getSTATICEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getClassModifiersAccess().getSTATICEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='final' 
	{
        $current = grammarAccess.getClassModifiersAccess().getFINALEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getClassModifiersAccess().getFINALEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='strictfp' 
	{
        $current = grammarAccess.getClassModifiersAccess().getSTRICTFPEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getClassModifiersAccess().getSTRICTFPEnumLiteralDeclaration_6()); 
    }
));



// Rule FieldModifiers
ruleFieldModifiers returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='public' 
	{
        $current = grammarAccess.getFieldModifiersAccess().getPUBLICEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getFieldModifiersAccess().getPUBLICEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='protected' 
	{
        $current = grammarAccess.getFieldModifiersAccess().getPROTECTEDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getFieldModifiersAccess().getPROTECTEDEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='private' 
	{
        $current = grammarAccess.getFieldModifiersAccess().getPRIVATEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getFieldModifiersAccess().getPRIVATEEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='static' 
	{
        $current = grammarAccess.getFieldModifiersAccess().getSTATICEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getFieldModifiersAccess().getSTATICEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='final' 
	{
        $current = grammarAccess.getFieldModifiersAccess().getFINALEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getFieldModifiersAccess().getFINALEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='transient' 
	{
        $current = grammarAccess.getFieldModifiersAccess().getTRANSIENTEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getFieldModifiersAccess().getTRANSIENTEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='volatile' 
	{
        $current = grammarAccess.getFieldModifiersAccess().getVOLATILEEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getFieldModifiersAccess().getVOLATILEEnumLiteralDeclaration_6()); 
    }
));



// Rule methodModifiers
rulemethodModifiers returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='public' 
	{
        $current = grammarAccess.getMethodModifiersAccess().getPUBLICEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getMethodModifiersAccess().getPUBLICEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='protected' 
	{
        $current = grammarAccess.getMethodModifiersAccess().getPROTECTEDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getMethodModifiersAccess().getPROTECTEDEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='private' 
	{
        $current = grammarAccess.getMethodModifiersAccess().getPRIVATEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getMethodModifiersAccess().getPRIVATEEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='abstract' 
	{
        $current = grammarAccess.getMethodModifiersAccess().getABSTRACTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getMethodModifiersAccess().getABSTRACTEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='static' 
	{
        $current = grammarAccess.getMethodModifiersAccess().getSTATICEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getMethodModifiersAccess().getSTATICEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='final' 
	{
        $current = grammarAccess.getMethodModifiersAccess().getFINALEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getMethodModifiersAccess().getFINALEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='synchronized' 
	{
        $current = grammarAccess.getMethodModifiersAccess().getSYNCHRONIZEDEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getMethodModifiersAccess().getSYNCHRONIZEDEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='native' 
	{
        $current = grammarAccess.getMethodModifiersAccess().getNATIVEEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getMethodModifiersAccess().getNATIVEEnumLiteralDeclaration_7()); 
    }
)
    |(	enumLiteral_8='strictfp' 
	{
        $current = grammarAccess.getMethodModifiersAccess().getSTRICTFPEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_8, grammarAccess.getMethodModifiersAccess().getSTRICTFPEnumLiteralDeclaration_8()); 
    }
));



// Rule VariableModifiers
ruleVariableModifiers returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='final' 
	{
        $current = grammarAccess.getVariableModifiersAccess().getPUBLICEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getVariableModifiersAccess().getPUBLICEnumLiteralDeclaration()); 
    }
);



// Rule ConstructorModifiers
ruleConstructorModifiers returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='public' 
	{
        $current = grammarAccess.getConstructorModifiersAccess().getPUBLICEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getConstructorModifiersAccess().getPUBLICEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='protected' 
	{
        $current = grammarAccess.getConstructorModifiersAccess().getPROTECTEDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getConstructorModifiersAccess().getPROTECTEDEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='private' 
	{
        $current = grammarAccess.getConstructorModifiersAccess().getPRIVATEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getConstructorModifiersAccess().getPRIVATEEnumLiteralDeclaration_2()); 
    }
));



// Rule InterfaceModifiers
ruleInterfaceModifiers returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='public' 
	{
        $current = grammarAccess.getInterfaceModifiersAccess().getPUBLICEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getInterfaceModifiersAccess().getPUBLICEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='protected' 
	{
        $current = grammarAccess.getInterfaceModifiersAccess().getPROTECTEDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getInterfaceModifiersAccess().getPROTECTEDEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='private' 
	{
        $current = grammarAccess.getInterfaceModifiersAccess().getPRIVATEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getInterfaceModifiersAccess().getPRIVATEEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='abstract' 
	{
        $current = grammarAccess.getInterfaceModifiersAccess().getABSTRACTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getInterfaceModifiersAccess().getABSTRACTEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='static' 
	{
        $current = grammarAccess.getInterfaceModifiersAccess().getSTATICEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getInterfaceModifiersAccess().getSTATICEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='strictfp' 
	{
        $current = grammarAccess.getInterfaceModifiersAccess().getSTRICTFPEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getInterfaceModifiersAccess().getSTRICTFPEnumLiteralDeclaration_5()); 
    }
));



// Rule ConstantModifiers
ruleConstantModifiers returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='public' 
	{
        $current = grammarAccess.getConstantModifiersAccess().getPUBLICEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getConstantModifiersAccess().getPUBLICEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='static' 
	{
        $current = grammarAccess.getConstantModifiersAccess().getSTATICEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getConstantModifiersAccess().getSTATICEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='final' 
	{
        $current = grammarAccess.getConstantModifiersAccess().getFINALEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getConstantModifiersAccess().getFINALEnumLiteralDeclaration_2()); 
    }
));



// Rule InterfaceMethodModifiers
ruleInterfaceMethodModifiers returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='public' 
	{
        $current = grammarAccess.getInterfaceMethodModifiersAccess().getPUBLICEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getInterfaceMethodModifiersAccess().getPUBLICEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='abstract' 
	{
        $current = grammarAccess.getInterfaceMethodModifiersAccess().getABSTRACTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getInterfaceMethodModifiersAccess().getABSTRACTEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='default' 
	{
        $current = grammarAccess.getInterfaceMethodModifiersAccess().getDEFAULTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getInterfaceMethodModifiersAccess().getDEFAULTEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='static' 
	{
        $current = grammarAccess.getInterfaceMethodModifiersAccess().getSTATICEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getInterfaceMethodModifiersAccess().getSTATICEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='strictfp' 
	{
        $current = grammarAccess.getInterfaceMethodModifiersAccess().getSTRICTFPEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getInterfaceMethodModifiersAccess().getSTRICTFPEnumLiteralDeclaration_4()); 
    }
));



// Rule AnnotationTypeElementModifiers
ruleAnnotationTypeElementModifiers returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='public' 
	{
        $current = grammarAccess.getAnnotationTypeElementModifiersAccess().getPUBLICEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getAnnotationTypeElementModifiersAccess().getPUBLICEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='abstract' 
	{
        $current = grammarAccess.getAnnotationTypeElementModifiersAccess().getSTATICEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getAnnotationTypeElementModifiersAccess().getSTATICEnumLiteralDeclaration_1()); 
    }
));



RULE_BOOLEANTYPE : 'boolean';

RULE_NUMERICTYPE : (RULE_INTEGRALTYPE|RULE_FLOATINGPOINTTYPE);

RULE_INTEGRALTYPE : ('byte'|'short'|'int'|'long'|'char');

RULE_FLOATINGPOINTTYPE : ('float'|'double');

RULE_DECIMALINTEGERLITERAL : RULE_DECIMALNUMERAL RULE_INTEGERTYPESUFFIX?;

RULE_HEXINTEGERLITERAL : RULE_HEXNUMERAL RULE_INTEGERTYPESUFFIX?;

RULE_OCTALINTEGERLITERAL : RULE_OCTALNUMERAL RULE_INTEGERTYPESUFFIX?;

RULE_BINARYINTEGERLITERAL : RULE_BINARYNUMERAL RULE_INTEGERTYPESUFFIX?;

fragment RULE_INTEGERTYPESUFFIX : ('l'|'L');

fragment RULE_DECIMALNUMERAL : ('0'|RULE_NONZERODIGIT RULE_DIGITS?|RULE_NONZERODIGIT RULE_UNDERSCORES RULE_DIGITS);

fragment RULE_NONZERODIGIT : '1'..'9';

fragment RULE_DIGITS : (RULE_DIGIT|RULE_DIGIT RULE_DIGITSANDUNDERSCORES? RULE_DIGIT);

fragment RULE_DIGIT : ('0'|RULE_NONZERODIGIT);

fragment RULE_DIGITSANDUNDERSCORES : RULE_DIGITORUNDERSCORE RULE_DIGITORUNDERSCORE*;

fragment RULE_DIGITORUNDERSCORE : (RULE_DIGIT|'_');

fragment RULE_UNDERSCORES : '_'+;

fragment RULE_HEXNUMERAL : '0' ('x'|'X') RULE_HEXDIGITS;

fragment RULE_HEXDIGITS : (RULE_HEXDIGIT|RULE_HEXDIGIT RULE_HEXDIGITSANDUNDERSCORES? RULE_HEXDIGIT);

fragment RULE_HEXDIGIT : ('0'..'9'|'a'..'f'|'A'..'F');

fragment RULE_HEXDIGITSANDUNDERSCORES : RULE_HEXDIGITORUNDERSCORE RULE_HEXDIGITORUNDERSCORE*;

fragment RULE_HEXDIGITORUNDERSCORE : (RULE_HEXDIGIT|'_');

fragment RULE_OCTALNUMERAL : ('0' RULE_OCTALDIGITS|'0' RULE_UNDERSCORES RULE_OCTALDIGITS);

fragment RULE_OCTALDIGITS : (RULE_OCTALDIGIT|RULE_OCTALDIGIT RULE_OCTALDIGITSANDUNDERSCORES? RULE_OCTALDIGIT);

fragment RULE_OCTALDIGIT : '0'..'7';

fragment RULE_OCTALDIGITSANDUNDERSCORES : RULE_OCTALDIGITORUNDERSCORE RULE_OCTALDIGITORUNDERSCORE*;

fragment RULE_OCTALDIGITORUNDERSCORE : (RULE_OCTALDIGIT|'_');

fragment RULE_BINARYNUMERAL : '0' ('b'|'B') RULE_BINARYDIGITS;

fragment RULE_BINARYDIGITS : (RULE_BINARYDIGIT|RULE_BINARYDIGIT RULE_BINARYDIGITSANDUNDERSCORES? RULE_BINARYDIGIT);

fragment RULE_BINARYDIGIT : ('0'|'1');

fragment RULE_BINARYDIGITSANDUNDERSCORES : RULE_BINARYDIGITORUNDERSCORE RULE_BINARYDIGITORUNDERSCORE*;

fragment RULE_BINARYDIGITORUNDERSCORE : (RULE_BINARYDIGIT|'_');

RULE_DECIMALFLOATINGPOINTLITERAL : (RULE_DIGITS '.' RULE_DIGITS? RULE_EXPONENTPART? RULE_FLOATTYPESUFFIX?|'.' RULE_DIGITS RULE_EXPONENTPART? RULE_FLOATTYPESUFFIX?|RULE_DIGITS RULE_EXPONENTPART RULE_FLOATTYPESUFFIX?|RULE_DIGITS RULE_FLOATTYPESUFFIX);

fragment RULE_EXPONENTPART : RULE_EXPONENTINDICATOR RULE_SIGNEDINTEGER;

fragment RULE_EXPONENTINDICATOR : ('e'|'E');

fragment RULE_SIGNEDINTEGER : RULE_SIGN? RULE_DIGITS;

fragment RULE_SIGN : ('+'|'-');

fragment RULE_FLOATTYPESUFFIX : ('f'|'F'|'d'|'D');

RULE_HEXADECIMALFLOATINGPOINTLITERAL : RULE_HEXSIGNIFICAND RULE_BINARYEXPONENT RULE_FLOATTYPESUFFIX?;

fragment RULE_HEXSIGNIFICAND : (RULE_HEXNUMERAL '.'?|'0' ('x'|'X') RULE_HEXDIGIT* '.' RULE_HEXDIGIT+);

fragment RULE_BINARYEXPONENT : RULE_BINARYEXPONENTINDICATOR RULE_SIGNEDINTEGER;

fragment RULE_BINARYEXPONENTINDICATOR : ('p'|'P');

RULE_TRUE : 'true';

RULE_FALSE : 'false';

RULE_CHARACTER : '\'' (RULE_ESCAPESEQUENCE|~(('\''|'\\'))) '\'';

RULE_STRING : '"' (RULE_ESCAPESEQUENCE|~(('\\'|'"')))* '"';

fragment RULE_ESCAPESEQUENCE : ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|RULE_UNICODEESCAPE|RULE_OCTALESCAPE);

fragment RULE_OCTALESCAPE : ('\\' RULE_ZEROTOTHREE RULE_OCTALDIGIT RULE_OCTALDIGIT|'\\' RULE_OCTALDIGIT RULE_OCTALDIGIT|'\\' RULE_OCTALDIGIT);

fragment RULE_ZEROTOTHREE : '0'..'3';

fragment RULE_UNICODEESCAPE : '\\' RULE_UNICODEMARKER RULE_HEXDIGIT RULE_HEXDIGIT RULE_HEXDIGIT RULE_HEXDIGIT;

fragment RULE_UNICODEMARKER : 'u' 'u'*;

RULE_NULL : 'null';

RULE_IDENTIFIER : RULE_JAVALETTER RULE_JAVALETTERORDIGIT*;

fragment RULE_JAVALETTER : ('$'|'A'..'Z'|'_'|'a'..'z'|'\u00A2'..'\u00A5'|'\u00AA'|'\u00B5'|'\u00BA'|'\u00C0'..'\u00D6'|'\u00D8'..'\u00F6'|'\u00F8'..'\u0236'|'\u0250'..'\u02C1'|'\u02C6'..'\u02D1'|'\u02E0'..'\u02E4'|'\u02EE'|'\u037A'|'\u0386'|'\u0388'..'\u038A'|'\u038C'|'\u038E'..'\u03A1'|'\u03A3'..'\u03CE'|'\u03D0'..'\u03F5'|'\u03F7'..'\u03FB'|'\u0400'..'\u0481'|'\u048A'..'\u04CE'|'\u04D0'..'\u04F5'|'\u04F8'..'\u04F9'|'\u0500'..'\u050F'|'\u0531'..'\u0556'|'\u0559'|'\u0561'..'\u0587'|'\u05D0'..'\u05EA'|'\u05F0'..'\u05F2'|'\u0621'..'\u063A'|'\u0640'..'\u064A'|'\u066E'..'\u066F'|'\u0671'..'\u06D3'|'\u06D5'|'\u06E5'..'\u06E6'|'\u06EE'..'\u06EF'|'\u06FA'..'\u06FC'|'\u06FF'|'\u0710'|'\u0712'..'\u072F'|'\u074D'..'\u074F'|'\u0780'..'\u07A5'|'\u07B1'|'\u0904'..'\u0939'|'\u093D'|'\u0950'|'\u0958'..'\u0961'|'\u0985'..'\u098C'|'\u098F'..'\u0990'|'\u0993'..'\u09A8'|'\u09AA'..'\u09B0'|'\u09B2'|'\u09B6'..'\u09B9'|'\u09BD'|'\u09DC'..'\u09DD'|'\u09DF'..'\u09E1'|'\u09F0'..'\u09F3'|'\u0A05'..'\u0A0A'|'\u0A0F'..'\u0A10'|'\u0A13'..'\u0A28'|'\u0A2A'..'\u0A30'|'\u0A32'..'\u0A33'|'\u0A35'..'\u0A36'|'\u0A38'..'\u0A39'|'\u0A59'..'\u0A5C'|'\u0A5E'|'\u0A72'..'\u0A74'|'\u0A85'..'\u0A8D'|'\u0A8F'..'\u0A91'|'\u0A93'..'\u0AA8'|'\u0AAA'..'\u0AB0'|'\u0AB2'..'\u0AB3'|'\u0AB5'..'\u0AB9'|'\u0ABD'|'\u0AD0'|'\u0AE0'..'\u0AE1'|'\u0AF1'|'\u0B05'..'\u0B0C'|'\u0B0F'..'\u0B10'|'\u0B13'..'\u0B28'|'\u0B2A'..'\u0B30'|'\u0B32'..'\u0B33'|'\u0B35'..'\u0B39'|'\u0B3D'|'\u0B5C'..'\u0B5D'|'\u0B5F'..'\u0B61'|'\u0B71'|'\u0B83'|'\u0B85'..'\u0B8A'|'\u0B8E'..'\u0B90'|'\u0B92'..'\u0B95'|'\u0B99'..'\u0B9A'|'\u0B9C'|'\u0B9E'..'\u0B9F'|'\u0BA3'..'\u0BA4'|'\u0BA8'..'\u0BAA'|'\u0BAE'..'\u0BB5'|'\u0BB7'..'\u0BB9'|'\u0BF9'|'\u0C05'..'\u0C0C'|'\u0C0E'..'\u0C10'|'\u0C12'..'\u0C28'|'\u0C2A'..'\u0C33'|'\u0C35'..'\u0C39'|'\u0C60'..'\u0C61'|'\u0C85'..'\u0C8C'|'\u0C8E'..'\u0C90'|'\u0C92'..'\u0CA8'|'\u0CAA'..'\u0CB3'|'\u0CB5'..'\u0CB9'|'\u0CBD'|'\u0CDE'|'\u0CE0'..'\u0CE1'|'\u0D05'..'\u0D0C'|'\u0D0E'..'\u0D10'|'\u0D12'..'\u0D28'|'\u0D2A'..'\u0D39'|'\u0D60'..'\u0D61'|'\u0D85'..'\u0D96'|'\u0D9A'..'\u0DB1'|'\u0DB3'..'\u0DBB'|'\u0DBD'|'\u0DC0'..'\u0DC6'|'\u0E01'..'\u0E30'|'\u0E32'..'\u0E33'|'\u0E3F'..'\u0E46'|'\u0E81'..'\u0E82'|'\u0E84'|'\u0E87'..'\u0E88'|'\u0E8A'|'\u0E8D'|'\u0E94'..'\u0E97'|'\u0E99'..'\u0E9F'|'\u0EA1'..'\u0EA3'|'\u0EA5'|'\u0EA7'|'\u0EAA'..'\u0EAB'|'\u0EAD'..'\u0EB0'|'\u0EB2'..'\u0EB3'|'\u0EBD'|'\u0EC0'..'\u0EC4'|'\u0EC6'|'\u0EDC'..'\u0EDD'|'\u0F00'|'\u0F40'..'\u0F47'|'\u0F49'..'\u0F6A'|'\u0F88'..'\u0F8B'|'\u1000'..'\u1021'|'\u1023'..'\u1027'|'\u1029'..'\u102A'|'\u1050'..'\u1055'|'\u10A0'..'\u10C5'|'\u10D0'..'\u10F8'|'\u1100'..'\u1159'|'\u115F'..'\u11A2'|'\u11A8'..'\u11F9'|'\u1200'..'\u1206'|'\u1208'..'\u1246'|'\u1248'|'\u124A'..'\u124D'|'\u1250'..'\u1256'|'\u1258'|'\u125A'..'\u125D'|'\u1260'..'\u1286'|'\u1288'|'\u128A'..'\u128D'|'\u1290'..'\u12AE'|'\u12B0'|'\u12B2'..'\u12B5'|'\u12B8'..'\u12BE'|'\u12C0'|'\u12C2'..'\u12C5'|'\u12C8'..'\u12CE'|'\u12D0'..'\u12D6'|'\u12D8'..'\u12EE'|'\u12F0'..'\u130E'|'\u1310'|'\u1312'..'\u1315'|'\u1318'..'\u131E'|'\u1320'..'\u1346'|'\u1348'..'\u135A'|'\u13A0'..'\u13F4'|'\u1401'..'\u166C'|'\u166F'..'\u1676'|'\u1681'..'\u169A'|'\u16A0'..'\u16EA'|'\u16EE'..'\u16F0'|'\u1700'..'\u170C'|'\u170E'..'\u1711'|'\u1720'..'\u1731'|'\u1740'..'\u1751'|'\u1760'..'\u176C'|'\u176E'..'\u1770'|'\u1780'..'\u17B3'|'\u17D7'|'\u17DB'..'\u17DC'|'\u1820'..'\u1877'|'\u1880'..'\u18A8'|'\u1900'..'\u191C'|'\u1950'..'\u196D'|'\u1970'..'\u1974'|'\u1D00'..'\u1D6B'|'\u1E00'..'\u1E9B'|'\u1EA0'..'\u1EF9'|'\u1F00'..'\u1F15'|'\u1F18'..'\u1F1D'|'\u1F20'..'\u1F45'|'\u1F48'..'\u1F4D'|'\u1F50'..'\u1F57'|'\u1F59'|'\u1F5B'|'\u1F5D'|'\u1F5F'..'\u1F7D'|'\u1F80'..'\u1FB4'|'\u1FB6'..'\u1FBC'|'\u1FBE'|'\u1FC2'..'\u1FC4'|'\u1FC6'..'\u1FCC'|'\u1FD0'..'\u1FD3'|'\u1FD6'..'\u1FDB'|'\u1FE0'..'\u1FEC'|'\u1FF2'..'\u1FF4'|'\u1FF6'..'\u1FFC'|'\u203F'..'\u2040'|'\u2054'|'\u2071'|'\u207F'|'\u20A0'..'\u20B1'|'\u2102'|'\u2107'|'\u210A'..'\u2113'|'\u2115'|'\u2119'..'\u211D'|'\u2124'|'\u2126'|'\u2128'|'\u212A'..'\u212D'|'\u212F'..'\u2131'|'\u2133'..'\u2139'|'\u213D'..'\u213F'|'\u2145'..'\u2149'|'\u2160'..'\u2183'|'\u3005'..'\u3007'|'\u3021'..'\u3029'|'\u3031'..'\u3035'|'\u3038'..'\u303C'|'\u3041'..'\u3096'|'\u309D'..'\u309F'|'\u30A1'..'\u30FF'|'\u3105'..'\u312C'|'\u3131'..'\u318E'|'\u31A0'..'\u31B7'|'\u31F0'..'\u31FF'|'\u3400'..'\u4DB5'|'\u4E00'..'\u9FA5'|'\uA000'..'\uA48C'|'\uAC00'..'\uD7A3'|'\uF900'..'\uFA2D'|'\uFA30'..'\uFA6A'|'\uFB00'..'\uFB06'|'\uFB13'..'\uFB17'|'\uFB1D'|'\uFB1F'..'\uFB28'|'\uFB2A'..'\uFB36'|'\uFB38'..'\uFB3C'|'\uFB3E'|'\uFB40'..'\uFB41'|'\uFB43'..'\uFB44'|'\uFB46'..'\uFBB1'|'\uFBD3'..'\uFD3D'|'\uFD50'..'\uFD8F'|'\uFD92'..'\uFDC7'|'\uFDF0'..'\uFDFC'|'\uFE33'..'\uFE34'|'\uFE4D'..'\uFE4F'|'\uFE69'|'\uFE70'..'\uFE74'|'\uFE76'..'\uFEFC'|'\uFF04'|'\uFF21'..'\uFF3A'|'\uFF3F'|'\uFF41'..'\uFF5A'|'\uFF65'..'\uFFBE'|'\uFFC2'..'\uFFC7'|'\uFFCA'..'\uFFCF'|'\uFFD2'..'\uFFD7'|'\uFFDA'..'\uFFDC'|'\uFFE0'..'\uFFE1'|'\uFFE5'..'\uFFE6'|'\uD800'..'\uDBFF' '\uDC00'..'\uDFFF');

fragment RULE_JAVALETTERORDIGIT : ('\u0000'..'\b'|'\u000E'..'\u001B'|'$'|'0'..'9'|'A'..'Z'|'_'|'a'..'z'|'\u007F'..'\u009F'|'\u00A2'..'\u00A5'|'\u00AA'|'\u00AD'|'\u00B5'|'\u00BA'|'\u00C0'..'\u00D6'|'\u00D8'..'\u00F6'|'\u00F8'..'\u0236'|'\u0250'..'\u02C1'|'\u02C6'..'\u02D1'|'\u02E0'..'\u02E4'|'\u02EE'|'\u0300'..'\u0357'|'\u035D'..'\u036F'|'\u037A'|'\u0386'|'\u0388'..'\u038A'|'\u038C'|'\u038E'..'\u03A1'|'\u03A3'..'\u03CE'|'\u03D0'..'\u03F5'|'\u03F7'..'\u03FB'|'\u0400'..'\u0481'|'\u0483'..'\u0486'|'\u048A'..'\u04CE'|'\u04D0'..'\u04F5'|'\u04F8'..'\u04F9'|'\u0500'..'\u050F'|'\u0531'..'\u0556'|'\u0559'|'\u0561'..'\u0587'|'\u0591'..'\u05A1'|'\u05A3'..'\u05B9'|'\u05BB'..'\u05BD'|'\u05BF'|'\u05C1'..'\u05C2'|'\u05C4'|'\u05D0'..'\u05EA'|'\u05F0'..'\u05F2'|'\u0600'..'\u0603'|'\u0610'..'\u0615'|'\u0621'..'\u063A'|'\u0640'..'\u0658'|'\u0660'..'\u0669'|'\u066E'..'\u06D3'|'\u06D5'..'\u06DD'|'\u06DF'..'\u06E8'|'\u06EA'..'\u06FC'|'\u06FF'|'\u070F'..'\u074A'|'\u074D'..'\u074F'|'\u0780'..'\u07B1'|'\u0901'..'\u0939'|'\u093C'..'\u094D'|'\u0950'..'\u0954'|'\u0958'..'\u0963'|'\u0966'..'\u096F'|'\u0981'..'\u0983'|'\u0985'..'\u098C'|'\u098F'..'\u0990'|'\u0993'..'\u09A8'|'\u09AA'..'\u09B0'|'\u09B2'|'\u09B6'..'\u09B9'|'\u09BC'..'\u09C4'|'\u09C7'..'\u09C8'|'\u09CB'..'\u09CD'|'\u09D7'|'\u09DC'..'\u09DD'|'\u09DF'..'\u09E3'|'\u09E6'..'\u09F3'|'\u0A01'..'\u0A03'|'\u0A05'..'\u0A0A'|'\u0A0F'..'\u0A10'|'\u0A13'..'\u0A28'|'\u0A2A'..'\u0A30'|'\u0A32'..'\u0A33'|'\u0A35'..'\u0A36'|'\u0A38'..'\u0A39'|'\u0A3C'|'\u0A3E'..'\u0A42'|'\u0A47'..'\u0A48'|'\u0A4B'..'\u0A4D'|'\u0A59'..'\u0A5C'|'\u0A5E'|'\u0A66'..'\u0A74'|'\u0A81'..'\u0A83'|'\u0A85'..'\u0A8D'|'\u0A8F'..'\u0A91'|'\u0A93'..'\u0AA8'|'\u0AAA'..'\u0AB0'|'\u0AB2'..'\u0AB3'|'\u0AB5'..'\u0AB9'|'\u0ABC'..'\u0AC5'|'\u0AC7'..'\u0AC9'|'\u0ACB'..'\u0ACD'|'\u0AD0'|'\u0AE0'..'\u0AE3'|'\u0AE6'..'\u0AEF'|'\u0AF1'|'\u0B01'..'\u0B03'|'\u0B05'..'\u0B0C'|'\u0B0F'..'\u0B10'|'\u0B13'..'\u0B28'|'\u0B2A'..'\u0B30'|'\u0B32'..'\u0B33'|'\u0B35'..'\u0B39'|'\u0B3C'..'\u0B43'|'\u0B47'..'\u0B48'|'\u0B4B'..'\u0B4D'|'\u0B56'..'\u0B57'|'\u0B5C'..'\u0B5D'|'\u0B5F'..'\u0B61'|'\u0B66'..'\u0B6F'|'\u0B71'|'\u0B82'..'\u0B83'|'\u0B85'..'\u0B8A'|'\u0B8E'..'\u0B90'|'\u0B92'..'\u0B95'|'\u0B99'..'\u0B9A'|'\u0B9C'|'\u0B9E'..'\u0B9F'|'\u0BA3'..'\u0BA4'|'\u0BA8'..'\u0BAA'|'\u0BAE'..'\u0BB5'|'\u0BB7'..'\u0BB9'|'\u0BBE'..'\u0BC2'|'\u0BC6'..'\u0BC8'|'\u0BCA'..'\u0BCD'|'\u0BD7'|'\u0BE7'..'\u0BEF'|'\u0BF9'|'\u0C01'..'\u0C03'|'\u0C05'..'\u0C0C'|'\u0C0E'..'\u0C10'|'\u0C12'..'\u0C28'|'\u0C2A'..'\u0C33'|'\u0C35'..'\u0C39'|'\u0C3E'..'\u0C44'|'\u0C46'..'\u0C48'|'\u0C4A'..'\u0C4D'|'\u0C55'..'\u0C56'|'\u0C60'..'\u0C61'|'\u0C66'..'\u0C6F'|'\u0C82'..'\u0C83'|'\u0C85'..'\u0C8C'|'\u0C8E'..'\u0C90'|'\u0C92'..'\u0CA8'|'\u0CAA'..'\u0CB3'|'\u0CB5'..'\u0CB9'|'\u0CBC'..'\u0CC4'|'\u0CC6'..'\u0CC8'|'\u0CCA'..'\u0CCD'|'\u0CD5'..'\u0CD6'|'\u0CDE'|'\u0CE0'..'\u0CE1'|'\u0CE6'..'\u0CEF'|'\u0D02'..'\u0D03'|'\u0D05'..'\u0D0C'|'\u0D0E'..'\u0D10'|'\u0D12'..'\u0D28'|'\u0D2A'..'\u0D39'|'\u0D3E'..'\u0D43'|'\u0D46'..'\u0D48'|'\u0D4A'..'\u0D4D'|'\u0D57'|'\u0D60'..'\u0D61'|'\u0D66'..'\u0D6F'|'\u0D82'..'\u0D83'|'\u0D85'..'\u0D96'|'\u0D9A'..'\u0DB1'|'\u0DB3'..'\u0DBB'|'\u0DBD'|'\u0DC0'..'\u0DC6'|'\u0DCA'|'\u0DCF'..'\u0DD4'|'\u0DD6'|'\u0DD8'..'\u0DDF'|'\u0DF2'..'\u0DF3'|'\u0E01'..'\u0E3A'|'\u0E3F'..'\u0E4E'|'\u0E50'..'\u0E59'|'\u0E81'..'\u0E82'|'\u0E84'|'\u0E87'..'\u0E88'|'\u0E8A'|'\u0E8D'|'\u0E94'..'\u0E97'|'\u0E99'..'\u0E9F'|'\u0EA1'..'\u0EA3'|'\u0EA5'|'\u0EA7'|'\u0EAA'..'\u0EAB'|'\u0EAD'..'\u0EB9'|'\u0EBB'..'\u0EBD'|'\u0EC0'..'\u0EC4'|'\u0EC6'|'\u0EC8'..'\u0ECD'|'\u0ED0'..'\u0ED9'|'\u0EDC'..'\u0EDD'|'\u0F00'|'\u0F18'..'\u0F19'|'\u0F20'..'\u0F29'|'\u0F35'|'\u0F37'|'\u0F39'|'\u0F3E'..'\u0F47'|'\u0F49'..'\u0F6A'|'\u0F71'..'\u0F84'|'\u0F86'..'\u0F8B'|'\u0F90'..'\u0F97'|'\u0F99'..'\u0FBC'|'\u0FC6'|'\u1000'..'\u1021'|'\u1023'..'\u1027'|'\u1029'..'\u102A'|'\u102C'..'\u1032'|'\u1036'..'\u1039'|'\u1040'..'\u1049'|'\u1050'..'\u1059'|'\u10A0'..'\u10C5'|'\u10D0'..'\u10F8'|'\u1100'..'\u1159'|'\u115F'..'\u11A2'|'\u11A8'..'\u11F9'|'\u1200'..'\u1206'|'\u1208'..'\u1246'|'\u1248'|'\u124A'..'\u124D'|'\u1250'..'\u1256'|'\u1258'|'\u125A'..'\u125D'|'\u1260'..'\u1286'|'\u1288'|'\u128A'..'\u128D'|'\u1290'..'\u12AE'|'\u12B0'|'\u12B2'..'\u12B5'|'\u12B8'..'\u12BE'|'\u12C0'|'\u12C2'..'\u12C5'|'\u12C8'..'\u12CE'|'\u12D0'..'\u12D6'|'\u12D8'..'\u12EE'|'\u12F0'..'\u130E'|'\u1310'|'\u1312'..'\u1315'|'\u1318'..'\u131E'|'\u1320'..'\u1346'|'\u1348'..'\u135A'|'\u1369'..'\u1371'|'\u13A0'..'\u13F4'|'\u1401'..'\u166C'|'\u166F'..'\u1676'|'\u1681'..'\u169A'|'\u16A0'..'\u16EA'|'\u16EE'..'\u16F0'|'\u1700'..'\u170C'|'\u170E'..'\u1714'|'\u1720'..'\u1734'|'\u1740'..'\u1753'|'\u1760'..'\u176C'|'\u176E'..'\u1770'|'\u1772'..'\u1773'|'\u1780'..'\u17D3'|'\u17D7'|'\u17DB'..'\u17DD'|'\u17E0'..'\u17E9'|'\u180B'..'\u180D'|'\u1810'..'\u1819'|'\u1820'..'\u1877'|'\u1880'..'\u18A9'|'\u1900'..'\u191C'|'\u1920'..'\u192B'|'\u1930'..'\u193B'|'\u1946'..'\u196D'|'\u1970'..'\u1974'|'\u1D00'..'\u1D6B'|'\u1E00'..'\u1E9B'|'\u1EA0'..'\u1EF9'|'\u1F00'..'\u1F15'|'\u1F18'..'\u1F1D'|'\u1F20'..'\u1F45'|'\u1F48'..'\u1F4D'|'\u1F50'..'\u1F57'|'\u1F59'|'\u1F5B'|'\u1F5D'|'\u1F5F'..'\u1F7D'|'\u1F80'..'\u1FB4'|'\u1FB6'..'\u1FBC'|'\u1FBE'|'\u1FC2'..'\u1FC4'|'\u1FC6'..'\u1FCC'|'\u1FD0'..'\u1FD3'|'\u1FD6'..'\u1FDB'|'\u1FE0'..'\u1FEC'|'\u1FF2'..'\u1FF4'|'\u1FF6'..'\u1FFC'|'\u200C'..'\u200F'|'\u202A'..'\u202E'|'\u203F'..'\u2040'|'\u2054'|'\u2060'..'\u2063'|'\u206A'..'\u206F'|'\u2071'|'\u207F'|'\u20A0'..'\u20B1'|'\u20D0'..'\u20DC'|'\u20E1'|'\u20E5'..'\u20EA'|'\u2102'|'\u2107'|'\u210A'..'\u2113'|'\u2115'|'\u2119'..'\u211D'|'\u2124'|'\u2126'|'\u2128'|'\u212A'..'\u212D'|'\u212F'..'\u2131'|'\u2133'..'\u2139'|'\u213D'..'\u213F'|'\u2145'..'\u2149'|'\u2160'..'\u2183'|'\u3005'..'\u3007'|'\u3021'..'\u302F'|'\u3031'..'\u3035'|'\u3038'..'\u303C'|'\u3041'..'\u3096'|'\u3099'..'\u309A'|'\u309D'..'\u309F'|'\u30A1'..'\u30FF'|'\u3105'..'\u312C'|'\u3131'..'\u318E'|'\u31A0'..'\u31B7'|'\u31F0'..'\u31FF'|'\u3400'..'\u4DB5'|'\u4E00'..'\u9FA5'|'\uA000'..'\uA48C'|'\uAC00'..'\uD7A3'|'\uF900'..'\uFA2D'|'\uFA30'..'\uFA6A'|'\uFB00'..'\uFB06'|'\uFB13'..'\uFB17'|'\uFB1D'..'\uFB28'|'\uFB2A'..'\uFB36'|'\uFB38'..'\uFB3C'|'\uFB3E'|'\uFB40'..'\uFB41'|'\uFB43'..'\uFB44'|'\uFB46'..'\uFBB1'|'\uFBD3'..'\uFD3D'|'\uFD50'..'\uFD8F'|'\uFD92'..'\uFDC7'|'\uFDF0'..'\uFDFC'|'\uFE00'..'\uFE0F'|'\uFE20'..'\uFE23'|'\uFE33'..'\uFE34'|'\uFE4D'..'\uFE4F'|'\uFE69'|'\uFE70'..'\uFE74'|'\uFE76'..'\uFEFC'|'\uFEFF'|'\uFF04'|'\uFF10'..'\uFF19'|'\uFF21'..'\uFF3A'|'\uFF3F'|'\uFF41'..'\uFF5A'|'\uFF65'..'\uFFBE'|'\uFFC2'..'\uFFC7'|'\uFFCA'..'\uFFCF'|'\uFFD2'..'\uFFD7'|'\uFFDA'..'\uFFDC'|'\uFFE0'..'\uFFE1'|'\uFFE5'..'\uFFE6'|'\uFFF9'..'\uFFFB'|'\uD800'..'\uDBFF' '\uDC00'..'\uDFFF');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;


