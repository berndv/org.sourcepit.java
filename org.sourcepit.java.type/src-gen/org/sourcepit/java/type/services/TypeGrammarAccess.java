/*
 * generated by Xtext
 */

package org.sourcepit.java.type.services;

import java.util.List;

import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;
import org.sourcepit.java.literals.services.LiteralsGrammarAccess;

import com.google.inject.Inject;
import com.google.inject.Singleton;

@Singleton
public class TypeGrammarAccess extends AbstractGrammarElementFinder {


   public class ModelElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
      private final Assignment cTypeAssignment = (Assignment) rule.eContents().get(1);
      private final RuleCall cTypeLiteralParserRuleCall_0 = (RuleCall) cTypeAssignment.eContents().get(0);

      // Model:
      // type=literal;
      public ParserRule getRule() {
         return rule;
      }

      // type=literal
      public Assignment getTypeAssignment() {
         return cTypeAssignment;
      }

      // literal
      public RuleCall getTypeLiteralParserRuleCall_0() {
         return cTypeLiteralParserRuleCall_0;
      }
   }

   public class TypeElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "type");
      private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
      private final RuleCall cPrimitiveTypeParserRuleCall_0 = (RuleCall) cAlternatives.eContents().get(0);
      private final RuleCall cReferenceTypeParserRuleCall_1 = (RuleCall) cAlternatives.eContents().get(1);

      // / *
      // * Productions from §4 (Types, Values, and Variables)
      // * / type:
      // primitiveType | referenceType;
      public ParserRule getRule() {
         return rule;
      }

      // primitiveType | referenceType
      public Alternatives getAlternatives() {
         return cAlternatives;
      }

      // primitiveType
      public RuleCall getPrimitiveTypeParserRuleCall_0() {
         return cPrimitiveTypeParserRuleCall_0;
      }

      // referenceType
      public RuleCall getReferenceTypeParserRuleCall_1() {
         return cReferenceTypeParserRuleCall_1;
      }
   }

   public class PrimitiveTypeElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "primitiveType");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Assignment cAnnotationsAssignment_0 = (Assignment) cGroup.eContents().get(0);
      private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall) cAnnotationsAssignment_0.eContents()
         .get(0);
      private final Assignment cTypeNameAssignment_1 = (Assignment) cGroup.eContents().get(1);
      private final Alternatives cTypeNameAlternatives_1_0 = (Alternatives) cTypeNameAssignment_1.eContents().get(0);
      private final RuleCall cTypeNameNumericTypeTerminalRuleCall_1_0_0 = (RuleCall) cTypeNameAlternatives_1_0.eContents()
         .get(0);
      private final RuleCall cTypeNameBooleanTypeTerminalRuleCall_1_0_1 = (RuleCall) cTypeNameAlternatives_1_0.eContents()
         .get(1);

      // primitiveType:
      // annotations+=annotation* typeName=(numericType | booleanType);
      public ParserRule getRule() {
         return rule;
      }

      // annotations+=annotation* typeName=(numericType | booleanType)
      public Group getGroup() {
         return cGroup;
      }

      // annotations+=annotation*
      public Assignment getAnnotationsAssignment_0() {
         return cAnnotationsAssignment_0;
      }

      // annotation
      public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() {
         return cAnnotationsAnnotationParserRuleCall_0_0;
      }

      // typeName=(numericType | booleanType)
      public Assignment getTypeNameAssignment_1() {
         return cTypeNameAssignment_1;
      }

      // numericType | booleanType
      public Alternatives getTypeNameAlternatives_1_0() {
         return cTypeNameAlternatives_1_0;
      }

      // numericType
      public RuleCall getTypeNameNumericTypeTerminalRuleCall_1_0_0() {
         return cTypeNameNumericTypeTerminalRuleCall_1_0_0;
      }

      // booleanType
      public RuleCall getTypeNameBooleanTypeTerminalRuleCall_1_0_1() {
         return cTypeNameBooleanTypeTerminalRuleCall_1_0_1;
      }
   }

   public class ReferenceTypeElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "referenceType");
      private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
      private final RuleCall cClassOrInterfaceTypeParserRuleCall_0 = (RuleCall) cAlternatives.eContents().get(0);
      private final RuleCall cTypeVariableParserRuleCall_1 = (RuleCall) cAlternatives.eContents().get(1);
      private final RuleCall cArrayTypeParserRuleCall_2 = (RuleCall) cAlternatives.eContents().get(2);

      // referenceType:
      // classOrInterfaceType | typeVariable | arrayType;
      public ParserRule getRule() {
         return rule;
      }

      // classOrInterfaceType | typeVariable | arrayType
      public Alternatives getAlternatives() {
         return cAlternatives;
      }

      // classOrInterfaceType
      public RuleCall getClassOrInterfaceTypeParserRuleCall_0() {
         return cClassOrInterfaceTypeParserRuleCall_0;
      }

      // typeVariable
      public RuleCall getTypeVariableParserRuleCall_1() {
         return cTypeVariableParserRuleCall_1;
      }

      // arrayType
      public RuleCall getArrayTypeParserRuleCall_2() {
         return cArrayTypeParserRuleCall_2;
      }
   }

   public class ClassOrInterfaceTypeElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "classOrInterfaceType");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Assignment cClassOrInterfaceTypeSegmentsAssignment_0 = (Assignment) cGroup.eContents().get(0);
      private final RuleCall cClassOrInterfaceTypeSegmentsClassOrInterfaceTypeSegmentParserRuleCall_0_0 = (RuleCall) cClassOrInterfaceTypeSegmentsAssignment_0.eContents()
         .get(0);
      private final Group cGroup_1 = (Group) cGroup.eContents().get(1);
      private final Keyword cFullStopKeyword_1_0 = (Keyword) cGroup_1.eContents().get(0);
      private final Assignment cClassOrInterfaceTypeSegmentsAssignment_1_1 = (Assignment) cGroup_1.eContents().get(1);
      private final RuleCall cClassOrInterfaceTypeSegmentsClassOrInterfaceTypeSegmentParserRuleCall_1_1_0 = (RuleCall) cClassOrInterfaceTypeSegmentsAssignment_1_1.eContents()
         .get(0);

      // classOrInterfaceType:
      // classOrInterfaceTypeSegments+=classOrInterfaceTypeSegment ("."
      // classOrInterfaceTypeSegments+=classOrInterfaceTypeSegment?)*;
      public ParserRule getRule() {
         return rule;
      }

      // classOrInterfaceTypeSegments+=classOrInterfaceTypeSegment ("."
      // classOrInterfaceTypeSegments+=classOrInterfaceTypeSegment?)*
      public Group getGroup() {
         return cGroup;
      }

      // classOrInterfaceTypeSegments+=classOrInterfaceTypeSegment
      public Assignment getClassOrInterfaceTypeSegmentsAssignment_0() {
         return cClassOrInterfaceTypeSegmentsAssignment_0;
      }

      // classOrInterfaceTypeSegment
      public RuleCall getClassOrInterfaceTypeSegmentsClassOrInterfaceTypeSegmentParserRuleCall_0_0() {
         return cClassOrInterfaceTypeSegmentsClassOrInterfaceTypeSegmentParserRuleCall_0_0;
      }

      // ("." classOrInterfaceTypeSegments+=classOrInterfaceTypeSegment?)*
      public Group getGroup_1() {
         return cGroup_1;
      }

      // "."
      public Keyword getFullStopKeyword_1_0() {
         return cFullStopKeyword_1_0;
      }

      // classOrInterfaceTypeSegments+=classOrInterfaceTypeSegment?
      public Assignment getClassOrInterfaceTypeSegmentsAssignment_1_1() {
         return cClassOrInterfaceTypeSegmentsAssignment_1_1;
      }

      // classOrInterfaceTypeSegment
      public RuleCall getClassOrInterfaceTypeSegmentsClassOrInterfaceTypeSegmentParserRuleCall_1_1_0() {
         return cClassOrInterfaceTypeSegmentsClassOrInterfaceTypeSegmentParserRuleCall_1_1_0;
      }
   }

   public class ClassOrInterfaceTypeSegmentElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(),
         "classOrInterfaceTypeSegment");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Assignment cAnnotationsAssignment_0 = (Assignment) cGroup.eContents().get(0);
      private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall) cAnnotationsAssignment_0.eContents()
         .get(0);
      private final Assignment cNameAssignment_1 = (Assignment) cGroup.eContents().get(1);
      private final RuleCall cNameIdentifierTerminalRuleCall_1_0 = (RuleCall) cNameAssignment_1.eContents().get(0);
      private final Assignment cTypeArgumentsAssignment_2 = (Assignment) cGroup.eContents().get(2);
      private final RuleCall cTypeArgumentsTypeArgumentsParserRuleCall_2_0 = (RuleCall) cTypeArgumentsAssignment_2.eContents()
         .get(0);

      // classOrInterfaceTypeSegment:
      // annotations+=annotation* name=Identifier typeArguments=typeArguments?;
      public ParserRule getRule() {
         return rule;
      }

      // annotations+=annotation* name=Identifier typeArguments=typeArguments?
      public Group getGroup() {
         return cGroup;
      }

      // annotations+=annotation*
      public Assignment getAnnotationsAssignment_0() {
         return cAnnotationsAssignment_0;
      }

      // annotation
      public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() {
         return cAnnotationsAnnotationParserRuleCall_0_0;
      }

      // name=Identifier
      public Assignment getNameAssignment_1() {
         return cNameAssignment_1;
      }

      // Identifier
      public RuleCall getNameIdentifierTerminalRuleCall_1_0() {
         return cNameIdentifierTerminalRuleCall_1_0;
      }

      // typeArguments=typeArguments?
      public Assignment getTypeArgumentsAssignment_2() {
         return cTypeArgumentsAssignment_2;
      }

      // typeArguments
      public RuleCall getTypeArgumentsTypeArgumentsParserRuleCall_2_0() {
         return cTypeArgumentsTypeArgumentsParserRuleCall_2_0;
      }
   }

   public class ClassTypeElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "classType");
      private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
      private final Group cGroup_0 = (Group) cAlternatives.eContents().get(0);
      private final Assignment cAnnotationsAssignment_0_0 = (Assignment) cGroup_0.eContents().get(0);
      private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0_0 = (RuleCall) cAnnotationsAssignment_0_0.eContents()
         .get(0);
      private final Assignment cNameAssignment_0_1 = (Assignment) cGroup_0.eContents().get(1);
      private final RuleCall cNameIdentifierTerminalRuleCall_0_1_0 = (RuleCall) cNameAssignment_0_1.eContents().get(0);
      private final Assignment cTypeArgumentsAssignment_0_2 = (Assignment) cGroup_0.eContents().get(2);
      private final RuleCall cTypeArgumentsTypeArgumentsParserRuleCall_0_2_0 = (RuleCall) cTypeArgumentsAssignment_0_2.eContents()
         .get(0);
      private final Group cGroup_1 = (Group) cAlternatives.eContents().get(1);
      private final Assignment cClassOrInterfaceTypeAssignment_1_0 = (Assignment) cGroup_1.eContents().get(0);
      private final RuleCall cClassOrInterfaceTypeClassOrInterfaceTypeParserRuleCall_1_0_0 = (RuleCall) cClassOrInterfaceTypeAssignment_1_0.eContents()
         .get(0);
      private final Keyword cFullStopKeyword_1_1 = (Keyword) cGroup_1.eContents().get(1);
      private final Assignment cAnnotationsAssignment_1_2 = (Assignment) cGroup_1.eContents().get(2);
      private final RuleCall cAnnotationsAnnotationParserRuleCall_1_2_0 = (RuleCall) cAnnotationsAssignment_1_2.eContents()
         .get(0);
      private final Assignment cNameAssignment_1_3 = (Assignment) cGroup_1.eContents().get(3);
      private final RuleCall cNameIdentifierTerminalRuleCall_1_3_0 = (RuleCall) cNameAssignment_1_3.eContents().get(0);
      private final Assignment cTypeArgumentsAssignment_1_4 = (Assignment) cGroup_1.eContents().get(4);
      private final RuleCall cTypeArgumentsTypeArgumentsParserRuleCall_1_4_0 = (RuleCall) cTypeArgumentsAssignment_1_4.eContents()
         .get(0);

      // classType:
      // annotations+=annotation* name=Identifier typeArguments=typeArguments? |
      // classOrInterfaceType=classOrInterfaceType "."
      // annotations+=annotation* name=Identifier typeArguments=typeArguments?;
      public ParserRule getRule() {
         return rule;
      }

      // annotations+=annotation* name=Identifier typeArguments=typeArguments? |
      // classOrInterfaceType=classOrInterfaceType "."
      // annotations+=annotation* name=Identifier typeArguments=typeArguments?
      public Alternatives getAlternatives() {
         return cAlternatives;
      }

      // annotations+=annotation* name=Identifier typeArguments=typeArguments?
      public Group getGroup_0() {
         return cGroup_0;
      }

      // annotations+=annotation*
      public Assignment getAnnotationsAssignment_0_0() {
         return cAnnotationsAssignment_0_0;
      }

      // annotation
      public RuleCall getAnnotationsAnnotationParserRuleCall_0_0_0() {
         return cAnnotationsAnnotationParserRuleCall_0_0_0;
      }

      // name=Identifier
      public Assignment getNameAssignment_0_1() {
         return cNameAssignment_0_1;
      }

      // Identifier
      public RuleCall getNameIdentifierTerminalRuleCall_0_1_0() {
         return cNameIdentifierTerminalRuleCall_0_1_0;
      }

      // typeArguments=typeArguments?
      public Assignment getTypeArgumentsAssignment_0_2() {
         return cTypeArgumentsAssignment_0_2;
      }

      // typeArguments
      public RuleCall getTypeArgumentsTypeArgumentsParserRuleCall_0_2_0() {
         return cTypeArgumentsTypeArgumentsParserRuleCall_0_2_0;
      }

      // classOrInterfaceType=classOrInterfaceType "." annotations+=annotation* name=Identifier
      // typeArguments=typeArguments?
      public Group getGroup_1() {
         return cGroup_1;
      }

      // classOrInterfaceType=classOrInterfaceType
      public Assignment getClassOrInterfaceTypeAssignment_1_0() {
         return cClassOrInterfaceTypeAssignment_1_0;
      }

      // classOrInterfaceType
      public RuleCall getClassOrInterfaceTypeClassOrInterfaceTypeParserRuleCall_1_0_0() {
         return cClassOrInterfaceTypeClassOrInterfaceTypeParserRuleCall_1_0_0;
      }

      // "."
      public Keyword getFullStopKeyword_1_1() {
         return cFullStopKeyword_1_1;
      }

      // annotations+=annotation*
      public Assignment getAnnotationsAssignment_1_2() {
         return cAnnotationsAssignment_1_2;
      }

      // annotation
      public RuleCall getAnnotationsAnnotationParserRuleCall_1_2_0() {
         return cAnnotationsAnnotationParserRuleCall_1_2_0;
      }

      // name=Identifier
      public Assignment getNameAssignment_1_3() {
         return cNameAssignment_1_3;
      }

      // Identifier
      public RuleCall getNameIdentifierTerminalRuleCall_1_3_0() {
         return cNameIdentifierTerminalRuleCall_1_3_0;
      }

      // typeArguments=typeArguments?
      public Assignment getTypeArgumentsAssignment_1_4() {
         return cTypeArgumentsAssignment_1_4;
      }

      // typeArguments
      public RuleCall getTypeArgumentsTypeArgumentsParserRuleCall_1_4_0() {
         return cTypeArgumentsTypeArgumentsParserRuleCall_1_4_0;
      }
   }

   public class ClassType_lf_classOrInterfaceTypeElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(),
         "classType_lf_classOrInterfaceType");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Keyword cFullStopKeyword_0 = (Keyword) cGroup.eContents().get(0);
      private final Assignment cAnnotationsAssignment_1 = (Assignment) cGroup.eContents().get(1);
      private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall) cAnnotationsAssignment_1.eContents()
         .get(0);
      private final Assignment cNameAssignment_2 = (Assignment) cGroup.eContents().get(2);
      private final RuleCall cNameIdentifierTerminalRuleCall_2_0 = (RuleCall) cNameAssignment_2.eContents().get(0);
      private final Assignment cTypeArgumentsAssignment_3 = (Assignment) cGroup.eContents().get(3);
      private final RuleCall cTypeArgumentsTypeArgumentsParserRuleCall_3_0 = (RuleCall) cTypeArgumentsAssignment_3.eContents()
         .get(0);

      // classType_lf_classOrInterfaceType:
      // "." annotations+=annotation* name=Identifier typeArguments=typeArguments?;
      public ParserRule getRule() {
         return rule;
      }

      // "." annotations+=annotation* name=Identifier typeArguments=typeArguments?
      public Group getGroup() {
         return cGroup;
      }

      // "."
      public Keyword getFullStopKeyword_0() {
         return cFullStopKeyword_0;
      }

      // annotations+=annotation*
      public Assignment getAnnotationsAssignment_1() {
         return cAnnotationsAssignment_1;
      }

      // annotation
      public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() {
         return cAnnotationsAnnotationParserRuleCall_1_0;
      }

      // name=Identifier
      public Assignment getNameAssignment_2() {
         return cNameAssignment_2;
      }

      // Identifier
      public RuleCall getNameIdentifierTerminalRuleCall_2_0() {
         return cNameIdentifierTerminalRuleCall_2_0;
      }

      // typeArguments=typeArguments?
      public Assignment getTypeArgumentsAssignment_3() {
         return cTypeArgumentsAssignment_3;
      }

      // typeArguments
      public RuleCall getTypeArgumentsTypeArgumentsParserRuleCall_3_0() {
         return cTypeArgumentsTypeArgumentsParserRuleCall_3_0;
      }
   }

   public class ClassType_lfno_classOrInterfaceTypeElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(),
         "classType_lfno_classOrInterfaceType");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Assignment cAnnotationsAssignment_0 = (Assignment) cGroup.eContents().get(0);
      private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall) cAnnotationsAssignment_0.eContents()
         .get(0);
      private final Assignment cNameAssignment_1 = (Assignment) cGroup.eContents().get(1);
      private final RuleCall cNameIdentifierTerminalRuleCall_1_0 = (RuleCall) cNameAssignment_1.eContents().get(0);
      private final Assignment cTypeArgumentsAssignment_2 = (Assignment) cGroup.eContents().get(2);
      private final RuleCall cTypeArgumentsTypeArgumentsParserRuleCall_2_0 = (RuleCall) cTypeArgumentsAssignment_2.eContents()
         .get(0);

      // classType_lfno_classOrInterfaceType:
      // annotations+=annotation* name=Identifier typeArguments=typeArguments?;
      public ParserRule getRule() {
         return rule;
      }

      // annotations+=annotation* name=Identifier typeArguments=typeArguments?
      public Group getGroup() {
         return cGroup;
      }

      // annotations+=annotation*
      public Assignment getAnnotationsAssignment_0() {
         return cAnnotationsAssignment_0;
      }

      // annotation
      public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() {
         return cAnnotationsAnnotationParserRuleCall_0_0;
      }

      // name=Identifier
      public Assignment getNameAssignment_1() {
         return cNameAssignment_1;
      }

      // Identifier
      public RuleCall getNameIdentifierTerminalRuleCall_1_0() {
         return cNameIdentifierTerminalRuleCall_1_0;
      }

      // typeArguments=typeArguments?
      public Assignment getTypeArgumentsAssignment_2() {
         return cTypeArgumentsAssignment_2;
      }

      // typeArguments
      public RuleCall getTypeArgumentsTypeArgumentsParserRuleCall_2_0() {
         return cTypeArgumentsTypeArgumentsParserRuleCall_2_0;
      }
   }

   public class InterfaceTypeElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "interfaceType");
      private final RuleCall cClassTypeParserRuleCall = (RuleCall) rule.eContents().get(1);

      // interfaceType:
      // classType;
      public ParserRule getRule() {
         return rule;
      }

      // classType
      public RuleCall getClassTypeParserRuleCall() {
         return cClassTypeParserRuleCall;
      }
   }

   public class InterfaceType_lf_classOrInterfaceTypeElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(),
         "interfaceType_lf_classOrInterfaceType");
      private final RuleCall cClassType_lf_classOrInterfaceTypeParserRuleCall = (RuleCall) rule.eContents().get(1);

      // interfaceType_lf_classOrInterfaceType:
      // classType_lf_classOrInterfaceType;
      public ParserRule getRule() {
         return rule;
      }

      // classType_lf_classOrInterfaceType
      public RuleCall getClassType_lf_classOrInterfaceTypeParserRuleCall() {
         return cClassType_lf_classOrInterfaceTypeParserRuleCall;
      }
   }

   public class InterfaceType_lfno_classOrInterfaceTypeElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(),
         "interfaceType_lfno_classOrInterfaceType");
      private final RuleCall cClassType_lfno_classOrInterfaceTypeParserRuleCall = (RuleCall) rule.eContents().get(1);

      // interfaceType_lfno_classOrInterfaceType:
      // classType_lfno_classOrInterfaceType;
      public ParserRule getRule() {
         return rule;
      }

      // classType_lfno_classOrInterfaceType
      public RuleCall getClassType_lfno_classOrInterfaceTypeParserRuleCall() {
         return cClassType_lfno_classOrInterfaceTypeParserRuleCall;
      }
   }

   public class TypeVariableElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "typeVariable");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Assignment cAnnotationsAssignment_0 = (Assignment) cGroup.eContents().get(0);
      private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall) cAnnotationsAssignment_0.eContents()
         .get(0);
      private final Assignment cNameAssignment_1 = (Assignment) cGroup.eContents().get(1);
      private final RuleCall cNameIdentifierTerminalRuleCall_1_0 = (RuleCall) cNameAssignment_1.eContents().get(0);

      // typeVariable:
      // annotations+=annotation* name=Identifier;
      public ParserRule getRule() {
         return rule;
      }

      // annotations+=annotation* name=Identifier
      public Group getGroup() {
         return cGroup;
      }

      // annotations+=annotation*
      public Assignment getAnnotationsAssignment_0() {
         return cAnnotationsAssignment_0;
      }

      // annotation
      public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() {
         return cAnnotationsAnnotationParserRuleCall_0_0;
      }

      // name=Identifier
      public Assignment getNameAssignment_1() {
         return cNameAssignment_1;
      }

      // Identifier
      public RuleCall getNameIdentifierTerminalRuleCall_1_0() {
         return cNameIdentifierTerminalRuleCall_1_0;
      }
   }

   public class ArrayTypeElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "arrayType");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Assignment cTypeAssignment_0 = (Assignment) cGroup.eContents().get(0);
      private final Alternatives cTypeAlternatives_0_0 = (Alternatives) cTypeAssignment_0.eContents().get(0);
      private final RuleCall cTypePrimitiveTypeParserRuleCall_0_0_0 = (RuleCall) cTypeAlternatives_0_0.eContents().get(
         0);
      private final RuleCall cTypeClassOrInterfaceTypeParserRuleCall_0_0_1 = (RuleCall) cTypeAlternatives_0_0.eContents()
         .get(1);
      private final RuleCall cTypeTypeVariableParserRuleCall_0_0_2 = (RuleCall) cTypeAlternatives_0_0.eContents()
         .get(2);
      private final Assignment cDimsAssignment_1 = (Assignment) cGroup.eContents().get(1);
      private final RuleCall cDimsDimsParserRuleCall_1_0 = (RuleCall) cDimsAssignment_1.eContents().get(0);

      // arrayType:
      // type=(primitiveType | classOrInterfaceType | typeVariable) dims=dims;
      public ParserRule getRule() {
         return rule;
      }

      // type=(primitiveType | classOrInterfaceType | typeVariable) dims=dims
      public Group getGroup() {
         return cGroup;
      }

      // type=(primitiveType | classOrInterfaceType | typeVariable)
      public Assignment getTypeAssignment_0() {
         return cTypeAssignment_0;
      }

      // primitiveType | classOrInterfaceType | typeVariable
      public Alternatives getTypeAlternatives_0_0() {
         return cTypeAlternatives_0_0;
      }

      // primitiveType
      public RuleCall getTypePrimitiveTypeParserRuleCall_0_0_0() {
         return cTypePrimitiveTypeParserRuleCall_0_0_0;
      }

      // classOrInterfaceType
      public RuleCall getTypeClassOrInterfaceTypeParserRuleCall_0_0_1() {
         return cTypeClassOrInterfaceTypeParserRuleCall_0_0_1;
      }

      // typeVariable
      public RuleCall getTypeTypeVariableParserRuleCall_0_0_2() {
         return cTypeTypeVariableParserRuleCall_0_0_2;
      }

      // dims=dims
      public Assignment getDimsAssignment_1() {
         return cDimsAssignment_1;
      }

      // dims
      public RuleCall getDimsDimsParserRuleCall_1_0() {
         return cDimsDimsParserRuleCall_1_0;
      }
   }

   public class DimsElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dims");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Assignment cDimsAssignment_0 = (Assignment) cGroup.eContents().get(0);
      private final RuleCall cDimsDimParserRuleCall_0_0 = (RuleCall) cDimsAssignment_0.eContents().get(0);
      private final Assignment cDimsAssignment_1 = (Assignment) cGroup.eContents().get(1);
      private final RuleCall cDimsDimParserRuleCall_1_0 = (RuleCall) cDimsAssignment_1.eContents().get(0);

      // dims:
      // dims+=dim dims+=dim*;
      public ParserRule getRule() {
         return rule;
      }

      // dims+=dim dims+=dim*
      public Group getGroup() {
         return cGroup;
      }

      // dims+=dim
      public Assignment getDimsAssignment_0() {
         return cDimsAssignment_0;
      }

      // dim
      public RuleCall getDimsDimParserRuleCall_0_0() {
         return cDimsDimParserRuleCall_0_0;
      }

      // dims+=dim*
      public Assignment getDimsAssignment_1() {
         return cDimsAssignment_1;
      }

      // dim
      public RuleCall getDimsDimParserRuleCall_1_0() {
         return cDimsDimParserRuleCall_1_0;
      }
   }

   public class DimElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dim");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Action cDimAction_0 = (Action) cGroup.eContents().get(0);
      private final Assignment cAnnotationsAssignment_1 = (Assignment) cGroup.eContents().get(1);
      private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall) cAnnotationsAssignment_1.eContents()
         .get(0);
      private final Keyword cLeftSquareBracketKeyword_2 = (Keyword) cGroup.eContents().get(2);
      private final Keyword cRightSquareBracketKeyword_3 = (Keyword) cGroup.eContents().get(3);

      // dim:
      // {dim} annotations+=annotation* "[" "]";
      public ParserRule getRule() {
         return rule;
      }

      // {dim} annotations+=annotation* "[" "]"
      public Group getGroup() {
         return cGroup;
      }

      // {dim}
      public Action getDimAction_0() {
         return cDimAction_0;
      }

      // annotations+=annotation*
      public Assignment getAnnotationsAssignment_1() {
         return cAnnotationsAssignment_1;
      }

      // annotation
      public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() {
         return cAnnotationsAnnotationParserRuleCall_1_0;
      }

      // "["
      public Keyword getLeftSquareBracketKeyword_2() {
         return cLeftSquareBracketKeyword_2;
      }

      // "]"
      public Keyword getRightSquareBracketKeyword_3() {
         return cRightSquareBracketKeyword_3;
      }
   }

   public class TypeParameterElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "typeParameter");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Assignment cTypeParameterModifiersAssignment_0 = (Assignment) cGroup.eContents().get(0);
      private final RuleCall cTypeParameterModifiersTypeParameterModifierParserRuleCall_0_0 = (RuleCall) cTypeParameterModifiersAssignment_0.eContents()
         .get(0);
      private final Assignment cNameAssignment_1 = (Assignment) cGroup.eContents().get(1);
      private final RuleCall cNameIdentifierTerminalRuleCall_1_0 = (RuleCall) cNameAssignment_1.eContents().get(0);
      private final Assignment cTypeBoundAssignment_2 = (Assignment) cGroup.eContents().get(2);
      private final RuleCall cTypeBoundTypeBoundParserRuleCall_2_0 = (RuleCall) cTypeBoundAssignment_2.eContents().get(
         0);

      // typeParameter:
      // typeParameterModifiers+=typeParameterModifier* name=Identifier typeBound=typeBound?;
      public ParserRule getRule() {
         return rule;
      }

      // typeParameterModifiers+=typeParameterModifier* name=Identifier typeBound=typeBound?
      public Group getGroup() {
         return cGroup;
      }

      // typeParameterModifiers+=typeParameterModifier*
      public Assignment getTypeParameterModifiersAssignment_0() {
         return cTypeParameterModifiersAssignment_0;
      }

      // typeParameterModifier
      public RuleCall getTypeParameterModifiersTypeParameterModifierParserRuleCall_0_0() {
         return cTypeParameterModifiersTypeParameterModifierParserRuleCall_0_0;
      }

      // name=Identifier
      public Assignment getNameAssignment_1() {
         return cNameAssignment_1;
      }

      // Identifier
      public RuleCall getNameIdentifierTerminalRuleCall_1_0() {
         return cNameIdentifierTerminalRuleCall_1_0;
      }

      // typeBound=typeBound?
      public Assignment getTypeBoundAssignment_2() {
         return cTypeBoundAssignment_2;
      }

      // typeBound
      public RuleCall getTypeBoundTypeBoundParserRuleCall_2_0() {
         return cTypeBoundTypeBoundParserRuleCall_2_0;
      }
   }

   public class TypeParameterModifierElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "typeParameterModifier");
      private final RuleCall cAnnotationParserRuleCall = (RuleCall) rule.eContents().get(1);

      // typeParameterModifier:
      // annotation;
      public ParserRule getRule() {
         return rule;
      }

      // annotation
      public RuleCall getAnnotationParserRuleCall() {
         return cAnnotationParserRuleCall;
      }
   }

   public class TypeBoundElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "typeBound");
      private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
      private final Group cGroup_0 = (Group) cAlternatives.eContents().get(0);
      private final Keyword cExtendsKeyword_0_0 = (Keyword) cGroup_0.eContents().get(0);
      private final Assignment cTypeVariableAssignment_0_1 = (Assignment) cGroup_0.eContents().get(1);
      private final RuleCall cTypeVariableTypeVariableParserRuleCall_0_1_0 = (RuleCall) cTypeVariableAssignment_0_1.eContents()
         .get(0);
      private final Group cGroup_1 = (Group) cAlternatives.eContents().get(1);
      private final Keyword cExtendsKeyword_1_0 = (Keyword) cGroup_1.eContents().get(0);
      private final Assignment cClassOrInterfaceTypeAssignment_1_1 = (Assignment) cGroup_1.eContents().get(1);
      private final RuleCall cClassOrInterfaceTypeClassOrInterfaceTypeParserRuleCall_1_1_0 = (RuleCall) cClassOrInterfaceTypeAssignment_1_1.eContents()
         .get(0);
      private final Assignment cAdditionalBoundAssignment_1_2 = (Assignment) cGroup_1.eContents().get(2);
      private final RuleCall cAdditionalBoundAdditionalBoundParserRuleCall_1_2_0 = (RuleCall) cAdditionalBoundAssignment_1_2.eContents()
         .get(0);

      // typeBound:
      // "extends" typeVariable=typeVariable | "extends" classOrInterfaceType=classOrInterfaceType
      // additionalBound+=additionalBound*;
      public ParserRule getRule() {
         return rule;
      }

      // "extends" typeVariable=typeVariable | "extends" classOrInterfaceType=classOrInterfaceType
      // additionalBound+=additionalBound*
      public Alternatives getAlternatives() {
         return cAlternatives;
      }

      // "extends" typeVariable=typeVariable
      public Group getGroup_0() {
         return cGroup_0;
      }

      // "extends"
      public Keyword getExtendsKeyword_0_0() {
         return cExtendsKeyword_0_0;
      }

      // typeVariable=typeVariable
      public Assignment getTypeVariableAssignment_0_1() {
         return cTypeVariableAssignment_0_1;
      }

      // typeVariable
      public RuleCall getTypeVariableTypeVariableParserRuleCall_0_1_0() {
         return cTypeVariableTypeVariableParserRuleCall_0_1_0;
      }

      // "extends" classOrInterfaceType=classOrInterfaceType additionalBound+=additionalBound*
      public Group getGroup_1() {
         return cGroup_1;
      }

      // "extends"
      public Keyword getExtendsKeyword_1_0() {
         return cExtendsKeyword_1_0;
      }

      // classOrInterfaceType=classOrInterfaceType
      public Assignment getClassOrInterfaceTypeAssignment_1_1() {
         return cClassOrInterfaceTypeAssignment_1_1;
      }

      // classOrInterfaceType
      public RuleCall getClassOrInterfaceTypeClassOrInterfaceTypeParserRuleCall_1_1_0() {
         return cClassOrInterfaceTypeClassOrInterfaceTypeParserRuleCall_1_1_0;
      }

      // additionalBound+=additionalBound*
      public Assignment getAdditionalBoundAssignment_1_2() {
         return cAdditionalBoundAssignment_1_2;
      }

      // additionalBound
      public RuleCall getAdditionalBoundAdditionalBoundParserRuleCall_1_2_0() {
         return cAdditionalBoundAdditionalBoundParserRuleCall_1_2_0;
      }
   }

   public class AdditionalBoundElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "additionalBound");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Keyword cAmpersandKeyword_0 = (Keyword) cGroup.eContents().get(0);
      private final RuleCall cInterfaceTypeParserRuleCall_1 = (RuleCall) cGroup.eContents().get(1);

      // additionalBound:
      // "&" interfaceType;
      public ParserRule getRule() {
         return rule;
      }

      // "&" interfaceType
      public Group getGroup() {
         return cGroup;
      }

      // "&"
      public Keyword getAmpersandKeyword_0() {
         return cAmpersandKeyword_0;
      }

      // interfaceType
      public RuleCall getInterfaceTypeParserRuleCall_1() {
         return cInterfaceTypeParserRuleCall_1;
      }
   }

   public class TypeArgumentsElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "typeArguments");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Keyword cLessThanSignKeyword_0 = (Keyword) cGroup.eContents().get(0);
      private final RuleCall cTypeArgumentListParserRuleCall_1 = (RuleCall) cGroup.eContents().get(1);
      private final Keyword cGreaterThanSignKeyword_2 = (Keyword) cGroup.eContents().get(2);

      // typeArguments:
      // "<" typeArgumentList ">";
      public ParserRule getRule() {
         return rule;
      }

      // "<" typeArgumentList ">"
      public Group getGroup() {
         return cGroup;
      }

      // "<"
      public Keyword getLessThanSignKeyword_0() {
         return cLessThanSignKeyword_0;
      }

      // typeArgumentList
      public RuleCall getTypeArgumentListParserRuleCall_1() {
         return cTypeArgumentListParserRuleCall_1;
      }

      // ">"
      public Keyword getGreaterThanSignKeyword_2() {
         return cGreaterThanSignKeyword_2;
      }
   }

   public class TypeArgumentListElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "typeArgumentList");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Assignment cTypeArgumentsAssignment_0 = (Assignment) cGroup.eContents().get(0);
      private final RuleCall cTypeArgumentsTypeArgumentParserRuleCall_0_0 = (RuleCall) cTypeArgumentsAssignment_0.eContents()
         .get(0);
      private final Group cGroup_1 = (Group) cGroup.eContents().get(1);
      private final Keyword cCommaKeyword_1_0 = (Keyword) cGroup_1.eContents().get(0);
      private final Assignment cTypeArgumentsAssignment_1_1 = (Assignment) cGroup_1.eContents().get(1);
      private final RuleCall cTypeArgumentsTypeArgumentParserRuleCall_1_1_0 = (RuleCall) cTypeArgumentsAssignment_1_1.eContents()
         .get(0);

      // typeArgumentList:
      // typeArguments+=typeArgument ("," typeArguments+=typeArgument)*;
      public ParserRule getRule() {
         return rule;
      }

      // typeArguments+=typeArgument ("," typeArguments+=typeArgument)*
      public Group getGroup() {
         return cGroup;
      }

      // typeArguments+=typeArgument
      public Assignment getTypeArgumentsAssignment_0() {
         return cTypeArgumentsAssignment_0;
      }

      // typeArgument
      public RuleCall getTypeArgumentsTypeArgumentParserRuleCall_0_0() {
         return cTypeArgumentsTypeArgumentParserRuleCall_0_0;
      }

      // ("," typeArguments+=typeArgument)*
      public Group getGroup_1() {
         return cGroup_1;
      }

      // ","
      public Keyword getCommaKeyword_1_0() {
         return cCommaKeyword_1_0;
      }

      // typeArguments+=typeArgument
      public Assignment getTypeArgumentsAssignment_1_1() {
         return cTypeArgumentsAssignment_1_1;
      }

      // typeArgument
      public RuleCall getTypeArgumentsTypeArgumentParserRuleCall_1_1_0() {
         return cTypeArgumentsTypeArgumentParserRuleCall_1_1_0;
      }
   }

   public class TypeArgumentElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "typeArgument");
      private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
      private final RuleCall cReferenceTypeParserRuleCall_0 = (RuleCall) cAlternatives.eContents().get(0);
      private final RuleCall cWildcardParserRuleCall_1 = (RuleCall) cAlternatives.eContents().get(1);

      // typeArgument:
      // referenceType | wildcard;
      public ParserRule getRule() {
         return rule;
      }

      // referenceType | wildcard
      public Alternatives getAlternatives() {
         return cAlternatives;
      }

      // referenceType
      public RuleCall getReferenceTypeParserRuleCall_0() {
         return cReferenceTypeParserRuleCall_0;
      }

      // wildcard
      public RuleCall getWildcardParserRuleCall_1() {
         return cWildcardParserRuleCall_1;
      }
   }

   public class WildcardElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "wildcard");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Action cWildcardAction_0 = (Action) cGroup.eContents().get(0);
      private final Assignment cAnnotationsAssignment_1 = (Assignment) cGroup.eContents().get(1);
      private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall) cAnnotationsAssignment_1.eContents()
         .get(0);
      private final Keyword cQuestionMarkKeyword_2 = (Keyword) cGroup.eContents().get(2);
      private final Assignment cWildcardBoundsAssignment_3 = (Assignment) cGroup.eContents().get(3);
      private final RuleCall cWildcardBoundsWildcardBoundsParserRuleCall_3_0 = (RuleCall) cWildcardBoundsAssignment_3.eContents()
         .get(0);

      // wildcard:
      // {wildcard} annotations+=annotation* "?" wildcardBounds=wildcardBounds?;
      public ParserRule getRule() {
         return rule;
      }

      // {wildcard} annotations+=annotation* "?" wildcardBounds=wildcardBounds?
      public Group getGroup() {
         return cGroup;
      }

      // {wildcard}
      public Action getWildcardAction_0() {
         return cWildcardAction_0;
      }

      // annotations+=annotation*
      public Assignment getAnnotationsAssignment_1() {
         return cAnnotationsAssignment_1;
      }

      // annotation
      public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() {
         return cAnnotationsAnnotationParserRuleCall_1_0;
      }

      // "?"
      public Keyword getQuestionMarkKeyword_2() {
         return cQuestionMarkKeyword_2;
      }

      // wildcardBounds=wildcardBounds?
      public Assignment getWildcardBoundsAssignment_3() {
         return cWildcardBoundsAssignment_3;
      }

      // wildcardBounds
      public RuleCall getWildcardBoundsWildcardBoundsParserRuleCall_3_0() {
         return cWildcardBoundsWildcardBoundsParserRuleCall_3_0;
      }
   }

   public class WildcardBoundsElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "wildcardBounds");
      private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
      private final Group cGroup_0 = (Group) cAlternatives.eContents().get(0);
      private final Keyword cExtendsKeyword_0_0 = (Keyword) cGroup_0.eContents().get(0);
      private final RuleCall cReferenceTypeParserRuleCall_0_1 = (RuleCall) cGroup_0.eContents().get(1);
      private final Group cGroup_1 = (Group) cAlternatives.eContents().get(1);
      private final Keyword cSuperKeyword_1_0 = (Keyword) cGroup_1.eContents().get(0);
      private final RuleCall cReferenceTypeParserRuleCall_1_1 = (RuleCall) cGroup_1.eContents().get(1);

      // wildcardBounds:
      // "extends" referenceType | "super" referenceType;
      public ParserRule getRule() {
         return rule;
      }

      // "extends" referenceType | "super" referenceType
      public Alternatives getAlternatives() {
         return cAlternatives;
      }

      // "extends" referenceType
      public Group getGroup_0() {
         return cGroup_0;
      }

      // "extends"
      public Keyword getExtendsKeyword_0_0() {
         return cExtendsKeyword_0_0;
      }

      // referenceType
      public RuleCall getReferenceTypeParserRuleCall_0_1() {
         return cReferenceTypeParserRuleCall_0_1;
      }

      // "super" referenceType
      public Group getGroup_1() {
         return cGroup_1;
      }

      // "super"
      public Keyword getSuperKeyword_1_0() {
         return cSuperKeyword_1_0;
      }

      // referenceType
      public RuleCall getReferenceTypeParserRuleCall_1_1() {
         return cReferenceTypeParserRuleCall_1_1;
      }
   }

   public class PackageNameElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "packageName");
      private final RuleCall cQualifiedNameParserRuleCall = (RuleCall) rule.eContents().get(1);

      // / *
      // * Productions from §6 (Names)
      // * / packageName:
      // qualifiedName;
      public ParserRule getRule() {
         return rule;
      }

      // qualifiedName
      public RuleCall getQualifiedNameParserRuleCall() {
         return cQualifiedNameParserRuleCall;
      }
   }

   public class TypeNameElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "typeName");
      private final RuleCall cQualifiedNameParserRuleCall = (RuleCall) rule.eContents().get(1);

      // typeName:
      // qualifiedName;
      public ParserRule getRule() {
         return rule;
      }

      // qualifiedName
      public RuleCall getQualifiedNameParserRuleCall() {
         return cQualifiedNameParserRuleCall;
      }
   }

   public class PackageOrTypeNameElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "packageOrTypeName");
      private final RuleCall cQualifiedNameParserRuleCall = (RuleCall) rule.eContents().get(1);

      // packageOrTypeName:
      // qualifiedName;
      public ParserRule getRule() {
         return rule;
      }

      // qualifiedName
      public RuleCall getQualifiedNameParserRuleCall() {
         return cQualifiedNameParserRuleCall;
      }
   }

   public class ExpressionNameElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "expressionName");
      private final RuleCall cQualifiedNameParserRuleCall = (RuleCall) rule.eContents().get(1);

      // expressionName:
      // qualifiedName;
      public ParserRule getRule() {
         return rule;
      }

      // qualifiedName
      public RuleCall getQualifiedNameParserRuleCall() {
         return cQualifiedNameParserRuleCall;
      }
   }

   public class MethodNameElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "methodName");
      private final RuleCall cIdentifierTerminalRuleCall = (RuleCall) rule.eContents().get(1);

      // methodName:
      // Identifier;
      public ParserRule getRule() {
         return rule;
      }

      // Identifier
      public RuleCall getIdentifierTerminalRuleCall() {
         return cIdentifierTerminalRuleCall;
      }
   }

   public class AmbiguousNameElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ambiguousName");
      private final RuleCall cQualifiedNameParserRuleCall = (RuleCall) rule.eContents().get(1);

      // ambiguousName:
      // qualifiedName;
      public ParserRule getRule() {
         return rule;
      }

      // qualifiedName
      public RuleCall getQualifiedNameParserRuleCall() {
         return cQualifiedNameParserRuleCall;
      }
   }

   public class QualifiedNameElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "qualifiedName");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final RuleCall cIdentifierTerminalRuleCall_0 = (RuleCall) cGroup.eContents().get(0);
      private final Group cGroup_1 = (Group) cGroup.eContents().get(1);
      private final Keyword cFullStopKeyword_1_0 = (Keyword) cGroup_1.eContents().get(0);
      private final RuleCall cIdentifierTerminalRuleCall_1_1 = (RuleCall) cGroup_1.eContents().get(1);

      // qualifiedName:
      // Identifier ("." Identifier)*;
      public ParserRule getRule() {
         return rule;
      }

      // Identifier ("." Identifier)*
      public Group getGroup() {
         return cGroup;
      }

      // Identifier
      public RuleCall getIdentifierTerminalRuleCall_0() {
         return cIdentifierTerminalRuleCall_0;
      }

      // ("." Identifier)*
      public Group getGroup_1() {
         return cGroup_1;
      }

      // "."
      public Keyword getFullStopKeyword_1_0() {
         return cFullStopKeyword_1_0;
      }

      // Identifier
      public RuleCall getIdentifierTerminalRuleCall_1_1() {
         return cIdentifierTerminalRuleCall_1_1;
      }
   }

   public class CompilationUnitElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilationUnit");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Action cCompilationUnitAction_0 = (Action) cGroup.eContents().get(0);
      private final Assignment cPackageAssignment_1 = (Assignment) cGroup.eContents().get(1);
      private final RuleCall cPackagePackageDeclarationParserRuleCall_1_0 = (RuleCall) cPackageAssignment_1.eContents()
         .get(0);
      private final Assignment cImportsAssignment_2 = (Assignment) cGroup.eContents().get(2);
      private final RuleCall cImportsImportDeclarationParserRuleCall_2_0 = (RuleCall) cImportsAssignment_2.eContents()
         .get(0);
      private final Assignment cTypesAssignment_3 = (Assignment) cGroup.eContents().get(3);
      private final RuleCall cTypesTypeDeclarationParserRuleCall_3_0 = (RuleCall) cTypesAssignment_3.eContents().get(0);

      // / *
      // * Productions from §7 (Packages)
      // * / compilationUnit:
      // {compilationUnit} package=packageDeclaration? imports+=importDeclaration* types+=typeDeclaration*;
      public ParserRule getRule() {
         return rule;
      }

      // {compilationUnit} package=packageDeclaration? imports+=importDeclaration* types+=typeDeclaration*
      public Group getGroup() {
         return cGroup;
      }

      // {compilationUnit}
      public Action getCompilationUnitAction_0() {
         return cCompilationUnitAction_0;
      }

      // package=packageDeclaration?
      public Assignment getPackageAssignment_1() {
         return cPackageAssignment_1;
      }

      // packageDeclaration
      public RuleCall getPackagePackageDeclarationParserRuleCall_1_0() {
         return cPackagePackageDeclarationParserRuleCall_1_0;
      }

      // imports+=importDeclaration*
      public Assignment getImportsAssignment_2() {
         return cImportsAssignment_2;
      }

      // importDeclaration
      public RuleCall getImportsImportDeclarationParserRuleCall_2_0() {
         return cImportsImportDeclarationParserRuleCall_2_0;
      }

      // types+=typeDeclaration*
      public Assignment getTypesAssignment_3() {
         return cTypesAssignment_3;
      }

      // typeDeclaration
      public RuleCall getTypesTypeDeclarationParserRuleCall_3_0() {
         return cTypesTypeDeclarationParserRuleCall_3_0;
      }
   }

   public class PackageDeclarationElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "packageDeclaration");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Assignment cModifiersAssignment_0 = (Assignment) cGroup.eContents().get(0);
      private final RuleCall cModifiersPackageModifierParserRuleCall_0_0 = (RuleCall) cModifiersAssignment_0.eContents()
         .get(0);
      private final Keyword cPackageKeyword_1 = (Keyword) cGroup.eContents().get(1);
      private final Assignment cNameAssignment_2 = (Assignment) cGroup.eContents().get(2);
      private final RuleCall cNamePackageNameParserRuleCall_2_0 = (RuleCall) cNameAssignment_2.eContents().get(0);
      private final Keyword cSemicolonKeyword_3 = (Keyword) cGroup.eContents().get(3);

      // packageDeclaration:
      // modifiers+=packageModifier* "package" name=packageName ";";
      public ParserRule getRule() {
         return rule;
      }

      // modifiers+=packageModifier* "package" name=packageName ";"
      public Group getGroup() {
         return cGroup;
      }

      // modifiers+=packageModifier*
      public Assignment getModifiersAssignment_0() {
         return cModifiersAssignment_0;
      }

      // packageModifier
      public RuleCall getModifiersPackageModifierParserRuleCall_0_0() {
         return cModifiersPackageModifierParserRuleCall_0_0;
      }

      // "package"
      public Keyword getPackageKeyword_1() {
         return cPackageKeyword_1;
      }

      // name=packageName
      public Assignment getNameAssignment_2() {
         return cNameAssignment_2;
      }

      // packageName
      public RuleCall getNamePackageNameParserRuleCall_2_0() {
         return cNamePackageNameParserRuleCall_2_0;
      }

      // ";"
      public Keyword getSemicolonKeyword_3() {
         return cSemicolonKeyword_3;
      }
   }

   public class PackageModifierElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "packageModifier");
      private final RuleCall cAnnotationParserRuleCall = (RuleCall) rule.eContents().get(1);

      // packageModifier:
      // annotation;
      public ParserRule getRule() {
         return rule;
      }

      // annotation
      public RuleCall getAnnotationParserRuleCall() {
         return cAnnotationParserRuleCall;
      }
   }

   public class ImportDeclarationElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "importDeclaration");
      private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
      private final RuleCall cSingleTypeImportDeclarationParserRuleCall_0 = (RuleCall) cAlternatives.eContents().get(0);
      private final RuleCall cTypeImportOnDemandDeclarationParserRuleCall_1 = (RuleCall) cAlternatives.eContents().get(
         1);
      private final RuleCall cSingleStaticImportDeclarationParserRuleCall_2 = (RuleCall) cAlternatives.eContents().get(
         2);
      private final RuleCall cStaticImportOnDemandDeclarationParserRuleCall_3 = (RuleCall) cAlternatives.eContents()
         .get(3);

      // importDeclaration:
      // singleTypeImportDeclaration | typeImportOnDemandDeclaration | singleStaticImportDeclaration |
      // staticImportOnDemandDeclaration;
      public ParserRule getRule() {
         return rule;
      }

      // singleTypeImportDeclaration | typeImportOnDemandDeclaration | singleStaticImportDeclaration |
      // staticImportOnDemandDeclaration
      public Alternatives getAlternatives() {
         return cAlternatives;
      }

      // singleTypeImportDeclaration
      public RuleCall getSingleTypeImportDeclarationParserRuleCall_0() {
         return cSingleTypeImportDeclarationParserRuleCall_0;
      }

      // typeImportOnDemandDeclaration
      public RuleCall getTypeImportOnDemandDeclarationParserRuleCall_1() {
         return cTypeImportOnDemandDeclarationParserRuleCall_1;
      }

      // singleStaticImportDeclaration
      public RuleCall getSingleStaticImportDeclarationParserRuleCall_2() {
         return cSingleStaticImportDeclarationParserRuleCall_2;
      }

      // staticImportOnDemandDeclaration
      public RuleCall getStaticImportOnDemandDeclarationParserRuleCall_3() {
         return cStaticImportOnDemandDeclarationParserRuleCall_3;
      }
   }

   public class SingleTypeImportDeclarationElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(),
         "singleTypeImportDeclaration");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Keyword cImportKeyword_0 = (Keyword) cGroup.eContents().get(0);
      private final Assignment cNameAssignment_1 = (Assignment) cGroup.eContents().get(1);
      private final RuleCall cNameTypeNameParserRuleCall_1_0 = (RuleCall) cNameAssignment_1.eContents().get(0);
      private final Keyword cSemicolonKeyword_2 = (Keyword) cGroup.eContents().get(2);

      // singleTypeImportDeclaration:
      // "import" name=typeName ";";
      public ParserRule getRule() {
         return rule;
      }

      // "import" name=typeName ";"
      public Group getGroup() {
         return cGroup;
      }

      // "import"
      public Keyword getImportKeyword_0() {
         return cImportKeyword_0;
      }

      // name=typeName
      public Assignment getNameAssignment_1() {
         return cNameAssignment_1;
      }

      // typeName
      public RuleCall getNameTypeNameParserRuleCall_1_0() {
         return cNameTypeNameParserRuleCall_1_0;
      }

      // ";"
      public Keyword getSemicolonKeyword_2() {
         return cSemicolonKeyword_2;
      }
   }

   public class TypeImportOnDemandDeclarationElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(),
         "typeImportOnDemandDeclaration");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Keyword cImportKeyword_0 = (Keyword) cGroup.eContents().get(0);
      private final Assignment cNameAssignment_1 = (Assignment) cGroup.eContents().get(1);
      private final RuleCall cNamePackageOrTypeNameParserRuleCall_1_0 = (RuleCall) cNameAssignment_1.eContents().get(0);
      private final Keyword cFullStopKeyword_2 = (Keyword) cGroup.eContents().get(2);
      private final Keyword cAsteriskKeyword_3 = (Keyword) cGroup.eContents().get(3);
      private final Keyword cSemicolonKeyword_4 = (Keyword) cGroup.eContents().get(4);

      // typeImportOnDemandDeclaration:
      // "import" name=packageOrTypeName "." "*" ";";
      public ParserRule getRule() {
         return rule;
      }

      // "import" name=packageOrTypeName "." "*" ";"
      public Group getGroup() {
         return cGroup;
      }

      // "import"
      public Keyword getImportKeyword_0() {
         return cImportKeyword_0;
      }

      // name=packageOrTypeName
      public Assignment getNameAssignment_1() {
         return cNameAssignment_1;
      }

      // packageOrTypeName
      public RuleCall getNamePackageOrTypeNameParserRuleCall_1_0() {
         return cNamePackageOrTypeNameParserRuleCall_1_0;
      }

      // "."
      public Keyword getFullStopKeyword_2() {
         return cFullStopKeyword_2;
      }

      // "*"
      public Keyword getAsteriskKeyword_3() {
         return cAsteriskKeyword_3;
      }

      // ";"
      public Keyword getSemicolonKeyword_4() {
         return cSemicolonKeyword_4;
      }
   }

   public class SingleStaticImportDeclarationElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(),
         "singleStaticImportDeclaration");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Keyword cImportKeyword_0 = (Keyword) cGroup.eContents().get(0);
      private final Keyword cStaticKeyword_1 = (Keyword) cGroup.eContents().get(1);
      private final Assignment cNameAssignment_2 = (Assignment) cGroup.eContents().get(2);
      private final RuleCall cNameTypeNameParserRuleCall_2_0 = (RuleCall) cNameAssignment_2.eContents().get(0);
      private final Keyword cSemicolonKeyword_3 = (Keyword) cGroup.eContents().get(3);

      // singleStaticImportDeclaration:
      // "import" "static" name=typeName ";";
      public ParserRule getRule() {
         return rule;
      }

      // "import" "static" name=typeName ";"
      public Group getGroup() {
         return cGroup;
      }

      // "import"
      public Keyword getImportKeyword_0() {
         return cImportKeyword_0;
      }

      // "static"
      public Keyword getStaticKeyword_1() {
         return cStaticKeyword_1;
      }

      // name=typeName
      public Assignment getNameAssignment_2() {
         return cNameAssignment_2;
      }

      // typeName
      public RuleCall getNameTypeNameParserRuleCall_2_0() {
         return cNameTypeNameParserRuleCall_2_0;
      }

      // ";"
      public Keyword getSemicolonKeyword_3() {
         return cSemicolonKeyword_3;
      }
   }

   public class StaticImportOnDemandDeclarationElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(),
         "staticImportOnDemandDeclaration");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Keyword cImportKeyword_0 = (Keyword) cGroup.eContents().get(0);
      private final Keyword cStaticKeyword_1 = (Keyword) cGroup.eContents().get(1);
      private final Assignment cNameAssignment_2 = (Assignment) cGroup.eContents().get(2);
      private final RuleCall cNameTypeNameParserRuleCall_2_0 = (RuleCall) cNameAssignment_2.eContents().get(0);
      private final Keyword cFullStopKeyword_3 = (Keyword) cGroup.eContents().get(3);
      private final Keyword cAsteriskKeyword_4 = (Keyword) cGroup.eContents().get(4);
      private final Keyword cSemicolonKeyword_5 = (Keyword) cGroup.eContents().get(5);

      // staticImportOnDemandDeclaration:
      // "import" "static" name=typeName "." "*" ";";
      public ParserRule getRule() {
         return rule;
      }

      // "import" "static" name=typeName "." "*" ";"
      public Group getGroup() {
         return cGroup;
      }

      // "import"
      public Keyword getImportKeyword_0() {
         return cImportKeyword_0;
      }

      // "static"
      public Keyword getStaticKeyword_1() {
         return cStaticKeyword_1;
      }

      // name=typeName
      public Assignment getNameAssignment_2() {
         return cNameAssignment_2;
      }

      // typeName
      public RuleCall getNameTypeNameParserRuleCall_2_0() {
         return cNameTypeNameParserRuleCall_2_0;
      }

      // "."
      public Keyword getFullStopKeyword_3() {
         return cFullStopKeyword_3;
      }

      // "*"
      public Keyword getAsteriskKeyword_4() {
         return cAsteriskKeyword_4;
      }

      // ";"
      public Keyword getSemicolonKeyword_5() {
         return cSemicolonKeyword_5;
      }
   }

   public class TypeDeclarationElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "typeDeclaration");
      private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
      private final RuleCall cClassDeclarationParserRuleCall_0 = (RuleCall) cAlternatives.eContents().get(0);
      private final RuleCall cInterfaceDeclarationParserRuleCall_1 = (RuleCall) cAlternatives.eContents().get(1);
      private final Group cGroup_2 = (Group) cAlternatives.eContents().get(2);
      private final Action cEmptyTypeDeclarationAction_2_0 = (Action) cGroup_2.eContents().get(0);
      private final Keyword cSemicolonKeyword_2_1 = (Keyword) cGroup_2.eContents().get(1);

      // typeDeclaration:
      // classDeclaration | interfaceDeclaration | {EmptyTypeDeclaration} ";";
      public ParserRule getRule() {
         return rule;
      }

      // classDeclaration | interfaceDeclaration | {EmptyTypeDeclaration} ";"
      public Alternatives getAlternatives() {
         return cAlternatives;
      }

      // classDeclaration
      public RuleCall getClassDeclarationParserRuleCall_0() {
         return cClassDeclarationParserRuleCall_0;
      }

      // interfaceDeclaration
      public RuleCall getInterfaceDeclarationParserRuleCall_1() {
         return cInterfaceDeclarationParserRuleCall_1;
      }

      // {EmptyTypeDeclaration} ";"
      public Group getGroup_2() {
         return cGroup_2;
      }

      // {EmptyTypeDeclaration}
      public Action getEmptyTypeDeclarationAction_2_0() {
         return cEmptyTypeDeclarationAction_2_0;
      }

      // ";"
      public Keyword getSemicolonKeyword_2_1() {
         return cSemicolonKeyword_2_1;
      }
   }

   public class ClassDeclarationElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "classDeclaration");
      private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
      private final RuleCall cNormalClassDeclarationParserRuleCall_0 = (RuleCall) cAlternatives.eContents().get(0);
      private final RuleCall cEnumDeclarationParserRuleCall_1 = (RuleCall) cAlternatives.eContents().get(1);

      // / *
      // * Productions from §8 (Classes)
      // * / classDeclaration:
      // normalClassDeclaration | enumDeclaration;
      public ParserRule getRule() {
         return rule;
      }

      // normalClassDeclaration | enumDeclaration
      public Alternatives getAlternatives() {
         return cAlternatives;
      }

      // normalClassDeclaration
      public RuleCall getNormalClassDeclarationParserRuleCall_0() {
         return cNormalClassDeclarationParserRuleCall_0;
      }

      // enumDeclaration
      public RuleCall getEnumDeclarationParserRuleCall_1() {
         return cEnumDeclarationParserRuleCall_1;
      }
   }

   public class NormalClassDeclarationElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "normalClassDeclaration");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Assignment cModifiersAssignment_0 = (Assignment) cGroup.eContents().get(0);
      private final RuleCall cModifiersClassModifierParserRuleCall_0_0 = (RuleCall) cModifiersAssignment_0.eContents()
         .get(0);
      private final Keyword cClassKeyword_1 = (Keyword) cGroup.eContents().get(1);
      private final Assignment cNameAssignment_2 = (Assignment) cGroup.eContents().get(2);
      private final RuleCall cNameIdentifierTerminalRuleCall_2_0 = (RuleCall) cNameAssignment_2.eContents().get(0);
      private final Assignment cTypeParametersAssignment_3 = (Assignment) cGroup.eContents().get(3);
      private final RuleCall cTypeParametersTypeParametersParserRuleCall_3_0 = (RuleCall) cTypeParametersAssignment_3.eContents()
         .get(0);
      private final Assignment cSuperclassAssignment_4 = (Assignment) cGroup.eContents().get(4);
      private final RuleCall cSuperclassSuperclassParserRuleCall_4_0 = (RuleCall) cSuperclassAssignment_4.eContents()
         .get(0);
      private final Assignment cSuperinterfacesAssignment_5 = (Assignment) cGroup.eContents().get(5);
      private final RuleCall cSuperinterfacesSuperinterfacesParserRuleCall_5_0 = (RuleCall) cSuperinterfacesAssignment_5.eContents()
         .get(0);
      private final Assignment cClassBodyAssignment_6 = (Assignment) cGroup.eContents().get(6);
      private final RuleCall cClassBodyClassBodyParserRuleCall_6_0 = (RuleCall) cClassBodyAssignment_6.eContents().get(
         0);

      // normalClassDeclaration:
      // modifiers+=classModifier* "class" name=Identifier typeParameters=typeParameters? superclass=superclass?
      // superinterfaces=superinterfaces? classBody=classBody;
      public ParserRule getRule() {
         return rule;
      }

      // modifiers+=classModifier* "class" name=Identifier typeParameters=typeParameters? superclass=superclass?
      // superinterfaces=superinterfaces? classBody=classBody
      public Group getGroup() {
         return cGroup;
      }

      // modifiers+=classModifier*
      public Assignment getModifiersAssignment_0() {
         return cModifiersAssignment_0;
      }

      // classModifier
      public RuleCall getModifiersClassModifierParserRuleCall_0_0() {
         return cModifiersClassModifierParserRuleCall_0_0;
      }

      // "class"
      public Keyword getClassKeyword_1() {
         return cClassKeyword_1;
      }

      // name=Identifier
      public Assignment getNameAssignment_2() {
         return cNameAssignment_2;
      }

      // Identifier
      public RuleCall getNameIdentifierTerminalRuleCall_2_0() {
         return cNameIdentifierTerminalRuleCall_2_0;
      }

      // typeParameters=typeParameters?
      public Assignment getTypeParametersAssignment_3() {
         return cTypeParametersAssignment_3;
      }

      // typeParameters
      public RuleCall getTypeParametersTypeParametersParserRuleCall_3_0() {
         return cTypeParametersTypeParametersParserRuleCall_3_0;
      }

      // superclass=superclass?
      public Assignment getSuperclassAssignment_4() {
         return cSuperclassAssignment_4;
      }

      // superclass
      public RuleCall getSuperclassSuperclassParserRuleCall_4_0() {
         return cSuperclassSuperclassParserRuleCall_4_0;
      }

      // superinterfaces=superinterfaces?
      public Assignment getSuperinterfacesAssignment_5() {
         return cSuperinterfacesAssignment_5;
      }

      // superinterfaces
      public RuleCall getSuperinterfacesSuperinterfacesParserRuleCall_5_0() {
         return cSuperinterfacesSuperinterfacesParserRuleCall_5_0;
      }

      // classBody=classBody
      public Assignment getClassBodyAssignment_6() {
         return cClassBodyAssignment_6;
      }

      // classBody
      public RuleCall getClassBodyClassBodyParserRuleCall_6_0() {
         return cClassBodyClassBodyParserRuleCall_6_0;
      }
   }

   public class ClassModifierElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "classModifier");
      private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
      private final RuleCall cAnnotationParserRuleCall_0 = (RuleCall) cAlternatives.eContents().get(0);
      private final RuleCall cJavaClassModifierParserRuleCall_1 = (RuleCall) cAlternatives.eContents().get(1);

      // classModifier:
      // annotation | JavaClassModifier;
      public ParserRule getRule() {
         return rule;
      }

      // annotation | JavaClassModifier
      public Alternatives getAlternatives() {
         return cAlternatives;
      }

      // annotation
      public RuleCall getAnnotationParserRuleCall_0() {
         return cAnnotationParserRuleCall_0;
      }

      // JavaClassModifier
      public RuleCall getJavaClassModifierParserRuleCall_1() {
         return cJavaClassModifierParserRuleCall_1;
      }
   }

   public class JavaClassModifierElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JavaClassModifier");
      private final Assignment cModifierAssignment = (Assignment) rule.eContents().get(1);
      private final RuleCall cModifierClassModifiersEnumRuleCall_0 = (RuleCall) cModifierAssignment.eContents().get(0);

      // JavaClassModifier:
      // modifier=ClassModifiers;
      public ParserRule getRule() {
         return rule;
      }

      // modifier=ClassModifiers
      public Assignment getModifierAssignment() {
         return cModifierAssignment;
      }

      // ClassModifiers
      public RuleCall getModifierClassModifiersEnumRuleCall_0() {
         return cModifierClassModifiersEnumRuleCall_0;
      }
   }

   public class TypeParametersElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "typeParameters");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Keyword cLessThanSignKeyword_0 = (Keyword) cGroup.eContents().get(0);
      private final RuleCall cTypeParameterListParserRuleCall_1 = (RuleCall) cGroup.eContents().get(1);
      private final Keyword cGreaterThanSignKeyword_2 = (Keyword) cGroup.eContents().get(2);

      // typeParameters:
      // "<" typeParameterList ">";
      public ParserRule getRule() {
         return rule;
      }

      // "<" typeParameterList ">"
      public Group getGroup() {
         return cGroup;
      }

      // "<"
      public Keyword getLessThanSignKeyword_0() {
         return cLessThanSignKeyword_0;
      }

      // typeParameterList
      public RuleCall getTypeParameterListParserRuleCall_1() {
         return cTypeParameterListParserRuleCall_1;
      }

      // ">"
      public Keyword getGreaterThanSignKeyword_2() {
         return cGreaterThanSignKeyword_2;
      }
   }

   public class TypeParameterListElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "typeParameterList");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Assignment cTypeParametersAssignment_0 = (Assignment) cGroup.eContents().get(0);
      private final RuleCall cTypeParametersTypeParameterParserRuleCall_0_0 = (RuleCall) cTypeParametersAssignment_0.eContents()
         .get(0);
      private final Group cGroup_1 = (Group) cGroup.eContents().get(1);
      private final Keyword cCommaKeyword_1_0 = (Keyword) cGroup_1.eContents().get(0);
      private final Assignment cTypeParametersAssignment_1_1 = (Assignment) cGroup_1.eContents().get(1);
      private final RuleCall cTypeParametersTypeParameterParserRuleCall_1_1_0 = (RuleCall) cTypeParametersAssignment_1_1.eContents()
         .get(0);

      // typeParameterList:
      // typeParameters+=typeParameter ("," typeParameters+=typeParameter)*;
      public ParserRule getRule() {
         return rule;
      }

      // typeParameters+=typeParameter ("," typeParameters+=typeParameter)*
      public Group getGroup() {
         return cGroup;
      }

      // typeParameters+=typeParameter
      public Assignment getTypeParametersAssignment_0() {
         return cTypeParametersAssignment_0;
      }

      // typeParameter
      public RuleCall getTypeParametersTypeParameterParserRuleCall_0_0() {
         return cTypeParametersTypeParameterParserRuleCall_0_0;
      }

      // ("," typeParameters+=typeParameter)*
      public Group getGroup_1() {
         return cGroup_1;
      }

      // ","
      public Keyword getCommaKeyword_1_0() {
         return cCommaKeyword_1_0;
      }

      // typeParameters+=typeParameter
      public Assignment getTypeParametersAssignment_1_1() {
         return cTypeParametersAssignment_1_1;
      }

      // typeParameter
      public RuleCall getTypeParametersTypeParameterParserRuleCall_1_1_0() {
         return cTypeParametersTypeParameterParserRuleCall_1_1_0;
      }
   }

   public class SuperclassElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "superclass");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Keyword cExtendsKeyword_0 = (Keyword) cGroup.eContents().get(0);
      private final RuleCall cClassTypeParserRuleCall_1 = (RuleCall) cGroup.eContents().get(1);

      // superclass:
      // "extends" classType;
      public ParserRule getRule() {
         return rule;
      }

      // "extends" classType
      public Group getGroup() {
         return cGroup;
      }

      // "extends"
      public Keyword getExtendsKeyword_0() {
         return cExtendsKeyword_0;
      }

      // classType
      public RuleCall getClassTypeParserRuleCall_1() {
         return cClassTypeParserRuleCall_1;
      }
   }

   public class SuperinterfacesElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "superinterfaces");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Keyword cImplementsKeyword_0 = (Keyword) cGroup.eContents().get(0);
      private final RuleCall cInterfaceTypeListParserRuleCall_1 = (RuleCall) cGroup.eContents().get(1);

      // superinterfaces:
      // "implements" interfaceTypeList;
      public ParserRule getRule() {
         return rule;
      }

      // "implements" interfaceTypeList
      public Group getGroup() {
         return cGroup;
      }

      // "implements"
      public Keyword getImplementsKeyword_0() {
         return cImplementsKeyword_0;
      }

      // interfaceTypeList
      public RuleCall getInterfaceTypeListParserRuleCall_1() {
         return cInterfaceTypeListParserRuleCall_1;
      }
   }

   public class InterfaceTypeListElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "interfaceTypeList");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Assignment cInterfaceTypesAssignment_0 = (Assignment) cGroup.eContents().get(0);
      private final RuleCall cInterfaceTypesInterfaceTypeParserRuleCall_0_0 = (RuleCall) cInterfaceTypesAssignment_0.eContents()
         .get(0);
      private final Group cGroup_1 = (Group) cGroup.eContents().get(1);
      private final Keyword cCommaKeyword_1_0 = (Keyword) cGroup_1.eContents().get(0);
      private final Assignment cInterfaceTypesAssignment_1_1 = (Assignment) cGroup_1.eContents().get(1);
      private final RuleCall cInterfaceTypesInterfaceTypeParserRuleCall_1_1_0 = (RuleCall) cInterfaceTypesAssignment_1_1.eContents()
         .get(0);

      // interfaceTypeList:
      // interfaceTypes+=interfaceType ("," interfaceTypes+=interfaceType)*;
      public ParserRule getRule() {
         return rule;
      }

      // interfaceTypes+=interfaceType ("," interfaceTypes+=interfaceType)*
      public Group getGroup() {
         return cGroup;
      }

      // interfaceTypes+=interfaceType
      public Assignment getInterfaceTypesAssignment_0() {
         return cInterfaceTypesAssignment_0;
      }

      // interfaceType
      public RuleCall getInterfaceTypesInterfaceTypeParserRuleCall_0_0() {
         return cInterfaceTypesInterfaceTypeParserRuleCall_0_0;
      }

      // ("," interfaceTypes+=interfaceType)*
      public Group getGroup_1() {
         return cGroup_1;
      }

      // ","
      public Keyword getCommaKeyword_1_0() {
         return cCommaKeyword_1_0;
      }

      // interfaceTypes+=interfaceType
      public Assignment getInterfaceTypesAssignment_1_1() {
         return cInterfaceTypesAssignment_1_1;
      }

      // interfaceType
      public RuleCall getInterfaceTypesInterfaceTypeParserRuleCall_1_1_0() {
         return cInterfaceTypesInterfaceTypeParserRuleCall_1_1_0;
      }
   }

   public class ClassBodyElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "classBody");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Action cClassBodyAction_0 = (Action) cGroup.eContents().get(0);
      private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword) cGroup.eContents().get(1);
      private final Assignment cDeclarationsAssignment_2 = (Assignment) cGroup.eContents().get(2);
      private final RuleCall cDeclarationsClassBodyDeclarationParserRuleCall_2_0 = (RuleCall) cDeclarationsAssignment_2.eContents()
         .get(0);
      private final Keyword cRightCurlyBracketKeyword_3 = (Keyword) cGroup.eContents().get(3);

      // classBody:
      // {classBody} "{" declarations+=classBodyDeclaration* "}";
      public ParserRule getRule() {
         return rule;
      }

      // {classBody} "{" declarations+=classBodyDeclaration* "}"
      public Group getGroup() {
         return cGroup;
      }

      // {classBody}
      public Action getClassBodyAction_0() {
         return cClassBodyAction_0;
      }

      // "{"
      public Keyword getLeftCurlyBracketKeyword_1() {
         return cLeftCurlyBracketKeyword_1;
      }

      // declarations+=classBodyDeclaration*
      public Assignment getDeclarationsAssignment_2() {
         return cDeclarationsAssignment_2;
      }

      // classBodyDeclaration
      public RuleCall getDeclarationsClassBodyDeclarationParserRuleCall_2_0() {
         return cDeclarationsClassBodyDeclarationParserRuleCall_2_0;
      }

      // "}"
      public Keyword getRightCurlyBracketKeyword_3() {
         return cRightCurlyBracketKeyword_3;
      }
   }

   public class ClassBodyDeclarationElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "classBodyDeclaration");
      private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
      private final RuleCall cClassMemberDeclarationParserRuleCall_0 = (RuleCall) cAlternatives.eContents().get(0);
      private final RuleCall cInstanceInitializerParserRuleCall_1 = (RuleCall) cAlternatives.eContents().get(1);
      private final RuleCall cStaticInitializerParserRuleCall_2 = (RuleCall) cAlternatives.eContents().get(2);
      private final RuleCall cConstructorDeclarationParserRuleCall_3 = (RuleCall) cAlternatives.eContents().get(3);

      // classBodyDeclaration:
      // classMemberDeclaration | instanceInitializer | staticInitializer | constructorDeclaration;
      public ParserRule getRule() {
         return rule;
      }

      // classMemberDeclaration | instanceInitializer | staticInitializer | constructorDeclaration
      public Alternatives getAlternatives() {
         return cAlternatives;
      }

      // classMemberDeclaration
      public RuleCall getClassMemberDeclarationParserRuleCall_0() {
         return cClassMemberDeclarationParserRuleCall_0;
      }

      // instanceInitializer
      public RuleCall getInstanceInitializerParserRuleCall_1() {
         return cInstanceInitializerParserRuleCall_1;
      }

      // staticInitializer
      public RuleCall getStaticInitializerParserRuleCall_2() {
         return cStaticInitializerParserRuleCall_2;
      }

      // constructorDeclaration
      public RuleCall getConstructorDeclarationParserRuleCall_3() {
         return cConstructorDeclarationParserRuleCall_3;
      }
   }

   public class ClassMemberDeclarationElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "classMemberDeclaration");
      private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
      private final RuleCall cFieldDeclarationParserRuleCall_0 = (RuleCall) cAlternatives.eContents().get(0);
      private final RuleCall cMethodDeclarationParserRuleCall_1 = (RuleCall) cAlternatives.eContents().get(1);
      private final RuleCall cClassDeclarationParserRuleCall_2 = (RuleCall) cAlternatives.eContents().get(2);
      private final RuleCall cInterfaceDeclarationParserRuleCall_3 = (RuleCall) cAlternatives.eContents().get(3);
      private final Group cGroup_4 = (Group) cAlternatives.eContents().get(4);
      private final Action cEmptyClassMemberDeclarationAction_4_0 = (Action) cGroup_4.eContents().get(0);
      private final Keyword cSemicolonKeyword_4_1 = (Keyword) cGroup_4.eContents().get(1);

      // classMemberDeclaration:
      // fieldDeclaration | methodDeclaration | classDeclaration | interfaceDeclaration | {EmptyClassMemberDeclaration}
      // ";";
      public ParserRule getRule() {
         return rule;
      }

      // fieldDeclaration | methodDeclaration | classDeclaration | interfaceDeclaration | {EmptyClassMemberDeclaration}
      // ";"
      public Alternatives getAlternatives() {
         return cAlternatives;
      }

      // fieldDeclaration
      public RuleCall getFieldDeclarationParserRuleCall_0() {
         return cFieldDeclarationParserRuleCall_0;
      }

      // methodDeclaration
      public RuleCall getMethodDeclarationParserRuleCall_1() {
         return cMethodDeclarationParserRuleCall_1;
      }

      // classDeclaration
      public RuleCall getClassDeclarationParserRuleCall_2() {
         return cClassDeclarationParserRuleCall_2;
      }

      // interfaceDeclaration
      public RuleCall getInterfaceDeclarationParserRuleCall_3() {
         return cInterfaceDeclarationParserRuleCall_3;
      }

      // {EmptyClassMemberDeclaration} ";"
      public Group getGroup_4() {
         return cGroup_4;
      }

      // {EmptyClassMemberDeclaration}
      public Action getEmptyClassMemberDeclarationAction_4_0() {
         return cEmptyClassMemberDeclarationAction_4_0;
      }

      // ";"
      public Keyword getSemicolonKeyword_4_1() {
         return cSemicolonKeyword_4_1;
      }
   }

   public class FieldDeclarationElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fieldDeclaration");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Assignment cFieldModifiersAssignment_0 = (Assignment) cGroup.eContents().get(0);
      private final RuleCall cFieldModifiersFieldModifierParserRuleCall_0_0 = (RuleCall) cFieldModifiersAssignment_0.eContents()
         .get(0);
      private final Assignment cUnannTypeAssignment_1 = (Assignment) cGroup.eContents().get(1);
      private final RuleCall cUnannTypeUnannTypeParserRuleCall_1_0 = (RuleCall) cUnannTypeAssignment_1.eContents().get(
         0);
      private final Assignment cVariableDeclaratorListAssignment_2 = (Assignment) cGroup.eContents().get(2);
      private final RuleCall cVariableDeclaratorListVariableDeclaratorListParserRuleCall_2_0 = (RuleCall) cVariableDeclaratorListAssignment_2.eContents()
         .get(0);
      private final Keyword cSemicolonKeyword_3 = (Keyword) cGroup.eContents().get(3);

      // fieldDeclaration:
      // fieldModifiers+=fieldModifier* unannType=unannType variableDeclaratorList=variableDeclaratorList ";";
      public ParserRule getRule() {
         return rule;
      }

      // fieldModifiers+=fieldModifier* unannType=unannType variableDeclaratorList=variableDeclaratorList ";"
      public Group getGroup() {
         return cGroup;
      }

      // fieldModifiers+=fieldModifier*
      public Assignment getFieldModifiersAssignment_0() {
         return cFieldModifiersAssignment_0;
      }

      // fieldModifier
      public RuleCall getFieldModifiersFieldModifierParserRuleCall_0_0() {
         return cFieldModifiersFieldModifierParserRuleCall_0_0;
      }

      // unannType=unannType
      public Assignment getUnannTypeAssignment_1() {
         return cUnannTypeAssignment_1;
      }

      // unannType
      public RuleCall getUnannTypeUnannTypeParserRuleCall_1_0() {
         return cUnannTypeUnannTypeParserRuleCall_1_0;
      }

      // variableDeclaratorList=variableDeclaratorList
      public Assignment getVariableDeclaratorListAssignment_2() {
         return cVariableDeclaratorListAssignment_2;
      }

      // variableDeclaratorList
      public RuleCall getVariableDeclaratorListVariableDeclaratorListParserRuleCall_2_0() {
         return cVariableDeclaratorListVariableDeclaratorListParserRuleCall_2_0;
      }

      // ";"
      public Keyword getSemicolonKeyword_3() {
         return cSemicolonKeyword_3;
      }
   }

   public class FieldModifierElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fieldModifier");
      private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
      private final RuleCall cAnnotationParserRuleCall_0 = (RuleCall) cAlternatives.eContents().get(0);
      private final RuleCall cJavaFieldModifierParserRuleCall_1 = (RuleCall) cAlternatives.eContents().get(1);

      // fieldModifier:
      // annotation | JavaFieldModifier;
      public ParserRule getRule() {
         return rule;
      }

      // annotation | JavaFieldModifier
      public Alternatives getAlternatives() {
         return cAlternatives;
      }

      // annotation
      public RuleCall getAnnotationParserRuleCall_0() {
         return cAnnotationParserRuleCall_0;
      }

      // JavaFieldModifier
      public RuleCall getJavaFieldModifierParserRuleCall_1() {
         return cJavaFieldModifierParserRuleCall_1;
      }
   }

   public class JavaFieldModifierElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JavaFieldModifier");
      private final Assignment cModifierAssignment = (Assignment) rule.eContents().get(1);
      private final RuleCall cModifierFieldModifiersEnumRuleCall_0 = (RuleCall) cModifierAssignment.eContents().get(0);

      // JavaFieldModifier:
      // modifier=FieldModifiers;
      public ParserRule getRule() {
         return rule;
      }

      // modifier=FieldModifiers
      public Assignment getModifierAssignment() {
         return cModifierAssignment;
      }

      // FieldModifiers
      public RuleCall getModifierFieldModifiersEnumRuleCall_0() {
         return cModifierFieldModifiersEnumRuleCall_0;
      }
   }

   public class VariableDeclaratorListElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "variableDeclaratorList");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Assignment cVariableDeclaratorsAssignment_0 = (Assignment) cGroup.eContents().get(0);
      private final RuleCall cVariableDeclaratorsVariableDeclaratorParserRuleCall_0_0 = (RuleCall) cVariableDeclaratorsAssignment_0.eContents()
         .get(0);
      private final Group cGroup_1 = (Group) cGroup.eContents().get(1);
      private final Keyword cCommaKeyword_1_0 = (Keyword) cGroup_1.eContents().get(0);
      private final Assignment cVariableDeclaratorsAssignment_1_1 = (Assignment) cGroup_1.eContents().get(1);
      private final RuleCall cVariableDeclaratorsVariableDeclaratorParserRuleCall_1_1_0 = (RuleCall) cVariableDeclaratorsAssignment_1_1.eContents()
         .get(0);

      // variableDeclaratorList:
      // variableDeclarators+=variableDeclarator ("," variableDeclarators+=variableDeclarator)*;
      public ParserRule getRule() {
         return rule;
      }

      // variableDeclarators+=variableDeclarator ("," variableDeclarators+=variableDeclarator)*
      public Group getGroup() {
         return cGroup;
      }

      // variableDeclarators+=variableDeclarator
      public Assignment getVariableDeclaratorsAssignment_0() {
         return cVariableDeclaratorsAssignment_0;
      }

      // variableDeclarator
      public RuleCall getVariableDeclaratorsVariableDeclaratorParserRuleCall_0_0() {
         return cVariableDeclaratorsVariableDeclaratorParserRuleCall_0_0;
      }

      // ("," variableDeclarators+=variableDeclarator)*
      public Group getGroup_1() {
         return cGroup_1;
      }

      // ","
      public Keyword getCommaKeyword_1_0() {
         return cCommaKeyword_1_0;
      }

      // variableDeclarators+=variableDeclarator
      public Assignment getVariableDeclaratorsAssignment_1_1() {
         return cVariableDeclaratorsAssignment_1_1;
      }

      // variableDeclarator
      public RuleCall getVariableDeclaratorsVariableDeclaratorParserRuleCall_1_1_0() {
         return cVariableDeclaratorsVariableDeclaratorParserRuleCall_1_1_0;
      }
   }

   public class VariableDeclaratorElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "variableDeclarator");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Assignment cIdAssignment_0 = (Assignment) cGroup.eContents().get(0);
      private final RuleCall cIdVariableDeclaratorIdParserRuleCall_0_0 = (RuleCall) cIdAssignment_0.eContents().get(0);
      private final Group cGroup_1 = (Group) cGroup.eContents().get(1);
      private final Keyword cEqualsSignKeyword_1_0 = (Keyword) cGroup_1.eContents().get(0);
      private final Assignment cInitializerAssignment_1_1 = (Assignment) cGroup_1.eContents().get(1);
      private final RuleCall cInitializerVariableInitializerParserRuleCall_1_1_0 = (RuleCall) cInitializerAssignment_1_1.eContents()
         .get(0);

      // variableDeclarator:
      // id=variableDeclaratorId ("=" initializer=variableInitializer)?;
      public ParserRule getRule() {
         return rule;
      }

      // id=variableDeclaratorId ("=" initializer=variableInitializer)?
      public Group getGroup() {
         return cGroup;
      }

      // id=variableDeclaratorId
      public Assignment getIdAssignment_0() {
         return cIdAssignment_0;
      }

      // variableDeclaratorId
      public RuleCall getIdVariableDeclaratorIdParserRuleCall_0_0() {
         return cIdVariableDeclaratorIdParserRuleCall_0_0;
      }

      // ("=" initializer=variableInitializer)?
      public Group getGroup_1() {
         return cGroup_1;
      }

      // "="
      public Keyword getEqualsSignKeyword_1_0() {
         return cEqualsSignKeyword_1_0;
      }

      // initializer=variableInitializer
      public Assignment getInitializerAssignment_1_1() {
         return cInitializerAssignment_1_1;
      }

      // variableInitializer
      public RuleCall getInitializerVariableInitializerParserRuleCall_1_1_0() {
         return cInitializerVariableInitializerParserRuleCall_1_1_0;
      }
   }

   public class VariableDeclaratorIdElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "variableDeclaratorId");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Assignment cIdAssignment_0 = (Assignment) cGroup.eContents().get(0);
      private final RuleCall cIdIdentifierTerminalRuleCall_0_0 = (RuleCall) cIdAssignment_0.eContents().get(0);
      private final Assignment cDimsAssignment_1 = (Assignment) cGroup.eContents().get(1);
      private final RuleCall cDimsDimsParserRuleCall_1_0 = (RuleCall) cDimsAssignment_1.eContents().get(0);

      // variableDeclaratorId:
      // id=Identifier dims=dims?;
      public ParserRule getRule() {
         return rule;
      }

      // id=Identifier dims=dims?
      public Group getGroup() {
         return cGroup;
      }

      // id=Identifier
      public Assignment getIdAssignment_0() {
         return cIdAssignment_0;
      }

      // Identifier
      public RuleCall getIdIdentifierTerminalRuleCall_0_0() {
         return cIdIdentifierTerminalRuleCall_0_0;
      }

      // dims=dims?
      public Assignment getDimsAssignment_1() {
         return cDimsAssignment_1;
      }

      // dims
      public RuleCall getDimsDimsParserRuleCall_1_0() {
         return cDimsDimsParserRuleCall_1_0;
      }
   }

   public class VariableInitializerElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "variableInitializer");
      private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
      private final RuleCall cExpressionParserRuleCall_0 = (RuleCall) cAlternatives.eContents().get(0);
      private final RuleCall cArrayInitializerParserRuleCall_1 = (RuleCall) cAlternatives.eContents().get(1);

      // variableInitializer:
      // expression | arrayInitializer;
      public ParserRule getRule() {
         return rule;
      }

      // expression | arrayInitializer
      public Alternatives getAlternatives() {
         return cAlternatives;
      }

      // expression
      public RuleCall getExpressionParserRuleCall_0() {
         return cExpressionParserRuleCall_0;
      }

      // arrayInitializer
      public RuleCall getArrayInitializerParserRuleCall_1() {
         return cArrayInitializerParserRuleCall_1;
      }
   }

   public class UnannTypeElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "unannType");
      private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
      private final RuleCall cUnannPrimitiveTypeParserRuleCall_0 = (RuleCall) cAlternatives.eContents().get(0);
      private final RuleCall cUnannReferenceTypeParserRuleCall_1 = (RuleCall) cAlternatives.eContents().get(1);

      // unannType:
      // unannPrimitiveType | unannReferenceType;
      public ParserRule getRule() {
         return rule;
      }

      // unannPrimitiveType | unannReferenceType
      public Alternatives getAlternatives() {
         return cAlternatives;
      }

      // unannPrimitiveType
      public RuleCall getUnannPrimitiveTypeParserRuleCall_0() {
         return cUnannPrimitiveTypeParserRuleCall_0;
      }

      // unannReferenceType
      public RuleCall getUnannReferenceTypeParserRuleCall_1() {
         return cUnannReferenceTypeParserRuleCall_1;
      }
   }

   public class UnannPrimitiveTypeElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "unannPrimitiveType");
      private final Assignment cNameAssignment = (Assignment) rule.eContents().get(1);
      private final Alternatives cNameAlternatives_0 = (Alternatives) cNameAssignment.eContents().get(0);
      private final RuleCall cNameNumericTypeTerminalRuleCall_0_0 = (RuleCall) cNameAlternatives_0.eContents().get(0);
      private final RuleCall cNameBooleanTypeTerminalRuleCall_0_1 = (RuleCall) cNameAlternatives_0.eContents().get(1);

      // unannPrimitiveType:
      // name=(numericType | booleanType);
      public ParserRule getRule() {
         return rule;
      }

      // name=(numericType | booleanType)
      public Assignment getNameAssignment() {
         return cNameAssignment;
      }

      // numericType | booleanType
      public Alternatives getNameAlternatives_0() {
         return cNameAlternatives_0;
      }

      // numericType
      public RuleCall getNameNumericTypeTerminalRuleCall_0_0() {
         return cNameNumericTypeTerminalRuleCall_0_0;
      }

      // booleanType
      public RuleCall getNameBooleanTypeTerminalRuleCall_0_1() {
         return cNameBooleanTypeTerminalRuleCall_0_1;
      }
   }

   public class UnannReferenceTypeElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "unannReferenceType");
      private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
      private final RuleCall cUnannClassOrInterfaceTypeParserRuleCall_0 = (RuleCall) cAlternatives.eContents().get(0);
      private final RuleCall cUnannTypeVariableParserRuleCall_1 = (RuleCall) cAlternatives.eContents().get(1);
      private final RuleCall cUnannArrayTypeParserRuleCall_2 = (RuleCall) cAlternatives.eContents().get(2);

      // unannReferenceType:
      // unannClassOrInterfaceType | unannTypeVariable | unannArrayType;
      public ParserRule getRule() {
         return rule;
      }

      // unannClassOrInterfaceType | unannTypeVariable | unannArrayType
      public Alternatives getAlternatives() {
         return cAlternatives;
      }

      // unannClassOrInterfaceType
      public RuleCall getUnannClassOrInterfaceTypeParserRuleCall_0() {
         return cUnannClassOrInterfaceTypeParserRuleCall_0;
      }

      // unannTypeVariable
      public RuleCall getUnannTypeVariableParserRuleCall_1() {
         return cUnannTypeVariableParserRuleCall_1;
      }

      // unannArrayType
      public RuleCall getUnannArrayTypeParserRuleCall_2() {
         return cUnannArrayTypeParserRuleCall_2;
      }
   }

   public class UnannClassOrInterfaceTypeElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(),
         "unannClassOrInterfaceType");
      private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
      private final RuleCall cUnannClassTypeParserRuleCall_0 = (RuleCall) cAlternatives.eContents().get(0);
      private final RuleCall cUnannInterfaceTypeParserRuleCall_1 = (RuleCall) cAlternatives.eContents().get(1);

      // //unannClassOrInterfaceType:
      // // (unannClassType_lfno_unannClassOrInterfaceType | unannInterfaceType_lfno_unannClassOrInterfaceType)
      // // (unannClassType_lf_unannClassOrInterfaceType | unannInterfaceType_lf_unannClassOrInterfaceType)*;
      // //unannInterfaceType_lf_unannClassOrInterfaceType:
      // // unannClassType_lf_unannClassOrInterfaceType;
      // //
      // //unannInterfaceType_lfno_unannClassOrInterfaceType:
      // // unannClassType_lfno_unannClassOrInterfaceType;
      // //unannClassType_lf_unannClassOrInterfaceType:
      // // '.' annotations+=annotation* name=Identifier typeArguments+=typeArguments?;
      // //
      // //unannClassType_lfno_unannClassOrInterfaceType:
      // // name=Identifier typeArguments+=typeArguments?;
      // unannClassOrInterfaceType:
      // unannClassType | unannInterfaceType;
      public ParserRule getRule() {
         return rule;
      }

      // unannClassType | unannInterfaceType
      public Alternatives getAlternatives() {
         return cAlternatives;
      }

      // unannClassType
      public RuleCall getUnannClassTypeParserRuleCall_0() {
         return cUnannClassTypeParserRuleCall_0;
      }

      // unannInterfaceType
      public RuleCall getUnannInterfaceTypeParserRuleCall_1() {
         return cUnannInterfaceTypeParserRuleCall_1;
      }
   }

   public class UnannClassTypeElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "unannClassType");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Assignment cClassTypeSegmentAssignment_0 = (Assignment) cGroup.eContents().get(0);
      private final RuleCall cClassTypeSegmentClassTypeSegmentParserRuleCall_0_0 = (RuleCall) cClassTypeSegmentAssignment_0.eContents()
         .get(0);
      private final Group cGroup_1 = (Group) cGroup.eContents().get(1);
      private final Keyword cFullStopKeyword_1_0 = (Keyword) cGroup_1.eContents().get(0);
      private final Assignment cClassTypeSegmentAssignment_1_1 = (Assignment) cGroup_1.eContents().get(1);
      private final RuleCall cClassTypeSegmentClassTypeSegmentParserRuleCall_1_1_0 = (RuleCall) cClassTypeSegmentAssignment_1_1.eContents()
         .get(0);
      private final Group cGroup_2 = (Group) cGroup.eContents().get(2);
      private final Keyword cFullStopKeyword_2_0 = (Keyword) cGroup_2.eContents().get(0);
      private final Assignment cClassTypeSegmentAssignment_2_1 = (Assignment) cGroup_2.eContents().get(1);
      private final RuleCall cClassTypeSegmentClassTypeSegmentWithAnnotationsParserRuleCall_2_1_0 = (RuleCall) cClassTypeSegmentAssignment_2_1.eContents()
         .get(0);

      // unannClassType:
      // classTypeSegment+=ClassTypeSegment ("." classTypeSegment+=ClassTypeSegment)* ("."
      // classTypeSegment+=ClassTypeSegmentWithAnnotations)?;
      public ParserRule getRule() {
         return rule;
      }

      // classTypeSegment+=ClassTypeSegment ("." classTypeSegment+=ClassTypeSegment)* ("."
      // classTypeSegment+=ClassTypeSegmentWithAnnotations)?
      public Group getGroup() {
         return cGroup;
      }

      // classTypeSegment+=ClassTypeSegment
      public Assignment getClassTypeSegmentAssignment_0() {
         return cClassTypeSegmentAssignment_0;
      }

      // ClassTypeSegment
      public RuleCall getClassTypeSegmentClassTypeSegmentParserRuleCall_0_0() {
         return cClassTypeSegmentClassTypeSegmentParserRuleCall_0_0;
      }

      // ("." classTypeSegment+=ClassTypeSegment)*
      public Group getGroup_1() {
         return cGroup_1;
      }

      // "."
      public Keyword getFullStopKeyword_1_0() {
         return cFullStopKeyword_1_0;
      }

      // classTypeSegment+=ClassTypeSegment
      public Assignment getClassTypeSegmentAssignment_1_1() {
         return cClassTypeSegmentAssignment_1_1;
      }

      // ClassTypeSegment
      public RuleCall getClassTypeSegmentClassTypeSegmentParserRuleCall_1_1_0() {
         return cClassTypeSegmentClassTypeSegmentParserRuleCall_1_1_0;
      }

      // ("." classTypeSegment+=ClassTypeSegmentWithAnnotations)?
      public Group getGroup_2() {
         return cGroup_2;
      }

      // "."
      public Keyword getFullStopKeyword_2_0() {
         return cFullStopKeyword_2_0;
      }

      // classTypeSegment+=ClassTypeSegmentWithAnnotations
      public Assignment getClassTypeSegmentAssignment_2_1() {
         return cClassTypeSegmentAssignment_2_1;
      }

      // ClassTypeSegmentWithAnnotations
      public RuleCall getClassTypeSegmentClassTypeSegmentWithAnnotationsParserRuleCall_2_1_0() {
         return cClassTypeSegmentClassTypeSegmentWithAnnotationsParserRuleCall_2_1_0;
      }
   }

   public class ClassTypeSegmentElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassTypeSegment");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Assignment cNameAssignment_0 = (Assignment) cGroup.eContents().get(0);
      private final RuleCall cNameIdentifierTerminalRuleCall_0_0 = (RuleCall) cNameAssignment_0.eContents().get(0);
      private final Assignment cTypeArgumentsAssignment_1 = (Assignment) cGroup.eContents().get(1);
      private final RuleCall cTypeArgumentsTypeArgumentsParserRuleCall_1_0 = (RuleCall) cTypeArgumentsAssignment_1.eContents()
         .get(0);

      // ClassTypeSegment:
      // name=Identifier typeArguments=typeArguments?;
      public ParserRule getRule() {
         return rule;
      }

      // name=Identifier typeArguments=typeArguments?
      public Group getGroup() {
         return cGroup;
      }

      // name=Identifier
      public Assignment getNameAssignment_0() {
         return cNameAssignment_0;
      }

      // Identifier
      public RuleCall getNameIdentifierTerminalRuleCall_0_0() {
         return cNameIdentifierTerminalRuleCall_0_0;
      }

      // typeArguments=typeArguments?
      public Assignment getTypeArgumentsAssignment_1() {
         return cTypeArgumentsAssignment_1;
      }

      // typeArguments
      public RuleCall getTypeArgumentsTypeArgumentsParserRuleCall_1_0() {
         return cTypeArgumentsTypeArgumentsParserRuleCall_1_0;
      }
   }

   public class ClassTypeSegmentWithAnnotationsElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(),
         "ClassTypeSegmentWithAnnotations");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Assignment cAnnotationsAssignment_0 = (Assignment) cGroup.eContents().get(0);
      private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall) cAnnotationsAssignment_0.eContents()
         .get(0);
      private final Assignment cNameAssignment_1 = (Assignment) cGroup.eContents().get(1);
      private final RuleCall cNameIdentifierTerminalRuleCall_1_0 = (RuleCall) cNameAssignment_1.eContents().get(0);
      private final Assignment cTypeArgumentsAssignment_2 = (Assignment) cGroup.eContents().get(2);
      private final RuleCall cTypeArgumentsTypeArgumentsParserRuleCall_2_0 = (RuleCall) cTypeArgumentsAssignment_2.eContents()
         .get(0);

      // ClassTypeSegmentWithAnnotations:
      // annotations+=annotation* name=Identifier typeArguments=typeArguments?;
      public ParserRule getRule() {
         return rule;
      }

      // annotations+=annotation* name=Identifier typeArguments=typeArguments?
      public Group getGroup() {
         return cGroup;
      }

      // annotations+=annotation*
      public Assignment getAnnotationsAssignment_0() {
         return cAnnotationsAssignment_0;
      }

      // annotation
      public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() {
         return cAnnotationsAnnotationParserRuleCall_0_0;
      }

      // name=Identifier
      public Assignment getNameAssignment_1() {
         return cNameAssignment_1;
      }

      // Identifier
      public RuleCall getNameIdentifierTerminalRuleCall_1_0() {
         return cNameIdentifierTerminalRuleCall_1_0;
      }

      // typeArguments=typeArguments?
      public Assignment getTypeArgumentsAssignment_2() {
         return cTypeArgumentsAssignment_2;
      }

      // typeArguments
      public RuleCall getTypeArgumentsTypeArgumentsParserRuleCall_2_0() {
         return cTypeArgumentsTypeArgumentsParserRuleCall_2_0;
      }
   }

   public class UnannInterfaceTypeElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "unannInterfaceType");
      private final RuleCall cUnannClassTypeParserRuleCall = (RuleCall) rule.eContents().get(1);

      // unannInterfaceType:
      // unannClassType;
      public ParserRule getRule() {
         return rule;
      }

      // unannClassType
      public RuleCall getUnannClassTypeParserRuleCall() {
         return cUnannClassTypeParserRuleCall;
      }
   }

   public class UnannTypeVariableElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "unannTypeVariable");
      private final Assignment cNameAssignment = (Assignment) rule.eContents().get(1);
      private final RuleCall cNameIdentifierTerminalRuleCall_0 = (RuleCall) cNameAssignment.eContents().get(0);

      // unannTypeVariable:
      // name=Identifier;
      public ParserRule getRule() {
         return rule;
      }

      // name=Identifier
      public Assignment getNameAssignment() {
         return cNameAssignment;
      }

      // Identifier
      public RuleCall getNameIdentifierTerminalRuleCall_0() {
         return cNameIdentifierTerminalRuleCall_0;
      }
   }

   public class UnannArrayTypeElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "unannArrayType");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Alternatives cAlternatives_0 = (Alternatives) cGroup.eContents().get(0);
      private final RuleCall cUnannPrimitiveTypeParserRuleCall_0_0 = (RuleCall) cAlternatives_0.eContents().get(0);
      private final RuleCall cUnannClassOrInterfaceTypeParserRuleCall_0_1 = (RuleCall) cAlternatives_0.eContents().get(
         1);
      private final RuleCall cUnannTypeVariableParserRuleCall_0_2 = (RuleCall) cAlternatives_0.eContents().get(2);
      private final Assignment cDimsAssignment_1 = (Assignment) cGroup.eContents().get(1);
      private final RuleCall cDimsDimsParserRuleCall_1_0 = (RuleCall) cDimsAssignment_1.eContents().get(0);

      // unannArrayType:
      // (unannPrimitiveType | unannClassOrInterfaceType | unannTypeVariable) dims=dims;
      public ParserRule getRule() {
         return rule;
      }

      // (unannPrimitiveType | unannClassOrInterfaceType | unannTypeVariable) dims=dims
      public Group getGroup() {
         return cGroup;
      }

      // unannPrimitiveType | unannClassOrInterfaceType | unannTypeVariable
      public Alternatives getAlternatives_0() {
         return cAlternatives_0;
      }

      // unannPrimitiveType
      public RuleCall getUnannPrimitiveTypeParserRuleCall_0_0() {
         return cUnannPrimitiveTypeParserRuleCall_0_0;
      }

      // unannClassOrInterfaceType
      public RuleCall getUnannClassOrInterfaceTypeParserRuleCall_0_1() {
         return cUnannClassOrInterfaceTypeParserRuleCall_0_1;
      }

      // unannTypeVariable
      public RuleCall getUnannTypeVariableParserRuleCall_0_2() {
         return cUnannTypeVariableParserRuleCall_0_2;
      }

      // dims=dims
      public Assignment getDimsAssignment_1() {
         return cDimsAssignment_1;
      }

      // dims
      public RuleCall getDimsDimsParserRuleCall_1_0() {
         return cDimsDimsParserRuleCall_1_0;
      }
   }

   public class MethodDeclarationElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "methodDeclaration");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Assignment cMethodModifiersAssignment_0 = (Assignment) cGroup.eContents().get(0);
      private final RuleCall cMethodModifiersMethodModifierParserRuleCall_0_0 = (RuleCall) cMethodModifiersAssignment_0.eContents()
         .get(0);
      private final Assignment cMethodHeaderAssignment_1 = (Assignment) cGroup.eContents().get(1);
      private final RuleCall cMethodHeaderMethodHeaderParserRuleCall_1_0 = (RuleCall) cMethodHeaderAssignment_1.eContents()
         .get(0);
      private final Assignment cMethodBodyAssignment_2 = (Assignment) cGroup.eContents().get(2);
      private final RuleCall cMethodBodyMethodBodyParserRuleCall_2_0 = (RuleCall) cMethodBodyAssignment_2.eContents()
         .get(0);

      // methodDeclaration:
      // methodModifiers+=methodModifier* methodHeader=methodHeader methodBody=methodBody;
      public ParserRule getRule() {
         return rule;
      }

      // methodModifiers+=methodModifier* methodHeader=methodHeader methodBody=methodBody
      public Group getGroup() {
         return cGroup;
      }

      // methodModifiers+=methodModifier*
      public Assignment getMethodModifiersAssignment_0() {
         return cMethodModifiersAssignment_0;
      }

      // methodModifier
      public RuleCall getMethodModifiersMethodModifierParserRuleCall_0_0() {
         return cMethodModifiersMethodModifierParserRuleCall_0_0;
      }

      // methodHeader=methodHeader
      public Assignment getMethodHeaderAssignment_1() {
         return cMethodHeaderAssignment_1;
      }

      // methodHeader
      public RuleCall getMethodHeaderMethodHeaderParserRuleCall_1_0() {
         return cMethodHeaderMethodHeaderParserRuleCall_1_0;
      }

      // methodBody=methodBody
      public Assignment getMethodBodyAssignment_2() {
         return cMethodBodyAssignment_2;
      }

      // methodBody
      public RuleCall getMethodBodyMethodBodyParserRuleCall_2_0() {
         return cMethodBodyMethodBodyParserRuleCall_2_0;
      }
   }

   public class MethodModifierElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "methodModifier");
      private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
      private final RuleCall cAnnotationParserRuleCall_0 = (RuleCall) cAlternatives.eContents().get(0);
      private final RuleCall cJavaMethodModifierParserRuleCall_1 = (RuleCall) cAlternatives.eContents().get(1);

      // methodModifier:
      // annotation | JavaMethodModifier;
      public ParserRule getRule() {
         return rule;
      }

      // annotation | JavaMethodModifier
      public Alternatives getAlternatives() {
         return cAlternatives;
      }

      // annotation
      public RuleCall getAnnotationParserRuleCall_0() {
         return cAnnotationParserRuleCall_0;
      }

      // JavaMethodModifier
      public RuleCall getJavaMethodModifierParserRuleCall_1() {
         return cJavaMethodModifierParserRuleCall_1;
      }
   }

   public class JavaMethodModifierElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JavaMethodModifier");
      private final Assignment cModifierAssignment = (Assignment) rule.eContents().get(1);
      private final RuleCall cModifierMethodModifiersEnumRuleCall_0 = (RuleCall) cModifierAssignment.eContents().get(0);

      // JavaMethodModifier:
      // modifier=methodModifiers;
      public ParserRule getRule() {
         return rule;
      }

      // modifier=methodModifiers
      public Assignment getModifierAssignment() {
         return cModifierAssignment;
      }

      // methodModifiers
      public RuleCall getModifierMethodModifiersEnumRuleCall_0() {
         return cModifierMethodModifiersEnumRuleCall_0;
      }
   }

   public class MethodHeaderElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "methodHeader");
      private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
      private final Group cGroup_0 = (Group) cAlternatives.eContents().get(0);
      private final Assignment cResultAssignment_0_0 = (Assignment) cGroup_0.eContents().get(0);
      private final RuleCall cResultResultParserRuleCall_0_0_0 = (RuleCall) cResultAssignment_0_0.eContents().get(0);
      private final Assignment cMethodDeclaratorAssignment_0_1 = (Assignment) cGroup_0.eContents().get(1);
      private final RuleCall cMethodDeclaratorMethodDeclaratorParserRuleCall_0_1_0 = (RuleCall) cMethodDeclaratorAssignment_0_1.eContents()
         .get(0);
      private final Assignment cThrows_Assignment_0_2 = (Assignment) cGroup_0.eContents().get(2);
      private final RuleCall cThrows_Throws_ParserRuleCall_0_2_0 = (RuleCall) cThrows_Assignment_0_2.eContents().get(0);
      private final Group cGroup_1 = (Group) cAlternatives.eContents().get(1);
      private final Assignment cTypeParametersAssignment_1_0 = (Assignment) cGroup_1.eContents().get(0);
      private final RuleCall cTypeParametersTypeParametersParserRuleCall_1_0_0 = (RuleCall) cTypeParametersAssignment_1_0.eContents()
         .get(0);
      private final Assignment cAnnotationsAssignment_1_1 = (Assignment) cGroup_1.eContents().get(1);
      private final RuleCall cAnnotationsAnnotationParserRuleCall_1_1_0 = (RuleCall) cAnnotationsAssignment_1_1.eContents()
         .get(0);
      private final Assignment cResultAssignment_1_2 = (Assignment) cGroup_1.eContents().get(2);
      private final RuleCall cResultResultParserRuleCall_1_2_0 = (RuleCall) cResultAssignment_1_2.eContents().get(0);
      private final Assignment cMethodDeclaratorAssignment_1_3 = (Assignment) cGroup_1.eContents().get(3);
      private final RuleCall cMethodDeclaratorMethodDeclaratorParserRuleCall_1_3_0 = (RuleCall) cMethodDeclaratorAssignment_1_3.eContents()
         .get(0);
      private final Assignment cThrows_Assignment_1_4 = (Assignment) cGroup_1.eContents().get(4);
      private final RuleCall cThrows_Throws_ParserRuleCall_1_4_0 = (RuleCall) cThrows_Assignment_1_4.eContents().get(0);

      // methodHeader:
      // result=result methodDeclarator=methodDeclarator throws_=throws_? | typeParameters=typeParameters
      // annotations+=annotation* result=result methodDeclarator=methodDeclarator throws_=throws_?;
      public ParserRule getRule() {
         return rule;
      }

      // result=result methodDeclarator=methodDeclarator throws_=throws_? | typeParameters=typeParameters
      // annotations+=annotation* result=result methodDeclarator=methodDeclarator throws_=throws_?
      public Alternatives getAlternatives() {
         return cAlternatives;
      }

      // result=result methodDeclarator=methodDeclarator throws_=throws_?
      public Group getGroup_0() {
         return cGroup_0;
      }

      // result=result
      public Assignment getResultAssignment_0_0() {
         return cResultAssignment_0_0;
      }

      // result
      public RuleCall getResultResultParserRuleCall_0_0_0() {
         return cResultResultParserRuleCall_0_0_0;
      }

      // methodDeclarator=methodDeclarator
      public Assignment getMethodDeclaratorAssignment_0_1() {
         return cMethodDeclaratorAssignment_0_1;
      }

      // methodDeclarator
      public RuleCall getMethodDeclaratorMethodDeclaratorParserRuleCall_0_1_0() {
         return cMethodDeclaratorMethodDeclaratorParserRuleCall_0_1_0;
      }

      // throws_=throws_?
      public Assignment getThrows_Assignment_0_2() {
         return cThrows_Assignment_0_2;
      }

      // throws_
      public RuleCall getThrows_Throws_ParserRuleCall_0_2_0() {
         return cThrows_Throws_ParserRuleCall_0_2_0;
      }

      // typeParameters=typeParameters annotations+=annotation* result=result methodDeclarator=methodDeclarator
      // throws_=throws_?
      public Group getGroup_1() {
         return cGroup_1;
      }

      // typeParameters=typeParameters
      public Assignment getTypeParametersAssignment_1_0() {
         return cTypeParametersAssignment_1_0;
      }

      // typeParameters
      public RuleCall getTypeParametersTypeParametersParserRuleCall_1_0_0() {
         return cTypeParametersTypeParametersParserRuleCall_1_0_0;
      }

      // annotations+=annotation*
      public Assignment getAnnotationsAssignment_1_1() {
         return cAnnotationsAssignment_1_1;
      }

      // annotation
      public RuleCall getAnnotationsAnnotationParserRuleCall_1_1_0() {
         return cAnnotationsAnnotationParserRuleCall_1_1_0;
      }

      // result=result
      public Assignment getResultAssignment_1_2() {
         return cResultAssignment_1_2;
      }

      // result
      public RuleCall getResultResultParserRuleCall_1_2_0() {
         return cResultResultParserRuleCall_1_2_0;
      }

      // methodDeclarator=methodDeclarator
      public Assignment getMethodDeclaratorAssignment_1_3() {
         return cMethodDeclaratorAssignment_1_3;
      }

      // methodDeclarator
      public RuleCall getMethodDeclaratorMethodDeclaratorParserRuleCall_1_3_0() {
         return cMethodDeclaratorMethodDeclaratorParserRuleCall_1_3_0;
      }

      // throws_=throws_?
      public Assignment getThrows_Assignment_1_4() {
         return cThrows_Assignment_1_4;
      }

      // throws_
      public RuleCall getThrows_Throws_ParserRuleCall_1_4_0() {
         return cThrows_Throws_ParserRuleCall_1_4_0;
      }
   }

   public class ResultElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "result");
      private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
      private final RuleCall cUnannTypeParserRuleCall_0 = (RuleCall) cAlternatives.eContents().get(0);
      private final RuleCall cVoidTypeParserRuleCall_1 = (RuleCall) cAlternatives.eContents().get(1);

      // result:
      // unannType | voidType;
      public ParserRule getRule() {
         return rule;
      }

      // unannType | voidType
      public Alternatives getAlternatives() {
         return cAlternatives;
      }

      // unannType
      public RuleCall getUnannTypeParserRuleCall_0() {
         return cUnannTypeParserRuleCall_0;
      }

      // voidType
      public RuleCall getVoidTypeParserRuleCall_1() {
         return cVoidTypeParserRuleCall_1;
      }
   }

   public class VoidTypeElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "voidType");
      private final Assignment cNameAssignment = (Assignment) rule.eContents().get(1);
      private final Keyword cNameVoidKeyword_0 = (Keyword) cNameAssignment.eContents().get(0);

      // voidType:
      // name="void";
      public ParserRule getRule() {
         return rule;
      }

      // name="void"
      public Assignment getNameAssignment() {
         return cNameAssignment;
      }

      // "void"
      public Keyword getNameVoidKeyword_0() {
         return cNameVoidKeyword_0;
      }
   }

   public class MethodDeclaratorElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "methodDeclarator");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Assignment cNameAssignment_0 = (Assignment) cGroup.eContents().get(0);
      private final RuleCall cNameIdentifierTerminalRuleCall_0_0 = (RuleCall) cNameAssignment_0.eContents().get(0);
      private final Keyword cLeftParenthesisKeyword_1 = (Keyword) cGroup.eContents().get(1);
      private final Assignment cParametersAssignment_2 = (Assignment) cGroup.eContents().get(2);
      private final RuleCall cParametersFormalParameterListParserRuleCall_2_0 = (RuleCall) cParametersAssignment_2.eContents()
         .get(0);
      private final Keyword cRightParenthesisKeyword_3 = (Keyword) cGroup.eContents().get(3);
      private final Assignment cDims_Assignment_4 = (Assignment) cGroup.eContents().get(4);
      private final RuleCall cDims_DimsParserRuleCall_4_0 = (RuleCall) cDims_Assignment_4.eContents().get(0);

      // methodDeclarator:
      // name=Identifier "(" parameters+=formalParameterList? ")" dims_=dims?;
      public ParserRule getRule() {
         return rule;
      }

      // name=Identifier "(" parameters+=formalParameterList? ")" dims_=dims?
      public Group getGroup() {
         return cGroup;
      }

      // name=Identifier
      public Assignment getNameAssignment_0() {
         return cNameAssignment_0;
      }

      // Identifier
      public RuleCall getNameIdentifierTerminalRuleCall_0_0() {
         return cNameIdentifierTerminalRuleCall_0_0;
      }

      // "("
      public Keyword getLeftParenthesisKeyword_1() {
         return cLeftParenthesisKeyword_1;
      }

      // parameters+=formalParameterList?
      public Assignment getParametersAssignment_2() {
         return cParametersAssignment_2;
      }

      // formalParameterList
      public RuleCall getParametersFormalParameterListParserRuleCall_2_0() {
         return cParametersFormalParameterListParserRuleCall_2_0;
      }

      // ")"
      public Keyword getRightParenthesisKeyword_3() {
         return cRightParenthesisKeyword_3;
      }

      // dims_=dims?
      public Assignment getDims_Assignment_4() {
         return cDims_Assignment_4;
      }

      // dims
      public RuleCall getDims_DimsParserRuleCall_4_0() {
         return cDims_DimsParserRuleCall_4_0;
      }
   }

   public class FormalParameterListElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "formalParameterList");
      private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
      private final Group cGroup_0 = (Group) cAlternatives.eContents().get(0);
      private final Assignment cParametersAssignment_0_0 = (Assignment) cGroup_0.eContents().get(0);
      private final RuleCall cParametersFormalParametersParserRuleCall_0_0_0 = (RuleCall) cParametersAssignment_0_0.eContents()
         .get(0);
      private final Keyword cCommaKeyword_0_1 = (Keyword) cGroup_0.eContents().get(1);
      private final Assignment cParametersAssignment_0_2 = (Assignment) cGroup_0.eContents().get(2);
      private final RuleCall cParametersLastFormalParameterParserRuleCall_0_2_0 = (RuleCall) cParametersAssignment_0_2.eContents()
         .get(0);
      private final Assignment cParametersAssignment_1 = (Assignment) cAlternatives.eContents().get(1);
      private final RuleCall cParametersLastFormalParameterParserRuleCall_1_0 = (RuleCall) cParametersAssignment_1.eContents()
         .get(0);

      // formalParameterList:
      // parameters+=formalParameters "," parameters+=lastFormalParameter | parameters+=lastFormalParameter;
      public ParserRule getRule() {
         return rule;
      }

      // parameters+=formalParameters "," parameters+=lastFormalParameter | parameters+=lastFormalParameter
      public Alternatives getAlternatives() {
         return cAlternatives;
      }

      // parameters+=formalParameters "," parameters+=lastFormalParameter
      public Group getGroup_0() {
         return cGroup_0;
      }

      // parameters+=formalParameters
      public Assignment getParametersAssignment_0_0() {
         return cParametersAssignment_0_0;
      }

      // formalParameters
      public RuleCall getParametersFormalParametersParserRuleCall_0_0_0() {
         return cParametersFormalParametersParserRuleCall_0_0_0;
      }

      // ","
      public Keyword getCommaKeyword_0_1() {
         return cCommaKeyword_0_1;
      }

      // parameters+=lastFormalParameter
      public Assignment getParametersAssignment_0_2() {
         return cParametersAssignment_0_2;
      }

      // lastFormalParameter
      public RuleCall getParametersLastFormalParameterParserRuleCall_0_2_0() {
         return cParametersLastFormalParameterParserRuleCall_0_2_0;
      }

      // parameters+=lastFormalParameter
      public Assignment getParametersAssignment_1() {
         return cParametersAssignment_1;
      }

      // lastFormalParameter
      public RuleCall getParametersLastFormalParameterParserRuleCall_1_0() {
         return cParametersLastFormalParameterParserRuleCall_1_0;
      }
   }

   public class FormalParametersElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "formalParameters");
      private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
      private final Group cGroup_0 = (Group) cAlternatives.eContents().get(0);
      private final Assignment cParametersAssignment_0_0 = (Assignment) cGroup_0.eContents().get(0);
      private final RuleCall cParametersFormalParameterParserRuleCall_0_0_0 = (RuleCall) cParametersAssignment_0_0.eContents()
         .get(0);
      private final Group cGroup_0_1 = (Group) cGroup_0.eContents().get(1);
      private final Keyword cCommaKeyword_0_1_0 = (Keyword) cGroup_0_1.eContents().get(0);
      private final Assignment cParametersAssignment_0_1_1 = (Assignment) cGroup_0_1.eContents().get(1);
      private final RuleCall cParametersFormalParameterParserRuleCall_0_1_1_0 = (RuleCall) cParametersAssignment_0_1_1.eContents()
         .get(0);
      private final Group cGroup_1 = (Group) cAlternatives.eContents().get(1);
      private final Assignment cParametersAssignment_1_0 = (Assignment) cGroup_1.eContents().get(0);
      private final RuleCall cParametersReceiverParameterParserRuleCall_1_0_0 = (RuleCall) cParametersAssignment_1_0.eContents()
         .get(0);
      private final Group cGroup_1_1 = (Group) cGroup_1.eContents().get(1);
      private final Keyword cCommaKeyword_1_1_0 = (Keyword) cGroup_1_1.eContents().get(0);
      private final Assignment cParametersAssignment_1_1_1 = (Assignment) cGroup_1_1.eContents().get(1);
      private final RuleCall cParametersFormalParameterParserRuleCall_1_1_1_0 = (RuleCall) cParametersAssignment_1_1_1.eContents()
         .get(0);

      // formalParameters:
      // parameters+=formalParameter ("," parameters+=formalParameter)* | parameters+=receiverParameter (","
      // parameters+=formalParameter)*;
      public ParserRule getRule() {
         return rule;
      }

      // parameters+=formalParameter ("," parameters+=formalParameter)* | parameters+=receiverParameter (","
      // parameters+=formalParameter)*
      public Alternatives getAlternatives() {
         return cAlternatives;
      }

      // parameters+=formalParameter ("," parameters+=formalParameter)*
      public Group getGroup_0() {
         return cGroup_0;
      }

      // parameters+=formalParameter
      public Assignment getParametersAssignment_0_0() {
         return cParametersAssignment_0_0;
      }

      // formalParameter
      public RuleCall getParametersFormalParameterParserRuleCall_0_0_0() {
         return cParametersFormalParameterParserRuleCall_0_0_0;
      }

      // ("," parameters+=formalParameter)*
      public Group getGroup_0_1() {
         return cGroup_0_1;
      }

      // ","
      public Keyword getCommaKeyword_0_1_0() {
         return cCommaKeyword_0_1_0;
      }

      // parameters+=formalParameter
      public Assignment getParametersAssignment_0_1_1() {
         return cParametersAssignment_0_1_1;
      }

      // formalParameter
      public RuleCall getParametersFormalParameterParserRuleCall_0_1_1_0() {
         return cParametersFormalParameterParserRuleCall_0_1_1_0;
      }

      // parameters+=receiverParameter ("," parameters+=formalParameter)*
      public Group getGroup_1() {
         return cGroup_1;
      }

      // parameters+=receiverParameter
      public Assignment getParametersAssignment_1_0() {
         return cParametersAssignment_1_0;
      }

      // receiverParameter
      public RuleCall getParametersReceiverParameterParserRuleCall_1_0_0() {
         return cParametersReceiverParameterParserRuleCall_1_0_0;
      }

      // ("," parameters+=formalParameter)*
      public Group getGroup_1_1() {
         return cGroup_1_1;
      }

      // ","
      public Keyword getCommaKeyword_1_1_0() {
         return cCommaKeyword_1_1_0;
      }

      // parameters+=formalParameter
      public Assignment getParametersAssignment_1_1_1() {
         return cParametersAssignment_1_1_1;
      }

      // formalParameter
      public RuleCall getParametersFormalParameterParserRuleCall_1_1_1_0() {
         return cParametersFormalParameterParserRuleCall_1_1_1_0;
      }
   }

   public class FormalParameterElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "formalParameter");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Assignment cModifiersAssignment_0 = (Assignment) cGroup.eContents().get(0);
      private final RuleCall cModifiersVariableModifierParserRuleCall_0_0 = (RuleCall) cModifiersAssignment_0.eContents()
         .get(0);
      private final Assignment cTypeAssignment_1 = (Assignment) cGroup.eContents().get(1);
      private final RuleCall cTypeUnannTypeParserRuleCall_1_0 = (RuleCall) cTypeAssignment_1.eContents().get(0);
      private final Assignment cNameAssignment_2 = (Assignment) cGroup.eContents().get(2);
      private final RuleCall cNameVariableDeclaratorIdParserRuleCall_2_0 = (RuleCall) cNameAssignment_2.eContents()
         .get(0);

      // formalParameter:
      // modifiers+=variableModifier* type=unannType name=variableDeclaratorId;
      public ParserRule getRule() {
         return rule;
      }

      // modifiers+=variableModifier* type=unannType name=variableDeclaratorId
      public Group getGroup() {
         return cGroup;
      }

      // modifiers+=variableModifier*
      public Assignment getModifiersAssignment_0() {
         return cModifiersAssignment_0;
      }

      // variableModifier
      public RuleCall getModifiersVariableModifierParserRuleCall_0_0() {
         return cModifiersVariableModifierParserRuleCall_0_0;
      }

      // type=unannType
      public Assignment getTypeAssignment_1() {
         return cTypeAssignment_1;
      }

      // unannType
      public RuleCall getTypeUnannTypeParserRuleCall_1_0() {
         return cTypeUnannTypeParserRuleCall_1_0;
      }

      // name=variableDeclaratorId
      public Assignment getNameAssignment_2() {
         return cNameAssignment_2;
      }

      // variableDeclaratorId
      public RuleCall getNameVariableDeclaratorIdParserRuleCall_2_0() {
         return cNameVariableDeclaratorIdParserRuleCall_2_0;
      }
   }

   public class VariableModifierElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "variableModifier");
      private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
      private final RuleCall cAnnotationParserRuleCall_0 = (RuleCall) cAlternatives.eContents().get(0);
      private final RuleCall cJavaVariableModifierParserRuleCall_1 = (RuleCall) cAlternatives.eContents().get(1);

      // variableModifier:
      // annotation | JavaVariableModifier;
      public ParserRule getRule() {
         return rule;
      }

      // annotation | JavaVariableModifier
      public Alternatives getAlternatives() {
         return cAlternatives;
      }

      // annotation
      public RuleCall getAnnotationParserRuleCall_0() {
         return cAnnotationParserRuleCall_0;
      }

      // JavaVariableModifier
      public RuleCall getJavaVariableModifierParserRuleCall_1() {
         return cJavaVariableModifierParserRuleCall_1;
      }
   }

   public class JavaVariableModifierElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JavaVariableModifier");
      private final Assignment cModifierAssignment = (Assignment) rule.eContents().get(1);
      private final RuleCall cModifierVariableModifiersEnumRuleCall_0 = (RuleCall) cModifierAssignment.eContents().get(
         0);

      // JavaVariableModifier:
      // modifier=VariableModifiers;
      public ParserRule getRule() {
         return rule;
      }

      // modifier=VariableModifiers
      public Assignment getModifierAssignment() {
         return cModifierAssignment;
      }

      // VariableModifiers
      public RuleCall getModifierVariableModifiersEnumRuleCall_0() {
         return cModifierVariableModifiersEnumRuleCall_0;
      }
   }

   public class LastFormalParameterElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lastFormalParameter");
      private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
      private final Group cGroup_0 = (Group) cAlternatives.eContents().get(0);
      private final Assignment cModifiersAssignment_0_0 = (Assignment) cGroup_0.eContents().get(0);
      private final RuleCall cModifiersVariableModifierParserRuleCall_0_0_0 = (RuleCall) cModifiersAssignment_0_0.eContents()
         .get(0);
      private final Assignment cTypeAssignment_0_1 = (Assignment) cGroup_0.eContents().get(1);
      private final RuleCall cTypeUnannTypeParserRuleCall_0_1_0 = (RuleCall) cTypeAssignment_0_1.eContents().get(0);
      private final Assignment cAnnotationsAssignment_0_2 = (Assignment) cGroup_0.eContents().get(2);
      private final RuleCall cAnnotationsAnnotationParserRuleCall_0_2_0 = (RuleCall) cAnnotationsAssignment_0_2.eContents()
         .get(0);
      private final Assignment cVarargsAssignment_0_3 = (Assignment) cGroup_0.eContents().get(3);
      private final Keyword cVarargsFullStopFullStopFullStopKeyword_0_3_0 = (Keyword) cVarargsAssignment_0_3.eContents()
         .get(0);
      private final Assignment cNameAssignment_0_4 = (Assignment) cGroup_0.eContents().get(4);
      private final RuleCall cNameVariableDeclaratorIdParserRuleCall_0_4_0 = (RuleCall) cNameAssignment_0_4.eContents()
         .get(0);
      private final RuleCall cFormalParameterParserRuleCall_1 = (RuleCall) cAlternatives.eContents().get(1);

      // lastFormalParameter:
      // modifiers+=variableModifier* type=unannType annotations+=annotation* varargs?="..." name=variableDeclaratorId |
      // formalParameter;
      public ParserRule getRule() {
         return rule;
      }

      // modifiers+=variableModifier* type=unannType annotations+=annotation* varargs?="..." name=variableDeclaratorId |
      // formalParameter
      public Alternatives getAlternatives() {
         return cAlternatives;
      }

      // modifiers+=variableModifier* type=unannType annotations+=annotation* varargs?="..." name=variableDeclaratorId
      public Group getGroup_0() {
         return cGroup_0;
      }

      // modifiers+=variableModifier*
      public Assignment getModifiersAssignment_0_0() {
         return cModifiersAssignment_0_0;
      }

      // variableModifier
      public RuleCall getModifiersVariableModifierParserRuleCall_0_0_0() {
         return cModifiersVariableModifierParserRuleCall_0_0_0;
      }

      // type=unannType
      public Assignment getTypeAssignment_0_1() {
         return cTypeAssignment_0_1;
      }

      // unannType
      public RuleCall getTypeUnannTypeParserRuleCall_0_1_0() {
         return cTypeUnannTypeParserRuleCall_0_1_0;
      }

      // annotations+=annotation*
      public Assignment getAnnotationsAssignment_0_2() {
         return cAnnotationsAssignment_0_2;
      }

      // annotation
      public RuleCall getAnnotationsAnnotationParserRuleCall_0_2_0() {
         return cAnnotationsAnnotationParserRuleCall_0_2_0;
      }

      // varargs?="..."
      public Assignment getVarargsAssignment_0_3() {
         return cVarargsAssignment_0_3;
      }

      // "..."
      public Keyword getVarargsFullStopFullStopFullStopKeyword_0_3_0() {
         return cVarargsFullStopFullStopFullStopKeyword_0_3_0;
      }

      // name=variableDeclaratorId
      public Assignment getNameAssignment_0_4() {
         return cNameAssignment_0_4;
      }

      // variableDeclaratorId
      public RuleCall getNameVariableDeclaratorIdParserRuleCall_0_4_0() {
         return cNameVariableDeclaratorIdParserRuleCall_0_4_0;
      }

      // formalParameter
      public RuleCall getFormalParameterParserRuleCall_1() {
         return cFormalParameterParserRuleCall_1;
      }
   }

   public class ReceiverParameterElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "receiverParameter");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Assignment cAnnotationsAssignment_0 = (Assignment) cGroup.eContents().get(0);
      private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall) cAnnotationsAssignment_0.eContents()
         .get(0);
      private final Assignment cTypeAssignment_1 = (Assignment) cGroup.eContents().get(1);
      private final RuleCall cTypeUnannTypeParserRuleCall_1_0 = (RuleCall) cTypeAssignment_1.eContents().get(0);
      private final Group cGroup_2 = (Group) cGroup.eContents().get(2);
      private final Assignment cQualifierAssignment_2_0 = (Assignment) cGroup_2.eContents().get(0);
      private final RuleCall cQualifierIdentifierTerminalRuleCall_2_0_0 = (RuleCall) cQualifierAssignment_2_0.eContents()
         .get(0);
      private final Keyword cFullStopKeyword_2_1 = (Keyword) cGroup_2.eContents().get(1);
      private final Assignment cNameAssignment_3 = (Assignment) cGroup.eContents().get(3);
      private final Keyword cNameThisKeyword_3_0 = (Keyword) cNameAssignment_3.eContents().get(0);

      // receiverParameter:
      // annotations+=annotation* type=unannType (qualifier=Identifier ".")? name="this";
      public ParserRule getRule() {
         return rule;
      }

      // annotations+=annotation* type=unannType (qualifier=Identifier ".")? name="this"
      public Group getGroup() {
         return cGroup;
      }

      // annotations+=annotation*
      public Assignment getAnnotationsAssignment_0() {
         return cAnnotationsAssignment_0;
      }

      // annotation
      public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() {
         return cAnnotationsAnnotationParserRuleCall_0_0;
      }

      // type=unannType
      public Assignment getTypeAssignment_1() {
         return cTypeAssignment_1;
      }

      // unannType
      public RuleCall getTypeUnannTypeParserRuleCall_1_0() {
         return cTypeUnannTypeParserRuleCall_1_0;
      }

      // (qualifier=Identifier ".")?
      public Group getGroup_2() {
         return cGroup_2;
      }

      // qualifier=Identifier
      public Assignment getQualifierAssignment_2_0() {
         return cQualifierAssignment_2_0;
      }

      // Identifier
      public RuleCall getQualifierIdentifierTerminalRuleCall_2_0_0() {
         return cQualifierIdentifierTerminalRuleCall_2_0_0;
      }

      // "."
      public Keyword getFullStopKeyword_2_1() {
         return cFullStopKeyword_2_1;
      }

      // name="this"
      public Assignment getNameAssignment_3() {
         return cNameAssignment_3;
      }

      // "this"
      public Keyword getNameThisKeyword_3_0() {
         return cNameThisKeyword_3_0;
      }
   }

   public class Throws_Elements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "throws_");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Keyword cThrowsKeyword_0 = (Keyword) cGroup.eContents().get(0);
      private final RuleCall cExceptionTypeListParserRuleCall_1 = (RuleCall) cGroup.eContents().get(1);

      // throws_:
      // "throws" exceptionTypeList;
      public ParserRule getRule() {
         return rule;
      }

      // "throws" exceptionTypeList
      public Group getGroup() {
         return cGroup;
      }

      // "throws"
      public Keyword getThrowsKeyword_0() {
         return cThrowsKeyword_0;
      }

      // exceptionTypeList
      public RuleCall getExceptionTypeListParserRuleCall_1() {
         return cExceptionTypeListParserRuleCall_1;
      }
   }

   public class ExceptionTypeListElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "exceptionTypeList");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Assignment cExceptionTypesAssignment_0 = (Assignment) cGroup.eContents().get(0);
      private final RuleCall cExceptionTypesExceptionTypeParserRuleCall_0_0 = (RuleCall) cExceptionTypesAssignment_0.eContents()
         .get(0);
      private final Group cGroup_1 = (Group) cGroup.eContents().get(1);
      private final Keyword cCommaKeyword_1_0 = (Keyword) cGroup_1.eContents().get(0);
      private final Assignment cExceptionTypesAssignment_1_1 = (Assignment) cGroup_1.eContents().get(1);
      private final RuleCall cExceptionTypesExceptionTypeParserRuleCall_1_1_0 = (RuleCall) cExceptionTypesAssignment_1_1.eContents()
         .get(0);

      // exceptionTypeList:
      // exceptionTypes+=exceptionType ("," exceptionTypes+=exceptionType)*;
      public ParserRule getRule() {
         return rule;
      }

      // exceptionTypes+=exceptionType ("," exceptionTypes+=exceptionType)*
      public Group getGroup() {
         return cGroup;
      }

      // exceptionTypes+=exceptionType
      public Assignment getExceptionTypesAssignment_0() {
         return cExceptionTypesAssignment_0;
      }

      // exceptionType
      public RuleCall getExceptionTypesExceptionTypeParserRuleCall_0_0() {
         return cExceptionTypesExceptionTypeParserRuleCall_0_0;
      }

      // ("," exceptionTypes+=exceptionType)*
      public Group getGroup_1() {
         return cGroup_1;
      }

      // ","
      public Keyword getCommaKeyword_1_0() {
         return cCommaKeyword_1_0;
      }

      // exceptionTypes+=exceptionType
      public Assignment getExceptionTypesAssignment_1_1() {
         return cExceptionTypesAssignment_1_1;
      }

      // exceptionType
      public RuleCall getExceptionTypesExceptionTypeParserRuleCall_1_1_0() {
         return cExceptionTypesExceptionTypeParserRuleCall_1_1_0;
      }
   }

   public class ExceptionTypeElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "exceptionType");
      private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
      private final RuleCall cClassTypeParserRuleCall_0 = (RuleCall) cAlternatives.eContents().get(0);
      private final RuleCall cTypeVariableParserRuleCall_1 = (RuleCall) cAlternatives.eContents().get(1);

      // exceptionType:
      // classType | typeVariable;
      public ParserRule getRule() {
         return rule;
      }

      // classType | typeVariable
      public Alternatives getAlternatives() {
         return cAlternatives;
      }

      // classType
      public RuleCall getClassTypeParserRuleCall_0() {
         return cClassTypeParserRuleCall_0;
      }

      // typeVariable
      public RuleCall getTypeVariableParserRuleCall_1() {
         return cTypeVariableParserRuleCall_1;
      }
   }

   public class MethodBodyElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "methodBody");
      private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
      private final RuleCall cBlockParserRuleCall_0 = (RuleCall) cAlternatives.eContents().get(0);
      private final Group cGroup_1 = (Group) cAlternatives.eContents().get(1);
      private final Action cMethodBodyAction_1_0 = (Action) cGroup_1.eContents().get(0);
      private final Keyword cSemicolonKeyword_1_1 = (Keyword) cGroup_1.eContents().get(1);

      // methodBody:
      // block | {methodBody} ";";
      public ParserRule getRule() {
         return rule;
      }

      // block | {methodBody} ";"
      public Alternatives getAlternatives() {
         return cAlternatives;
      }

      // block
      public RuleCall getBlockParserRuleCall_0() {
         return cBlockParserRuleCall_0;
      }

      // {methodBody} ";"
      public Group getGroup_1() {
         return cGroup_1;
      }

      // {methodBody}
      public Action getMethodBodyAction_1_0() {
         return cMethodBodyAction_1_0;
      }

      // ";"
      public Keyword getSemicolonKeyword_1_1() {
         return cSemicolonKeyword_1_1;
      }
   }

   public class InstanceInitializerElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "instanceInitializer");
      private final RuleCall cBlockParserRuleCall = (RuleCall) rule.eContents().get(1);

      // instanceInitializer:
      // block;
      public ParserRule getRule() {
         return rule;
      }

      // block
      public RuleCall getBlockParserRuleCall() {
         return cBlockParserRuleCall;
      }
   }

   public class StaticInitializerElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "staticInitializer");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Keyword cStaticKeyword_0 = (Keyword) cGroup.eContents().get(0);
      private final RuleCall cBlockParserRuleCall_1 = (RuleCall) cGroup.eContents().get(1);

      // staticInitializer:
      // "static" block;
      public ParserRule getRule() {
         return rule;
      }

      // "static" block
      public Group getGroup() {
         return cGroup;
      }

      // "static"
      public Keyword getStaticKeyword_0() {
         return cStaticKeyword_0;
      }

      // block
      public RuleCall getBlockParserRuleCall_1() {
         return cBlockParserRuleCall_1;
      }
   }

   public class ConstructorDeclarationElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "constructorDeclaration");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Assignment cConstructorModifiersAssignment_0 = (Assignment) cGroup.eContents().get(0);
      private final RuleCall cConstructorModifiersConstructorModifierParserRuleCall_0_0 = (RuleCall) cConstructorModifiersAssignment_0.eContents()
         .get(0);
      private final Assignment cConstructorDeclaratorAssignment_1 = (Assignment) cGroup.eContents().get(1);
      private final RuleCall cConstructorDeclaratorConstructorDeclaratorParserRuleCall_1_0 = (RuleCall) cConstructorDeclaratorAssignment_1.eContents()
         .get(0);
      private final Assignment cThrows_Assignment_2 = (Assignment) cGroup.eContents().get(2);
      private final RuleCall cThrows_Throws_ParserRuleCall_2_0 = (RuleCall) cThrows_Assignment_2.eContents().get(0);

      // // constructorBody=constructorBody;
      // constructorDeclaration:
      // constructorModifiers+=constructorModifier* constructorDeclarator=constructorDeclarator throws_=throws_?;
      public ParserRule getRule() {
         return rule;
      }

      // constructorModifiers+=constructorModifier* constructorDeclarator=constructorDeclarator throws_=throws_?
      public Group getGroup() {
         return cGroup;
      }

      // constructorModifiers+=constructorModifier*
      public Assignment getConstructorModifiersAssignment_0() {
         return cConstructorModifiersAssignment_0;
      }

      // constructorModifier
      public RuleCall getConstructorModifiersConstructorModifierParserRuleCall_0_0() {
         return cConstructorModifiersConstructorModifierParserRuleCall_0_0;
      }

      // constructorDeclarator=constructorDeclarator
      public Assignment getConstructorDeclaratorAssignment_1() {
         return cConstructorDeclaratorAssignment_1;
      }

      // constructorDeclarator
      public RuleCall getConstructorDeclaratorConstructorDeclaratorParserRuleCall_1_0() {
         return cConstructorDeclaratorConstructorDeclaratorParserRuleCall_1_0;
      }

      // throws_=throws_?
      public Assignment getThrows_Assignment_2() {
         return cThrows_Assignment_2;
      }

      // throws_
      public RuleCall getThrows_Throws_ParserRuleCall_2_0() {
         return cThrows_Throws_ParserRuleCall_2_0;
      }
   }

   public class ConstructorModifierElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "constructorModifier");
      private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
      private final RuleCall cAnnotationParserRuleCall_0 = (RuleCall) cAlternatives.eContents().get(0);
      private final RuleCall cJavaConstructorModifierParserRuleCall_1 = (RuleCall) cAlternatives.eContents().get(1);

      // constructorModifier:
      // annotation | JavaConstructorModifier;
      public ParserRule getRule() {
         return rule;
      }

      // annotation | JavaConstructorModifier
      public Alternatives getAlternatives() {
         return cAlternatives;
      }

      // annotation
      public RuleCall getAnnotationParserRuleCall_0() {
         return cAnnotationParserRuleCall_0;
      }

      // JavaConstructorModifier
      public RuleCall getJavaConstructorModifierParserRuleCall_1() {
         return cJavaConstructorModifierParserRuleCall_1;
      }
   }

   public class JavaConstructorModifierElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JavaConstructorModifier");
      private final Assignment cModifierAssignment = (Assignment) rule.eContents().get(1);
      private final RuleCall cModifierConstructorModifiersEnumRuleCall_0 = (RuleCall) cModifierAssignment.eContents()
         .get(0);

      // JavaConstructorModifier:
      // modifier=ConstructorModifiers;
      public ParserRule getRule() {
         return rule;
      }

      // modifier=ConstructorModifiers
      public Assignment getModifierAssignment() {
         return cModifierAssignment;
      }

      // ConstructorModifiers
      public RuleCall getModifierConstructorModifiersEnumRuleCall_0() {
         return cModifierConstructorModifiersEnumRuleCall_0;
      }
   }

   public class ConstructorDeclaratorElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "constructorDeclarator");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Assignment cTypeParametersAssignment_0 = (Assignment) cGroup.eContents().get(0);
      private final RuleCall cTypeParametersTypeParametersParserRuleCall_0_0 = (RuleCall) cTypeParametersAssignment_0.eContents()
         .get(0);
      private final Assignment cSimpleTypeNameAssignment_1 = (Assignment) cGroup.eContents().get(1);
      private final RuleCall cSimpleTypeNameSimpleTypeNameParserRuleCall_1_0 = (RuleCall) cSimpleTypeNameAssignment_1.eContents()
         .get(0);
      private final Keyword cLeftParenthesisKeyword_2 = (Keyword) cGroup.eContents().get(2);
      private final Assignment cFormalParameterListAssignment_3 = (Assignment) cGroup.eContents().get(3);
      private final RuleCall cFormalParameterListFormalParameterListParserRuleCall_3_0 = (RuleCall) cFormalParameterListAssignment_3.eContents()
         .get(0);
      private final Keyword cRightParenthesisKeyword_4 = (Keyword) cGroup.eContents().get(4);

      // constructorDeclarator:
      // typeParameters+=typeParameters? simpleTypeName=simpleTypeName "(" formalParameterList=formalParameterList? ")";
      public ParserRule getRule() {
         return rule;
      }

      // typeParameters+=typeParameters? simpleTypeName=simpleTypeName "(" formalParameterList=formalParameterList? ")"
      public Group getGroup() {
         return cGroup;
      }

      // typeParameters+=typeParameters?
      public Assignment getTypeParametersAssignment_0() {
         return cTypeParametersAssignment_0;
      }

      // typeParameters
      public RuleCall getTypeParametersTypeParametersParserRuleCall_0_0() {
         return cTypeParametersTypeParametersParserRuleCall_0_0;
      }

      // simpleTypeName=simpleTypeName
      public Assignment getSimpleTypeNameAssignment_1() {
         return cSimpleTypeNameAssignment_1;
      }

      // simpleTypeName
      public RuleCall getSimpleTypeNameSimpleTypeNameParserRuleCall_1_0() {
         return cSimpleTypeNameSimpleTypeNameParserRuleCall_1_0;
      }

      // "("
      public Keyword getLeftParenthesisKeyword_2() {
         return cLeftParenthesisKeyword_2;
      }

      // formalParameterList=formalParameterList?
      public Assignment getFormalParameterListAssignment_3() {
         return cFormalParameterListAssignment_3;
      }

      // formalParameterList
      public RuleCall getFormalParameterListFormalParameterListParserRuleCall_3_0() {
         return cFormalParameterListFormalParameterListParserRuleCall_3_0;
      }

      // ")"
      public Keyword getRightParenthesisKeyword_4() {
         return cRightParenthesisKeyword_4;
      }
   }

   public class SimpleTypeNameElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "simpleTypeName");
      private final RuleCall cIdentifierTerminalRuleCall = (RuleCall) rule.eContents().get(1);

      // simpleTypeName:
      // Identifier;
      public ParserRule getRule() {
         return rule;
      }

      // Identifier
      public RuleCall getIdentifierTerminalRuleCall() {
         return cIdentifierTerminalRuleCall;
      }
   }

   public class EnumDeclarationElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "enumDeclaration");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Assignment cModifiersAssignment_0 = (Assignment) cGroup.eContents().get(0);
      private final RuleCall cModifiersClassModifierParserRuleCall_0_0 = (RuleCall) cModifiersAssignment_0.eContents()
         .get(0);
      private final Keyword cEnumKeyword_1 = (Keyword) cGroup.eContents().get(1);
      private final Assignment cNameAssignment_2 = (Assignment) cGroup.eContents().get(2);
      private final RuleCall cNameIdentifierTerminalRuleCall_2_0 = (RuleCall) cNameAssignment_2.eContents().get(0);
      private final Assignment cSuperinterfacesAssignment_3 = (Assignment) cGroup.eContents().get(3);
      private final RuleCall cSuperinterfacesSuperinterfacesParserRuleCall_3_0 = (RuleCall) cSuperinterfacesAssignment_3.eContents()
         .get(0);
      private final Assignment cEnumBodyAssignment_4 = (Assignment) cGroup.eContents().get(4);
      private final RuleCall cEnumBodyEnumBodyParserRuleCall_4_0 = (RuleCall) cEnumBodyAssignment_4.eContents().get(0);

      // //constructorBody:
      // // {constructorBody} '{' explicitConstructorInvocation=explicitConstructorInvocation?
      // blockStatements=blockStatements?
      // // '}';
      // //explicitConstructorInvocation:
      // // typeArguments=typeArguments? 'this' '(' argumentList=argumentList? ')' ';' | typeArguments=typeArguments?
      // 'super' '('
      // // argumentList=argumentList? ')' ';' | expressionName=expressionName '.' typeArguments=typeArguments? 'super'
      // '('
      // // argumentList=argumentList? ')' ';' | primary=primary '.' typeArguments=typeArguments? 'super' '('
      // // argumentList=argumentList? ')' ';';
      // enumDeclaration:
      // modifiers+=classModifier* "enum" name=Identifier superinterfaces=superinterfaces? enumBody=enumBody;
      public ParserRule getRule() {
         return rule;
      }

      // modifiers+=classModifier* "enum" name=Identifier superinterfaces=superinterfaces? enumBody=enumBody
      public Group getGroup() {
         return cGroup;
      }

      // modifiers+=classModifier*
      public Assignment getModifiersAssignment_0() {
         return cModifiersAssignment_0;
      }

      // classModifier
      public RuleCall getModifiersClassModifierParserRuleCall_0_0() {
         return cModifiersClassModifierParserRuleCall_0_0;
      }

      // "enum"
      public Keyword getEnumKeyword_1() {
         return cEnumKeyword_1;
      }

      // name=Identifier
      public Assignment getNameAssignment_2() {
         return cNameAssignment_2;
      }

      // Identifier
      public RuleCall getNameIdentifierTerminalRuleCall_2_0() {
         return cNameIdentifierTerminalRuleCall_2_0;
      }

      // superinterfaces=superinterfaces?
      public Assignment getSuperinterfacesAssignment_3() {
         return cSuperinterfacesAssignment_3;
      }

      // superinterfaces
      public RuleCall getSuperinterfacesSuperinterfacesParserRuleCall_3_0() {
         return cSuperinterfacesSuperinterfacesParserRuleCall_3_0;
      }

      // enumBody=enumBody
      public Assignment getEnumBodyAssignment_4() {
         return cEnumBodyAssignment_4;
      }

      // enumBody
      public RuleCall getEnumBodyEnumBodyParserRuleCall_4_0() {
         return cEnumBodyEnumBodyParserRuleCall_4_0;
      }
   }

   public class EnumBodyElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "enumBody");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Action cEnumBodyAction_0 = (Action) cGroup.eContents().get(0);
      private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword) cGroup.eContents().get(1);
      private final Assignment cEnumConstantListAssignment_2 = (Assignment) cGroup.eContents().get(2);
      private final RuleCall cEnumConstantListEnumConstantListParserRuleCall_2_0 = (RuleCall) cEnumConstantListAssignment_2.eContents()
         .get(0);
      private final Keyword cCommaKeyword_3 = (Keyword) cGroup.eContents().get(3);
      private final Assignment cEnumBodyDeclarationsAssignment_4 = (Assignment) cGroup.eContents().get(4);
      private final RuleCall cEnumBodyDeclarationsEnumBodyDeclarationsParserRuleCall_4_0 = (RuleCall) cEnumBodyDeclarationsAssignment_4.eContents()
         .get(0);
      private final Keyword cRightCurlyBracketKeyword_5 = (Keyword) cGroup.eContents().get(5);

      // enumBody:
      // {enumBody} "{" enumConstantList=enumConstantList? ","? enumBodyDeclarations=enumBodyDeclarations? "}";
      public ParserRule getRule() {
         return rule;
      }

      // {enumBody} "{" enumConstantList=enumConstantList? ","? enumBodyDeclarations=enumBodyDeclarations? "}"
      public Group getGroup() {
         return cGroup;
      }

      // {enumBody}
      public Action getEnumBodyAction_0() {
         return cEnumBodyAction_0;
      }

      // "{"
      public Keyword getLeftCurlyBracketKeyword_1() {
         return cLeftCurlyBracketKeyword_1;
      }

      // enumConstantList=enumConstantList?
      public Assignment getEnumConstantListAssignment_2() {
         return cEnumConstantListAssignment_2;
      }

      // enumConstantList
      public RuleCall getEnumConstantListEnumConstantListParserRuleCall_2_0() {
         return cEnumConstantListEnumConstantListParserRuleCall_2_0;
      }

      // ","?
      public Keyword getCommaKeyword_3() {
         return cCommaKeyword_3;
      }

      // enumBodyDeclarations=enumBodyDeclarations?
      public Assignment getEnumBodyDeclarationsAssignment_4() {
         return cEnumBodyDeclarationsAssignment_4;
      }

      // enumBodyDeclarations
      public RuleCall getEnumBodyDeclarationsEnumBodyDeclarationsParserRuleCall_4_0() {
         return cEnumBodyDeclarationsEnumBodyDeclarationsParserRuleCall_4_0;
      }

      // "}"
      public Keyword getRightCurlyBracketKeyword_5() {
         return cRightCurlyBracketKeyword_5;
      }
   }

   public class EnumConstantListElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "enumConstantList");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Assignment cEnumConstantsAssignment_0 = (Assignment) cGroup.eContents().get(0);
      private final RuleCall cEnumConstantsEnumConstantParserRuleCall_0_0 = (RuleCall) cEnumConstantsAssignment_0.eContents()
         .get(0);
      private final Group cGroup_1 = (Group) cGroup.eContents().get(1);
      private final Keyword cCommaKeyword_1_0 = (Keyword) cGroup_1.eContents().get(0);
      private final Assignment cEnumConstantsAssignment_1_1 = (Assignment) cGroup_1.eContents().get(1);
      private final RuleCall cEnumConstantsEnumConstantParserRuleCall_1_1_0 = (RuleCall) cEnumConstantsAssignment_1_1.eContents()
         .get(0);

      // enumConstantList:
      // enumConstants+=enumConstant ("," enumConstants+=enumConstant)*;
      public ParserRule getRule() {
         return rule;
      }

      // enumConstants+=enumConstant ("," enumConstants+=enumConstant)*
      public Group getGroup() {
         return cGroup;
      }

      // enumConstants+=enumConstant
      public Assignment getEnumConstantsAssignment_0() {
         return cEnumConstantsAssignment_0;
      }

      // enumConstant
      public RuleCall getEnumConstantsEnumConstantParserRuleCall_0_0() {
         return cEnumConstantsEnumConstantParserRuleCall_0_0;
      }

      // ("," enumConstants+=enumConstant)*
      public Group getGroup_1() {
         return cGroup_1;
      }

      // ","
      public Keyword getCommaKeyword_1_0() {
         return cCommaKeyword_1_0;
      }

      // enumConstants+=enumConstant
      public Assignment getEnumConstantsAssignment_1_1() {
         return cEnumConstantsAssignment_1_1;
      }

      // enumConstant
      public RuleCall getEnumConstantsEnumConstantParserRuleCall_1_1_0() {
         return cEnumConstantsEnumConstantParserRuleCall_1_1_0;
      }
   }

   public class EnumConstantElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "enumConstant");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Assignment cEnumConstantModifiersAssignment_0 = (Assignment) cGroup.eContents().get(0);
      private final RuleCall cEnumConstantModifiersEnumConstantModifierParserRuleCall_0_0 = (RuleCall) cEnumConstantModifiersAssignment_0.eContents()
         .get(0);
      private final Assignment cNameAssignment_1 = (Assignment) cGroup.eContents().get(1);
      private final RuleCall cNameIdentifierTerminalRuleCall_1_0 = (RuleCall) cNameAssignment_1.eContents().get(0);
      private final Group cGroup_2 = (Group) cGroup.eContents().get(2);
      private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword) cGroup_2.eContents().get(0);
      private final Assignment cArgumentListAssignment_2_1 = (Assignment) cGroup_2.eContents().get(1);
      private final RuleCall cArgumentListArgumentListParserRuleCall_2_1_0 = (RuleCall) cArgumentListAssignment_2_1.eContents()
         .get(0);
      private final Keyword cRightParenthesisKeyword_2_2 = (Keyword) cGroup_2.eContents().get(2);
      private final Assignment cClassBodyAssignment_3 = (Assignment) cGroup.eContents().get(3);
      private final RuleCall cClassBodyClassBodyParserRuleCall_3_0 = (RuleCall) cClassBodyAssignment_3.eContents().get(
         0);

      // enumConstant:
      // enumConstantModifiers+=enumConstantModifier* name=Identifier ("(" argumentList=argumentList? ")")?
      // classBody=classBody?;
      public ParserRule getRule() {
         return rule;
      }

      // enumConstantModifiers+=enumConstantModifier* name=Identifier ("(" argumentList=argumentList? ")")?
      // classBody=classBody?
      public Group getGroup() {
         return cGroup;
      }

      // enumConstantModifiers+=enumConstantModifier*
      public Assignment getEnumConstantModifiersAssignment_0() {
         return cEnumConstantModifiersAssignment_0;
      }

      // enumConstantModifier
      public RuleCall getEnumConstantModifiersEnumConstantModifierParserRuleCall_0_0() {
         return cEnumConstantModifiersEnumConstantModifierParserRuleCall_0_0;
      }

      // name=Identifier
      public Assignment getNameAssignment_1() {
         return cNameAssignment_1;
      }

      // Identifier
      public RuleCall getNameIdentifierTerminalRuleCall_1_0() {
         return cNameIdentifierTerminalRuleCall_1_0;
      }

      // ("(" argumentList=argumentList? ")")?
      public Group getGroup_2() {
         return cGroup_2;
      }

      // "("
      public Keyword getLeftParenthesisKeyword_2_0() {
         return cLeftParenthesisKeyword_2_0;
      }

      // argumentList=argumentList?
      public Assignment getArgumentListAssignment_2_1() {
         return cArgumentListAssignment_2_1;
      }

      // argumentList
      public RuleCall getArgumentListArgumentListParserRuleCall_2_1_0() {
         return cArgumentListArgumentListParserRuleCall_2_1_0;
      }

      // ")"
      public Keyword getRightParenthesisKeyword_2_2() {
         return cRightParenthesisKeyword_2_2;
      }

      // classBody=classBody?
      public Assignment getClassBodyAssignment_3() {
         return cClassBodyAssignment_3;
      }

      // classBody
      public RuleCall getClassBodyClassBodyParserRuleCall_3_0() {
         return cClassBodyClassBodyParserRuleCall_3_0;
      }
   }

   public class EnumConstantModifierElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "enumConstantModifier");
      private final RuleCall cAnnotationParserRuleCall = (RuleCall) rule.eContents().get(1);

      // enumConstantModifier:
      // annotation;
      public ParserRule getRule() {
         return rule;
      }

      // annotation
      public RuleCall getAnnotationParserRuleCall() {
         return cAnnotationParserRuleCall;
      }
   }

   public class EnumBodyDeclarationsElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "enumBodyDeclarations");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Action cEnumBodyDeclarationsAction_0 = (Action) cGroup.eContents().get(0);
      private final Keyword cSemicolonKeyword_1 = (Keyword) cGroup.eContents().get(1);
      private final Assignment cClassBodyDeclarationsAssignment_2 = (Assignment) cGroup.eContents().get(2);
      private final RuleCall cClassBodyDeclarationsClassBodyDeclarationParserRuleCall_2_0 = (RuleCall) cClassBodyDeclarationsAssignment_2.eContents()
         .get(0);

      // enumBodyDeclarations:
      // {enumBodyDeclarations} ";" classBodyDeclarations+=classBodyDeclaration*;
      public ParserRule getRule() {
         return rule;
      }

      // {enumBodyDeclarations} ";" classBodyDeclarations+=classBodyDeclaration*
      public Group getGroup() {
         return cGroup;
      }

      // {enumBodyDeclarations}
      public Action getEnumBodyDeclarationsAction_0() {
         return cEnumBodyDeclarationsAction_0;
      }

      // ";"
      public Keyword getSemicolonKeyword_1() {
         return cSemicolonKeyword_1;
      }

      // classBodyDeclarations+=classBodyDeclaration*
      public Assignment getClassBodyDeclarationsAssignment_2() {
         return cClassBodyDeclarationsAssignment_2;
      }

      // classBodyDeclaration
      public RuleCall getClassBodyDeclarationsClassBodyDeclarationParserRuleCall_2_0() {
         return cClassBodyDeclarationsClassBodyDeclarationParserRuleCall_2_0;
      }
   }

   public class InterfaceDeclarationElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "interfaceDeclaration");
      private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
      private final RuleCall cNormalInterfaceDeclarationParserRuleCall_0 = (RuleCall) cAlternatives.eContents().get(0);
      private final RuleCall cAnnotationTypeDeclarationParserRuleCall_1 = (RuleCall) cAlternatives.eContents().get(1);

      // / *
      // * Productions from §9 (Interfaces)
      // * / interfaceDeclaration:
      // normalInterfaceDeclaration | annotationTypeDeclaration;
      public ParserRule getRule() {
         return rule;
      }

      // normalInterfaceDeclaration | annotationTypeDeclaration
      public Alternatives getAlternatives() {
         return cAlternatives;
      }

      // normalInterfaceDeclaration
      public RuleCall getNormalInterfaceDeclarationParserRuleCall_0() {
         return cNormalInterfaceDeclarationParserRuleCall_0;
      }

      // annotationTypeDeclaration
      public RuleCall getAnnotationTypeDeclarationParserRuleCall_1() {
         return cAnnotationTypeDeclarationParserRuleCall_1;
      }
   }

   public class NormalInterfaceDeclarationElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(),
         "normalInterfaceDeclaration");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Assignment cInterfaceModifiersAssignment_0 = (Assignment) cGroup.eContents().get(0);
      private final RuleCall cInterfaceModifiersInterfaceModifierParserRuleCall_0_0 = (RuleCall) cInterfaceModifiersAssignment_0.eContents()
         .get(0);
      private final Keyword cInterfaceKeyword_1 = (Keyword) cGroup.eContents().get(1);
      private final Assignment cNameAssignment_2 = (Assignment) cGroup.eContents().get(2);
      private final RuleCall cNameIdentifierTerminalRuleCall_2_0 = (RuleCall) cNameAssignment_2.eContents().get(0);
      private final Assignment cTypeParametersAssignment_3 = (Assignment) cGroup.eContents().get(3);
      private final RuleCall cTypeParametersTypeParametersParserRuleCall_3_0 = (RuleCall) cTypeParametersAssignment_3.eContents()
         .get(0);
      private final Assignment cExtendsInterfacesAssignment_4 = (Assignment) cGroup.eContents().get(4);
      private final RuleCall cExtendsInterfacesExtendsInterfacesParserRuleCall_4_0 = (RuleCall) cExtendsInterfacesAssignment_4.eContents()
         .get(0);
      private final Assignment cInterfaceBodyAssignment_5 = (Assignment) cGroup.eContents().get(5);
      private final RuleCall cInterfaceBodyInterfaceBodyParserRuleCall_5_0 = (RuleCall) cInterfaceBodyAssignment_5.eContents()
         .get(0);

      // normalInterfaceDeclaration:
      // interfaceModifiers+=interfaceModifier* "interface" name=Identifier typeParameters=typeParameters?
      // extendsInterfaces=extendsInterfaces? interfaceBody=interfaceBody;
      public ParserRule getRule() {
         return rule;
      }

      // interfaceModifiers+=interfaceModifier* "interface" name=Identifier typeParameters=typeParameters?
      // extendsInterfaces=extendsInterfaces? interfaceBody=interfaceBody
      public Group getGroup() {
         return cGroup;
      }

      // interfaceModifiers+=interfaceModifier*
      public Assignment getInterfaceModifiersAssignment_0() {
         return cInterfaceModifiersAssignment_0;
      }

      // interfaceModifier
      public RuleCall getInterfaceModifiersInterfaceModifierParserRuleCall_0_0() {
         return cInterfaceModifiersInterfaceModifierParserRuleCall_0_0;
      }

      // "interface"
      public Keyword getInterfaceKeyword_1() {
         return cInterfaceKeyword_1;
      }

      // name=Identifier
      public Assignment getNameAssignment_2() {
         return cNameAssignment_2;
      }

      // Identifier
      public RuleCall getNameIdentifierTerminalRuleCall_2_0() {
         return cNameIdentifierTerminalRuleCall_2_0;
      }

      // typeParameters=typeParameters?
      public Assignment getTypeParametersAssignment_3() {
         return cTypeParametersAssignment_3;
      }

      // typeParameters
      public RuleCall getTypeParametersTypeParametersParserRuleCall_3_0() {
         return cTypeParametersTypeParametersParserRuleCall_3_0;
      }

      // extendsInterfaces=extendsInterfaces?
      public Assignment getExtendsInterfacesAssignment_4() {
         return cExtendsInterfacesAssignment_4;
      }

      // extendsInterfaces
      public RuleCall getExtendsInterfacesExtendsInterfacesParserRuleCall_4_0() {
         return cExtendsInterfacesExtendsInterfacesParserRuleCall_4_0;
      }

      // interfaceBody=interfaceBody
      public Assignment getInterfaceBodyAssignment_5() {
         return cInterfaceBodyAssignment_5;
      }

      // interfaceBody
      public RuleCall getInterfaceBodyInterfaceBodyParserRuleCall_5_0() {
         return cInterfaceBodyInterfaceBodyParserRuleCall_5_0;
      }
   }

   public class InterfaceModifierElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "interfaceModifier");
      private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
      private final RuleCall cAnnotationParserRuleCall_0 = (RuleCall) cAlternatives.eContents().get(0);
      private final RuleCall cJavaInterfaceModifierParserRuleCall_1 = (RuleCall) cAlternatives.eContents().get(1);

      // interfaceModifier:
      // annotation | JavaInterfaceModifier;
      public ParserRule getRule() {
         return rule;
      }

      // annotation | JavaInterfaceModifier
      public Alternatives getAlternatives() {
         return cAlternatives;
      }

      // annotation
      public RuleCall getAnnotationParserRuleCall_0() {
         return cAnnotationParserRuleCall_0;
      }

      // JavaInterfaceModifier
      public RuleCall getJavaInterfaceModifierParserRuleCall_1() {
         return cJavaInterfaceModifierParserRuleCall_1;
      }
   }

   public class JavaInterfaceModifierElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JavaInterfaceModifier");
      private final Assignment cModifierAssignment = (Assignment) rule.eContents().get(1);
      private final RuleCall cModifierInterfaceModifiersEnumRuleCall_0 = (RuleCall) cModifierAssignment.eContents()
         .get(0);

      // JavaInterfaceModifier:
      // modifier=InterfaceModifiers;
      public ParserRule getRule() {
         return rule;
      }

      // modifier=InterfaceModifiers
      public Assignment getModifierAssignment() {
         return cModifierAssignment;
      }

      // InterfaceModifiers
      public RuleCall getModifierInterfaceModifiersEnumRuleCall_0() {
         return cModifierInterfaceModifiersEnumRuleCall_0;
      }
   }

   public class ExtendsInterfacesElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "extendsInterfaces");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Keyword cExtendsKeyword_0 = (Keyword) cGroup.eContents().get(0);
      private final RuleCall cInterfaceTypeListParserRuleCall_1 = (RuleCall) cGroup.eContents().get(1);

      // extendsInterfaces:
      // "extends" interfaceTypeList;
      public ParserRule getRule() {
         return rule;
      }

      // "extends" interfaceTypeList
      public Group getGroup() {
         return cGroup;
      }

      // "extends"
      public Keyword getExtendsKeyword_0() {
         return cExtendsKeyword_0;
      }

      // interfaceTypeList
      public RuleCall getInterfaceTypeListParserRuleCall_1() {
         return cInterfaceTypeListParserRuleCall_1;
      }
   }

   public class InterfaceBodyElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "interfaceBody");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Action cInterfaceBodyAction_0 = (Action) cGroup.eContents().get(0);
      private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword) cGroup.eContents().get(1);
      private final Assignment cInterfaceMemberDeclarationsAssignment_2 = (Assignment) cGroup.eContents().get(2);
      private final RuleCall cInterfaceMemberDeclarationsInterfaceMemberDeclarationParserRuleCall_2_0 = (RuleCall) cInterfaceMemberDeclarationsAssignment_2.eContents()
         .get(0);
      private final Keyword cRightCurlyBracketKeyword_3 = (Keyword) cGroup.eContents().get(3);

      // interfaceBody:
      // {interfaceBody} "{" interfaceMemberDeclarations+=interfaceMemberDeclaration* "}";
      public ParserRule getRule() {
         return rule;
      }

      // {interfaceBody} "{" interfaceMemberDeclarations+=interfaceMemberDeclaration* "}"
      public Group getGroup() {
         return cGroup;
      }

      // {interfaceBody}
      public Action getInterfaceBodyAction_0() {
         return cInterfaceBodyAction_0;
      }

      // "{"
      public Keyword getLeftCurlyBracketKeyword_1() {
         return cLeftCurlyBracketKeyword_1;
      }

      // interfaceMemberDeclarations+=interfaceMemberDeclaration*
      public Assignment getInterfaceMemberDeclarationsAssignment_2() {
         return cInterfaceMemberDeclarationsAssignment_2;
      }

      // interfaceMemberDeclaration
      public RuleCall getInterfaceMemberDeclarationsInterfaceMemberDeclarationParserRuleCall_2_0() {
         return cInterfaceMemberDeclarationsInterfaceMemberDeclarationParserRuleCall_2_0;
      }

      // "}"
      public Keyword getRightCurlyBracketKeyword_3() {
         return cRightCurlyBracketKeyword_3;
      }
   }

   public class InterfaceMemberDeclarationElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(),
         "interfaceMemberDeclaration");
      private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
      private final RuleCall cConstantDeclarationParserRuleCall_0 = (RuleCall) cAlternatives.eContents().get(0);
      private final RuleCall cInterfaceMethodDeclarationParserRuleCall_1 = (RuleCall) cAlternatives.eContents().get(1);
      private final RuleCall cClassDeclarationParserRuleCall_2 = (RuleCall) cAlternatives.eContents().get(2);
      private final RuleCall cInterfaceDeclarationParserRuleCall_3 = (RuleCall) cAlternatives.eContents().get(3);
      private final Group cGroup_4 = (Group) cAlternatives.eContents().get(4);
      private final Action cInterfaceMemberDeclarationAction_4_0 = (Action) cGroup_4.eContents().get(0);
      private final Keyword cSemicolonKeyword_4_1 = (Keyword) cGroup_4.eContents().get(1);

      // interfaceMemberDeclaration:
      // constantDeclaration | interfaceMethodDeclaration | classDeclaration | interfaceDeclaration |
      // {interfaceMemberDeclaration} ";";
      public ParserRule getRule() {
         return rule;
      }

      // constantDeclaration | interfaceMethodDeclaration | classDeclaration | interfaceDeclaration |
      // {interfaceMemberDeclaration} ";"
      public Alternatives getAlternatives() {
         return cAlternatives;
      }

      // constantDeclaration
      public RuleCall getConstantDeclarationParserRuleCall_0() {
         return cConstantDeclarationParserRuleCall_0;
      }

      // interfaceMethodDeclaration
      public RuleCall getInterfaceMethodDeclarationParserRuleCall_1() {
         return cInterfaceMethodDeclarationParserRuleCall_1;
      }

      // classDeclaration
      public RuleCall getClassDeclarationParserRuleCall_2() {
         return cClassDeclarationParserRuleCall_2;
      }

      // interfaceDeclaration
      public RuleCall getInterfaceDeclarationParserRuleCall_3() {
         return cInterfaceDeclarationParserRuleCall_3;
      }

      // {interfaceMemberDeclaration} ";"
      public Group getGroup_4() {
         return cGroup_4;
      }

      // {interfaceMemberDeclaration}
      public Action getInterfaceMemberDeclarationAction_4_0() {
         return cInterfaceMemberDeclarationAction_4_0;
      }

      // ";"
      public Keyword getSemicolonKeyword_4_1() {
         return cSemicolonKeyword_4_1;
      }
   }

   public class ConstantDeclarationElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "constantDeclaration");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Assignment cConstantModifiersAssignment_0 = (Assignment) cGroup.eContents().get(0);
      private final RuleCall cConstantModifiersConstantModifierParserRuleCall_0_0 = (RuleCall) cConstantModifiersAssignment_0.eContents()
         .get(0);
      private final Assignment cUnannTypeAssignment_1 = (Assignment) cGroup.eContents().get(1);
      private final RuleCall cUnannTypeUnannTypeParserRuleCall_1_0 = (RuleCall) cUnannTypeAssignment_1.eContents().get(
         0);
      private final Assignment cVariableDeclaratorListAssignment_2 = (Assignment) cGroup.eContents().get(2);
      private final RuleCall cVariableDeclaratorListVariableDeclaratorListParserRuleCall_2_0 = (RuleCall) cVariableDeclaratorListAssignment_2.eContents()
         .get(0);
      private final Keyword cSemicolonKeyword_3 = (Keyword) cGroup.eContents().get(3);

      // constantDeclaration:
      // constantModifiers+=constantModifier* unannType=unannType variableDeclaratorList=variableDeclaratorList ";";
      public ParserRule getRule() {
         return rule;
      }

      // constantModifiers+=constantModifier* unannType=unannType variableDeclaratorList=variableDeclaratorList ";"
      public Group getGroup() {
         return cGroup;
      }

      // constantModifiers+=constantModifier*
      public Assignment getConstantModifiersAssignment_0() {
         return cConstantModifiersAssignment_0;
      }

      // constantModifier
      public RuleCall getConstantModifiersConstantModifierParserRuleCall_0_0() {
         return cConstantModifiersConstantModifierParserRuleCall_0_0;
      }

      // unannType=unannType
      public Assignment getUnannTypeAssignment_1() {
         return cUnannTypeAssignment_1;
      }

      // unannType
      public RuleCall getUnannTypeUnannTypeParserRuleCall_1_0() {
         return cUnannTypeUnannTypeParserRuleCall_1_0;
      }

      // variableDeclaratorList=variableDeclaratorList
      public Assignment getVariableDeclaratorListAssignment_2() {
         return cVariableDeclaratorListAssignment_2;
      }

      // variableDeclaratorList
      public RuleCall getVariableDeclaratorListVariableDeclaratorListParserRuleCall_2_0() {
         return cVariableDeclaratorListVariableDeclaratorListParserRuleCall_2_0;
      }

      // ";"
      public Keyword getSemicolonKeyword_3() {
         return cSemicolonKeyword_3;
      }
   }

   public class ConstantModifierElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "constantModifier");
      private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
      private final RuleCall cAnnotationParserRuleCall_0 = (RuleCall) cAlternatives.eContents().get(0);
      private final RuleCall cJavaConstantModifierParserRuleCall_1 = (RuleCall) cAlternatives.eContents().get(1);

      // constantModifier:
      // annotation | JavaConstantModifier;
      public ParserRule getRule() {
         return rule;
      }

      // annotation | JavaConstantModifier
      public Alternatives getAlternatives() {
         return cAlternatives;
      }

      // annotation
      public RuleCall getAnnotationParserRuleCall_0() {
         return cAnnotationParserRuleCall_0;
      }

      // JavaConstantModifier
      public RuleCall getJavaConstantModifierParserRuleCall_1() {
         return cJavaConstantModifierParserRuleCall_1;
      }
   }

   public class JavaConstantModifierElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JavaConstantModifier");
      private final Assignment cModifierAssignment = (Assignment) rule.eContents().get(1);
      private final RuleCall cModifierConstantModifiersEnumRuleCall_0 = (RuleCall) cModifierAssignment.eContents().get(
         0);

      // JavaConstantModifier:
      // modifier=ConstantModifiers;
      public ParserRule getRule() {
         return rule;
      }

      // modifier=ConstantModifiers
      public Assignment getModifierAssignment() {
         return cModifierAssignment;
      }

      // ConstantModifiers
      public RuleCall getModifierConstantModifiersEnumRuleCall_0() {
         return cModifierConstantModifiersEnumRuleCall_0;
      }
   }

   public class InterfaceMethodDeclarationElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(),
         "interfaceMethodDeclaration");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Assignment cInterfaceMethodModifiersAssignment_0 = (Assignment) cGroup.eContents().get(0);
      private final RuleCall cInterfaceMethodModifiersInterfaceMethodModifierParserRuleCall_0_0 = (RuleCall) cInterfaceMethodModifiersAssignment_0.eContents()
         .get(0);
      private final Assignment cMethodHeaderAssignment_1 = (Assignment) cGroup.eContents().get(1);
      private final RuleCall cMethodHeaderMethodHeaderParserRuleCall_1_0 = (RuleCall) cMethodHeaderAssignment_1.eContents()
         .get(0);
      private final Assignment cMethodBodyAssignment_2 = (Assignment) cGroup.eContents().get(2);
      private final RuleCall cMethodBodyMethodBodyParserRuleCall_2_0 = (RuleCall) cMethodBodyAssignment_2.eContents()
         .get(0);

      // interfaceMethodDeclaration:
      // interfaceMethodModifiers+=interfaceMethodModifier* methodHeader=methodHeader methodBody=methodBody;
      public ParserRule getRule() {
         return rule;
      }

      // interfaceMethodModifiers+=interfaceMethodModifier* methodHeader=methodHeader methodBody=methodBody
      public Group getGroup() {
         return cGroup;
      }

      // interfaceMethodModifiers+=interfaceMethodModifier*
      public Assignment getInterfaceMethodModifiersAssignment_0() {
         return cInterfaceMethodModifiersAssignment_0;
      }

      // interfaceMethodModifier
      public RuleCall getInterfaceMethodModifiersInterfaceMethodModifierParserRuleCall_0_0() {
         return cInterfaceMethodModifiersInterfaceMethodModifierParserRuleCall_0_0;
      }

      // methodHeader=methodHeader
      public Assignment getMethodHeaderAssignment_1() {
         return cMethodHeaderAssignment_1;
      }

      // methodHeader
      public RuleCall getMethodHeaderMethodHeaderParserRuleCall_1_0() {
         return cMethodHeaderMethodHeaderParserRuleCall_1_0;
      }

      // methodBody=methodBody
      public Assignment getMethodBodyAssignment_2() {
         return cMethodBodyAssignment_2;
      }

      // methodBody
      public RuleCall getMethodBodyMethodBodyParserRuleCall_2_0() {
         return cMethodBodyMethodBodyParserRuleCall_2_0;
      }
   }

   public class InterfaceMethodModifierElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "interfaceMethodModifier");
      private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
      private final RuleCall cAnnotationParserRuleCall_0 = (RuleCall) cAlternatives.eContents().get(0);
      private final RuleCall cJavaInterfaceMethodModifiersParserRuleCall_1 = (RuleCall) cAlternatives.eContents()
         .get(1);

      // interfaceMethodModifier:
      // annotation | JavaInterfaceMethodModifiers;
      public ParserRule getRule() {
         return rule;
      }

      // annotation | JavaInterfaceMethodModifiers
      public Alternatives getAlternatives() {
         return cAlternatives;
      }

      // annotation
      public RuleCall getAnnotationParserRuleCall_0() {
         return cAnnotationParserRuleCall_0;
      }

      // JavaInterfaceMethodModifiers
      public RuleCall getJavaInterfaceMethodModifiersParserRuleCall_1() {
         return cJavaInterfaceMethodModifiersParserRuleCall_1;
      }
   }

   public class JavaInterfaceMethodModifiersElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(),
         "JavaInterfaceMethodModifiers");
      private final Assignment cModifiersAssignment = (Assignment) rule.eContents().get(1);
      private final RuleCall cModifiersInterfaceMethodModifiersEnumRuleCall_0 = (RuleCall) cModifiersAssignment.eContents()
         .get(0);

      // JavaInterfaceMethodModifiers:
      // modifiers=InterfaceMethodModifiers;
      public ParserRule getRule() {
         return rule;
      }

      // modifiers=InterfaceMethodModifiers
      public Assignment getModifiersAssignment() {
         return cModifiersAssignment;
      }

      // InterfaceMethodModifiers
      public RuleCall getModifiersInterfaceMethodModifiersEnumRuleCall_0() {
         return cModifiersInterfaceMethodModifiersEnumRuleCall_0;
      }
   }

   public class AnnotationTypeDeclarationElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(),
         "annotationTypeDeclaration");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Assignment cInterfaceModifiersAssignment_0 = (Assignment) cGroup.eContents().get(0);
      private final RuleCall cInterfaceModifiersInterfaceModifierParserRuleCall_0_0 = (RuleCall) cInterfaceModifiersAssignment_0.eContents()
         .get(0);
      private final Keyword cCommercialAtKeyword_1 = (Keyword) cGroup.eContents().get(1);
      private final Keyword cInterfaceKeyword_2 = (Keyword) cGroup.eContents().get(2);
      private final Assignment cNameAssignment_3 = (Assignment) cGroup.eContents().get(3);
      private final RuleCall cNameIdentifierTerminalRuleCall_3_0 = (RuleCall) cNameAssignment_3.eContents().get(0);
      private final Assignment cAnnotationTypeBodyAssignment_4 = (Assignment) cGroup.eContents().get(4);
      private final RuleCall cAnnotationTypeBodyAnnotationTypeBodyParserRuleCall_4_0 = (RuleCall) cAnnotationTypeBodyAssignment_4.eContents()
         .get(0);

      // annotationTypeDeclaration:
      // interfaceModifiers+=interfaceModifier* "@" "interface" name=Identifier annotationTypeBody=annotationTypeBody;
      public ParserRule getRule() {
         return rule;
      }

      // interfaceModifiers+=interfaceModifier* "@" "interface" name=Identifier annotationTypeBody=annotationTypeBody
      public Group getGroup() {
         return cGroup;
      }

      // interfaceModifiers+=interfaceModifier*
      public Assignment getInterfaceModifiersAssignment_0() {
         return cInterfaceModifiersAssignment_0;
      }

      // interfaceModifier
      public RuleCall getInterfaceModifiersInterfaceModifierParserRuleCall_0_0() {
         return cInterfaceModifiersInterfaceModifierParserRuleCall_0_0;
      }

      // "@"
      public Keyword getCommercialAtKeyword_1() {
         return cCommercialAtKeyword_1;
      }

      // "interface"
      public Keyword getInterfaceKeyword_2() {
         return cInterfaceKeyword_2;
      }

      // name=Identifier
      public Assignment getNameAssignment_3() {
         return cNameAssignment_3;
      }

      // Identifier
      public RuleCall getNameIdentifierTerminalRuleCall_3_0() {
         return cNameIdentifierTerminalRuleCall_3_0;
      }

      // annotationTypeBody=annotationTypeBody
      public Assignment getAnnotationTypeBodyAssignment_4() {
         return cAnnotationTypeBodyAssignment_4;
      }

      // annotationTypeBody
      public RuleCall getAnnotationTypeBodyAnnotationTypeBodyParserRuleCall_4_0() {
         return cAnnotationTypeBodyAnnotationTypeBodyParserRuleCall_4_0;
      }
   }

   public class AnnotationTypeBodyElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "annotationTypeBody");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Action cAnnotationTypeBodyAction_0 = (Action) cGroup.eContents().get(0);
      private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword) cGroup.eContents().get(1);
      private final Assignment cAnnotationTypeMemberDeclarationsAssignment_2 = (Assignment) cGroup.eContents().get(2);
      private final RuleCall cAnnotationTypeMemberDeclarationsAnnotationTypeMemberDeclarationParserRuleCall_2_0 = (RuleCall) cAnnotationTypeMemberDeclarationsAssignment_2.eContents()
         .get(0);
      private final Keyword cRightCurlyBracketKeyword_3 = (Keyword) cGroup.eContents().get(3);

      // annotationTypeBody:
      // {annotationTypeBody} "{" annotationTypeMemberDeclarations+=annotationTypeMemberDeclaration* "}";
      public ParserRule getRule() {
         return rule;
      }

      // {annotationTypeBody} "{" annotationTypeMemberDeclarations+=annotationTypeMemberDeclaration* "}"
      public Group getGroup() {
         return cGroup;
      }

      // {annotationTypeBody}
      public Action getAnnotationTypeBodyAction_0() {
         return cAnnotationTypeBodyAction_0;
      }

      // "{"
      public Keyword getLeftCurlyBracketKeyword_1() {
         return cLeftCurlyBracketKeyword_1;
      }

      // annotationTypeMemberDeclarations+=annotationTypeMemberDeclaration*
      public Assignment getAnnotationTypeMemberDeclarationsAssignment_2() {
         return cAnnotationTypeMemberDeclarationsAssignment_2;
      }

      // annotationTypeMemberDeclaration
      public RuleCall getAnnotationTypeMemberDeclarationsAnnotationTypeMemberDeclarationParserRuleCall_2_0() {
         return cAnnotationTypeMemberDeclarationsAnnotationTypeMemberDeclarationParserRuleCall_2_0;
      }

      // "}"
      public Keyword getRightCurlyBracketKeyword_3() {
         return cRightCurlyBracketKeyword_3;
      }
   }

   public class AnnotationTypeMemberDeclarationElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(),
         "annotationTypeMemberDeclaration");
      private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
      private final RuleCall cAnnotationTypeElementDeclarationParserRuleCall_0 = (RuleCall) cAlternatives.eContents()
         .get(0);
      private final RuleCall cConstantDeclarationParserRuleCall_1 = (RuleCall) cAlternatives.eContents().get(1);
      private final RuleCall cClassDeclarationParserRuleCall_2 = (RuleCall) cAlternatives.eContents().get(2);
      private final RuleCall cInterfaceDeclarationParserRuleCall_3 = (RuleCall) cAlternatives.eContents().get(3);
      private final Group cGroup_4 = (Group) cAlternatives.eContents().get(4);
      private final Action cAnnotationTypeMemberDeclarationAction_4_0 = (Action) cGroup_4.eContents().get(0);
      private final Keyword cSemicolonKeyword_4_1 = (Keyword) cGroup_4.eContents().get(1);

      // annotationTypeMemberDeclaration:
      // annotationTypeElementDeclaration | constantDeclaration | classDeclaration | interfaceDeclaration |
      // {annotationTypeMemberDeclaration} ";";
      public ParserRule getRule() {
         return rule;
      }

      // annotationTypeElementDeclaration | constantDeclaration | classDeclaration | interfaceDeclaration |
      // {annotationTypeMemberDeclaration} ";"
      public Alternatives getAlternatives() {
         return cAlternatives;
      }

      // annotationTypeElementDeclaration
      public RuleCall getAnnotationTypeElementDeclarationParserRuleCall_0() {
         return cAnnotationTypeElementDeclarationParserRuleCall_0;
      }

      // constantDeclaration
      public RuleCall getConstantDeclarationParserRuleCall_1() {
         return cConstantDeclarationParserRuleCall_1;
      }

      // classDeclaration
      public RuleCall getClassDeclarationParserRuleCall_2() {
         return cClassDeclarationParserRuleCall_2;
      }

      // interfaceDeclaration
      public RuleCall getInterfaceDeclarationParserRuleCall_3() {
         return cInterfaceDeclarationParserRuleCall_3;
      }

      // {annotationTypeMemberDeclaration} ";"
      public Group getGroup_4() {
         return cGroup_4;
      }

      // {annotationTypeMemberDeclaration}
      public Action getAnnotationTypeMemberDeclarationAction_4_0() {
         return cAnnotationTypeMemberDeclarationAction_4_0;
      }

      // ";"
      public Keyword getSemicolonKeyword_4_1() {
         return cSemicolonKeyword_4_1;
      }
   }

   public class AnnotationTypeElementDeclarationElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(),
         "annotationTypeElementDeclaration");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Assignment cAnnotationTypeElementModifiersAssignment_0 = (Assignment) cGroup.eContents().get(0);
      private final RuleCall cAnnotationTypeElementModifiersAnnotationTypeElementModifierParserRuleCall_0_0 = (RuleCall) cAnnotationTypeElementModifiersAssignment_0.eContents()
         .get(0);
      private final Assignment cUnannTypeAssignment_1 = (Assignment) cGroup.eContents().get(1);
      private final RuleCall cUnannTypeUnannTypeParserRuleCall_1_0 = (RuleCall) cUnannTypeAssignment_1.eContents().get(
         0);
      private final Assignment cNameAssignment_2 = (Assignment) cGroup.eContents().get(2);
      private final RuleCall cNameIdentifierTerminalRuleCall_2_0 = (RuleCall) cNameAssignment_2.eContents().get(0);
      private final Keyword cLeftParenthesisKeyword_3 = (Keyword) cGroup.eContents().get(3);
      private final Keyword cRightParenthesisKeyword_4 = (Keyword) cGroup.eContents().get(4);
      private final Assignment cDimsAssignment_5 = (Assignment) cGroup.eContents().get(5);
      private final RuleCall cDimsDimsParserRuleCall_5_0 = (RuleCall) cDimsAssignment_5.eContents().get(0);
      private final Assignment cDefaultValueAssignment_6 = (Assignment) cGroup.eContents().get(6);
      private final RuleCall cDefaultValueDefaultValueParserRuleCall_6_0 = (RuleCall) cDefaultValueAssignment_6.eContents()
         .get(0);
      private final Keyword cSemicolonKeyword_7 = (Keyword) cGroup.eContents().get(7);

      // annotationTypeElementDeclaration:
      // annotationTypeElementModifiers+=annotationTypeElementModifier* unannType=unannType name=Identifier "(" ")"
      // dims=dims?
      // defaultValue=defaultValue? ";";
      public ParserRule getRule() {
         return rule;
      }

      // annotationTypeElementModifiers+=annotationTypeElementModifier* unannType=unannType name=Identifier "(" ")"
      // dims=dims?
      // defaultValue=defaultValue? ";"
      public Group getGroup() {
         return cGroup;
      }

      // annotationTypeElementModifiers+=annotationTypeElementModifier*
      public Assignment getAnnotationTypeElementModifiersAssignment_0() {
         return cAnnotationTypeElementModifiersAssignment_0;
      }

      // annotationTypeElementModifier
      public RuleCall getAnnotationTypeElementModifiersAnnotationTypeElementModifierParserRuleCall_0_0() {
         return cAnnotationTypeElementModifiersAnnotationTypeElementModifierParserRuleCall_0_0;
      }

      // unannType=unannType
      public Assignment getUnannTypeAssignment_1() {
         return cUnannTypeAssignment_1;
      }

      // unannType
      public RuleCall getUnannTypeUnannTypeParserRuleCall_1_0() {
         return cUnannTypeUnannTypeParserRuleCall_1_0;
      }

      // name=Identifier
      public Assignment getNameAssignment_2() {
         return cNameAssignment_2;
      }

      // Identifier
      public RuleCall getNameIdentifierTerminalRuleCall_2_0() {
         return cNameIdentifierTerminalRuleCall_2_0;
      }

      // "("
      public Keyword getLeftParenthesisKeyword_3() {
         return cLeftParenthesisKeyword_3;
      }

      // ")"
      public Keyword getRightParenthesisKeyword_4() {
         return cRightParenthesisKeyword_4;
      }

      // dims=dims?
      public Assignment getDimsAssignment_5() {
         return cDimsAssignment_5;
      }

      // dims
      public RuleCall getDimsDimsParserRuleCall_5_0() {
         return cDimsDimsParserRuleCall_5_0;
      }

      // defaultValue=defaultValue?
      public Assignment getDefaultValueAssignment_6() {
         return cDefaultValueAssignment_6;
      }

      // defaultValue
      public RuleCall getDefaultValueDefaultValueParserRuleCall_6_0() {
         return cDefaultValueDefaultValueParserRuleCall_6_0;
      }

      // ";"
      public Keyword getSemicolonKeyword_7() {
         return cSemicolonKeyword_7;
      }
   }

   public class AnnotationTypeElementModifierElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(),
         "annotationTypeElementModifier");
      private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
      private final RuleCall cAnnotationParserRuleCall_0 = (RuleCall) cAlternatives.eContents().get(0);
      private final RuleCall cJavaAnnotationTypeElementModifiersParserRuleCall_1 = (RuleCall) cAlternatives.eContents()
         .get(1);

      // annotationTypeElementModifier:
      // annotation | JavaAnnotationTypeElementModifiers;
      public ParserRule getRule() {
         return rule;
      }

      // annotation | JavaAnnotationTypeElementModifiers
      public Alternatives getAlternatives() {
         return cAlternatives;
      }

      // annotation
      public RuleCall getAnnotationParserRuleCall_0() {
         return cAnnotationParserRuleCall_0;
      }

      // JavaAnnotationTypeElementModifiers
      public RuleCall getJavaAnnotationTypeElementModifiersParserRuleCall_1() {
         return cJavaAnnotationTypeElementModifiersParserRuleCall_1;
      }
   }

   public class JavaAnnotationTypeElementModifiersElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(),
         "JavaAnnotationTypeElementModifiers");
      private final Assignment cModifierAssignment = (Assignment) rule.eContents().get(1);
      private final RuleCall cModifierAnnotationTypeElementModifiersEnumRuleCall_0 = (RuleCall) cModifierAssignment.eContents()
         .get(0);

      // JavaAnnotationTypeElementModifiers:
      // modifier=AnnotationTypeElementModifiers;
      public ParserRule getRule() {
         return rule;
      }

      // modifier=AnnotationTypeElementModifiers
      public Assignment getModifierAssignment() {
         return cModifierAssignment;
      }

      // AnnotationTypeElementModifiers
      public RuleCall getModifierAnnotationTypeElementModifiersEnumRuleCall_0() {
         return cModifierAnnotationTypeElementModifiersEnumRuleCall_0;
      }
   }

   public class DefaultValueElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "defaultValue");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Keyword cDefaultKeyword_0 = (Keyword) cGroup.eContents().get(0);
      private final RuleCall cElementValueParserRuleCall_1 = (RuleCall) cGroup.eContents().get(1);

      // defaultValue:
      // "default" elementValue;
      public ParserRule getRule() {
         return rule;
      }

      // "default" elementValue
      public Group getGroup() {
         return cGroup;
      }

      // "default"
      public Keyword getDefaultKeyword_0() {
         return cDefaultKeyword_0;
      }

      // elementValue
      public RuleCall getElementValueParserRuleCall_1() {
         return cElementValueParserRuleCall_1;
      }
   }

   public class AnnotationElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "annotation");
      private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
      private final RuleCall cNormalAnnotationParserRuleCall_0 = (RuleCall) cAlternatives.eContents().get(0);
      private final RuleCall cMarkerAnnotationParserRuleCall_1 = (RuleCall) cAlternatives.eContents().get(1);
      private final RuleCall cSingleElementAnnotationParserRuleCall_2 = (RuleCall) cAlternatives.eContents().get(2);

      // annotation:
      // normalAnnotation | markerAnnotation | singleElementAnnotation;
      public ParserRule getRule() {
         return rule;
      }

      // normalAnnotation | markerAnnotation | singleElementAnnotation
      public Alternatives getAlternatives() {
         return cAlternatives;
      }

      // normalAnnotation
      public RuleCall getNormalAnnotationParserRuleCall_0() {
         return cNormalAnnotationParserRuleCall_0;
      }

      // markerAnnotation
      public RuleCall getMarkerAnnotationParserRuleCall_1() {
         return cMarkerAnnotationParserRuleCall_1;
      }

      // singleElementAnnotation
      public RuleCall getSingleElementAnnotationParserRuleCall_2() {
         return cSingleElementAnnotationParserRuleCall_2;
      }
   }

   public class NormalAnnotationElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "normalAnnotation");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Keyword cCommercialAtKeyword_0 = (Keyword) cGroup.eContents().get(0);
      private final Assignment cTypeNameAssignment_1 = (Assignment) cGroup.eContents().get(1);
      private final RuleCall cTypeNameTypeNameParserRuleCall_1_0 = (RuleCall) cTypeNameAssignment_1.eContents().get(0);
      private final Keyword cLeftParenthesisKeyword_2 = (Keyword) cGroup.eContents().get(2);
      private final Assignment cElementValuePairListAssignment_3 = (Assignment) cGroup.eContents().get(3);
      private final RuleCall cElementValuePairListElementValuePairListParserRuleCall_3_0 = (RuleCall) cElementValuePairListAssignment_3.eContents()
         .get(0);
      private final Keyword cRightParenthesisKeyword_4 = (Keyword) cGroup.eContents().get(4);

      // normalAnnotation:
      // "@" typeName=typeName "(" elementValuePairList=elementValuePairList? ")";
      public ParserRule getRule() {
         return rule;
      }

      // "@" typeName=typeName "(" elementValuePairList=elementValuePairList? ")"
      public Group getGroup() {
         return cGroup;
      }

      // "@"
      public Keyword getCommercialAtKeyword_0() {
         return cCommercialAtKeyword_0;
      }

      // typeName=typeName
      public Assignment getTypeNameAssignment_1() {
         return cTypeNameAssignment_1;
      }

      // typeName
      public RuleCall getTypeNameTypeNameParserRuleCall_1_0() {
         return cTypeNameTypeNameParserRuleCall_1_0;
      }

      // "("
      public Keyword getLeftParenthesisKeyword_2() {
         return cLeftParenthesisKeyword_2;
      }

      // elementValuePairList=elementValuePairList?
      public Assignment getElementValuePairListAssignment_3() {
         return cElementValuePairListAssignment_3;
      }

      // elementValuePairList
      public RuleCall getElementValuePairListElementValuePairListParserRuleCall_3_0() {
         return cElementValuePairListElementValuePairListParserRuleCall_3_0;
      }

      // ")"
      public Keyword getRightParenthesisKeyword_4() {
         return cRightParenthesisKeyword_4;
      }
   }

   public class ElementValuePairListElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "elementValuePairList");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Assignment cElementValuePairsAssignment_0 = (Assignment) cGroup.eContents().get(0);
      private final RuleCall cElementValuePairsElementValuePairParserRuleCall_0_0 = (RuleCall) cElementValuePairsAssignment_0.eContents()
         .get(0);
      private final Group cGroup_1 = (Group) cGroup.eContents().get(1);
      private final Keyword cCommaKeyword_1_0 = (Keyword) cGroup_1.eContents().get(0);
      private final Assignment cElementValuePairsAssignment_1_1 = (Assignment) cGroup_1.eContents().get(1);
      private final RuleCall cElementValuePairsElementValuePairParserRuleCall_1_1_0 = (RuleCall) cElementValuePairsAssignment_1_1.eContents()
         .get(0);

      // elementValuePairList:
      // elementValuePairs+=elementValuePair ("," elementValuePairs+=elementValuePair)*;
      public ParserRule getRule() {
         return rule;
      }

      // elementValuePairs+=elementValuePair ("," elementValuePairs+=elementValuePair)*
      public Group getGroup() {
         return cGroup;
      }

      // elementValuePairs+=elementValuePair
      public Assignment getElementValuePairsAssignment_0() {
         return cElementValuePairsAssignment_0;
      }

      // elementValuePair
      public RuleCall getElementValuePairsElementValuePairParserRuleCall_0_0() {
         return cElementValuePairsElementValuePairParserRuleCall_0_0;
      }

      // ("," elementValuePairs+=elementValuePair)*
      public Group getGroup_1() {
         return cGroup_1;
      }

      // ","
      public Keyword getCommaKeyword_1_0() {
         return cCommaKeyword_1_0;
      }

      // elementValuePairs+=elementValuePair
      public Assignment getElementValuePairsAssignment_1_1() {
         return cElementValuePairsAssignment_1_1;
      }

      // elementValuePair
      public RuleCall getElementValuePairsElementValuePairParserRuleCall_1_1_0() {
         return cElementValuePairsElementValuePairParserRuleCall_1_1_0;
      }
   }

   public class ElementValuePairElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "elementValuePair");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Assignment cNameAssignment_0 = (Assignment) cGroup.eContents().get(0);
      private final RuleCall cNameIdentifierTerminalRuleCall_0_0 = (RuleCall) cNameAssignment_0.eContents().get(0);
      private final Keyword cEqualsSignKeyword_1 = (Keyword) cGroup.eContents().get(1);
      private final Assignment cElementValueAssignment_2 = (Assignment) cGroup.eContents().get(2);
      private final RuleCall cElementValueElementValueParserRuleCall_2_0 = (RuleCall) cElementValueAssignment_2.eContents()
         .get(0);

      // elementValuePair:
      // name=Identifier "=" elementValue=elementValue;
      public ParserRule getRule() {
         return rule;
      }

      // name=Identifier "=" elementValue=elementValue
      public Group getGroup() {
         return cGroup;
      }

      // name=Identifier
      public Assignment getNameAssignment_0() {
         return cNameAssignment_0;
      }

      // Identifier
      public RuleCall getNameIdentifierTerminalRuleCall_0_0() {
         return cNameIdentifierTerminalRuleCall_0_0;
      }

      // "="
      public Keyword getEqualsSignKeyword_1() {
         return cEqualsSignKeyword_1;
      }

      // elementValue=elementValue
      public Assignment getElementValueAssignment_2() {
         return cElementValueAssignment_2;
      }

      // elementValue
      public RuleCall getElementValueElementValueParserRuleCall_2_0() {
         return cElementValueElementValueParserRuleCall_2_0;
      }
   }

   public class ElementValueElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "elementValue");
      private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
      private final RuleCall cConditionalExpressionParserRuleCall_0 = (RuleCall) cAlternatives.eContents().get(0);
      private final RuleCall cElementValueArrayInitializerParserRuleCall_1 = (RuleCall) cAlternatives.eContents()
         .get(1);
      private final RuleCall cAnnotationParserRuleCall_2 = (RuleCall) cAlternatives.eContents().get(2);

      // elementValue:
      // conditionalExpression | elementValueArrayInitializer | annotation;
      public ParserRule getRule() {
         return rule;
      }

      // conditionalExpression | elementValueArrayInitializer | annotation
      public Alternatives getAlternatives() {
         return cAlternatives;
      }

      // conditionalExpression
      public RuleCall getConditionalExpressionParserRuleCall_0() {
         return cConditionalExpressionParserRuleCall_0;
      }

      // elementValueArrayInitializer
      public RuleCall getElementValueArrayInitializerParserRuleCall_1() {
         return cElementValueArrayInitializerParserRuleCall_1;
      }

      // annotation
      public RuleCall getAnnotationParserRuleCall_2() {
         return cAnnotationParserRuleCall_2;
      }
   }

   public class ElementValueArrayInitializerElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(),
         "elementValueArrayInitializer");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Action cElementValueArrayInitializerAction_0 = (Action) cGroup.eContents().get(0);
      private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword) cGroup.eContents().get(1);
      private final Assignment cElementValueListAssignment_2 = (Assignment) cGroup.eContents().get(2);
      private final RuleCall cElementValueListElementValueListParserRuleCall_2_0 = (RuleCall) cElementValueListAssignment_2.eContents()
         .get(0);
      private final Keyword cCommaKeyword_3 = (Keyword) cGroup.eContents().get(3);
      private final Keyword cRightCurlyBracketKeyword_4 = (Keyword) cGroup.eContents().get(4);

      // elementValueArrayInitializer:
      // {elementValueArrayInitializer} "{" elementValueList=elementValueList? ","? "}";
      public ParserRule getRule() {
         return rule;
      }

      // {elementValueArrayInitializer} "{" elementValueList=elementValueList? ","? "}"
      public Group getGroup() {
         return cGroup;
      }

      // {elementValueArrayInitializer}
      public Action getElementValueArrayInitializerAction_0() {
         return cElementValueArrayInitializerAction_0;
      }

      // "{"
      public Keyword getLeftCurlyBracketKeyword_1() {
         return cLeftCurlyBracketKeyword_1;
      }

      // elementValueList=elementValueList?
      public Assignment getElementValueListAssignment_2() {
         return cElementValueListAssignment_2;
      }

      // elementValueList
      public RuleCall getElementValueListElementValueListParserRuleCall_2_0() {
         return cElementValueListElementValueListParserRuleCall_2_0;
      }

      // ","?
      public Keyword getCommaKeyword_3() {
         return cCommaKeyword_3;
      }

      // "}"
      public Keyword getRightCurlyBracketKeyword_4() {
         return cRightCurlyBracketKeyword_4;
      }
   }

   public class ElementValueListElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "elementValueList");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Assignment cElementValuesAssignment_0 = (Assignment) cGroup.eContents().get(0);
      private final RuleCall cElementValuesElementValueParserRuleCall_0_0 = (RuleCall) cElementValuesAssignment_0.eContents()
         .get(0);
      private final Group cGroup_1 = (Group) cGroup.eContents().get(1);
      private final Keyword cCommaKeyword_1_0 = (Keyword) cGroup_1.eContents().get(0);
      private final Assignment cElementValuesAssignment_1_1 = (Assignment) cGroup_1.eContents().get(1);
      private final RuleCall cElementValuesElementValueParserRuleCall_1_1_0 = (RuleCall) cElementValuesAssignment_1_1.eContents()
         .get(0);

      // elementValueList:
      // elementValues+=elementValue ("," elementValues+=elementValue)*;
      public ParserRule getRule() {
         return rule;
      }

      // elementValues+=elementValue ("," elementValues+=elementValue)*
      public Group getGroup() {
         return cGroup;
      }

      // elementValues+=elementValue
      public Assignment getElementValuesAssignment_0() {
         return cElementValuesAssignment_0;
      }

      // elementValue
      public RuleCall getElementValuesElementValueParserRuleCall_0_0() {
         return cElementValuesElementValueParserRuleCall_0_0;
      }

      // ("," elementValues+=elementValue)*
      public Group getGroup_1() {
         return cGroup_1;
      }

      // ","
      public Keyword getCommaKeyword_1_0() {
         return cCommaKeyword_1_0;
      }

      // elementValues+=elementValue
      public Assignment getElementValuesAssignment_1_1() {
         return cElementValuesAssignment_1_1;
      }

      // elementValue
      public RuleCall getElementValuesElementValueParserRuleCall_1_1_0() {
         return cElementValuesElementValueParserRuleCall_1_1_0;
      }
   }

   public class MarkerAnnotationElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "markerAnnotation");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Keyword cCommercialAtKeyword_0 = (Keyword) cGroup.eContents().get(0);
      private final Assignment cTypeNameAssignment_1 = (Assignment) cGroup.eContents().get(1);
      private final RuleCall cTypeNameTypeNameParserRuleCall_1_0 = (RuleCall) cTypeNameAssignment_1.eContents().get(0);

      // markerAnnotation:
      // "@" typeName=typeName;
      public ParserRule getRule() {
         return rule;
      }

      // "@" typeName=typeName
      public Group getGroup() {
         return cGroup;
      }

      // "@"
      public Keyword getCommercialAtKeyword_0() {
         return cCommercialAtKeyword_0;
      }

      // typeName=typeName
      public Assignment getTypeNameAssignment_1() {
         return cTypeNameAssignment_1;
      }

      // typeName
      public RuleCall getTypeNameTypeNameParserRuleCall_1_0() {
         return cTypeNameTypeNameParserRuleCall_1_0;
      }
   }

   public class SingleElementAnnotationElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "singleElementAnnotation");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Keyword cCommercialAtKeyword_0 = (Keyword) cGroup.eContents().get(0);
      private final Assignment cTypeNameAssignment_1 = (Assignment) cGroup.eContents().get(1);
      private final RuleCall cTypeNameTypeNameParserRuleCall_1_0 = (RuleCall) cTypeNameAssignment_1.eContents().get(0);
      private final Keyword cLeftParenthesisKeyword_2 = (Keyword) cGroup.eContents().get(2);
      private final Assignment cElementValueAssignment_3 = (Assignment) cGroup.eContents().get(3);
      private final RuleCall cElementValueElementValueParserRuleCall_3_0 = (RuleCall) cElementValueAssignment_3.eContents()
         .get(0);
      private final Keyword cRightParenthesisKeyword_4 = (Keyword) cGroup.eContents().get(4);

      // singleElementAnnotation:
      // "@" typeName=typeName "(" elementValue=elementValue ")";
      public ParserRule getRule() {
         return rule;
      }

      // "@" typeName=typeName "(" elementValue=elementValue ")"
      public Group getGroup() {
         return cGroup;
      }

      // "@"
      public Keyword getCommercialAtKeyword_0() {
         return cCommercialAtKeyword_0;
      }

      // typeName=typeName
      public Assignment getTypeNameAssignment_1() {
         return cTypeNameAssignment_1;
      }

      // typeName
      public RuleCall getTypeNameTypeNameParserRuleCall_1_0() {
         return cTypeNameTypeNameParserRuleCall_1_0;
      }

      // "("
      public Keyword getLeftParenthesisKeyword_2() {
         return cLeftParenthesisKeyword_2;
      }

      // elementValue=elementValue
      public Assignment getElementValueAssignment_3() {
         return cElementValueAssignment_3;
      }

      // elementValue
      public RuleCall getElementValueElementValueParserRuleCall_3_0() {
         return cElementValueElementValueParserRuleCall_3_0;
      }

      // ")"
      public Keyword getRightParenthesisKeyword_4() {
         return cRightParenthesisKeyword_4;
      }
   }

   public class ArrayInitializerElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "arrayInitializer");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Action cArrayInitializerAction_0 = (Action) cGroup.eContents().get(0);
      private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword) cGroup.eContents().get(1);
      private final Assignment cVariableInitializerListAssignment_2 = (Assignment) cGroup.eContents().get(2);
      private final RuleCall cVariableInitializerListVariableInitializerListParserRuleCall_2_0 = (RuleCall) cVariableInitializerListAssignment_2.eContents()
         .get(0);
      private final Keyword cCommaKeyword_3 = (Keyword) cGroup.eContents().get(3);
      private final Keyword cRightCurlyBracketKeyword_4 = (Keyword) cGroup.eContents().get(4);

      // / *
      // * Productions from §10 (Arrays)
      // * / arrayInitializer:
      // {arrayInitializer} "{" variableInitializerList=variableInitializerList? ","? "}";
      public ParserRule getRule() {
         return rule;
      }

      // {arrayInitializer} "{" variableInitializerList=variableInitializerList? ","? "}"
      public Group getGroup() {
         return cGroup;
      }

      // {arrayInitializer}
      public Action getArrayInitializerAction_0() {
         return cArrayInitializerAction_0;
      }

      // "{"
      public Keyword getLeftCurlyBracketKeyword_1() {
         return cLeftCurlyBracketKeyword_1;
      }

      // variableInitializerList=variableInitializerList?
      public Assignment getVariableInitializerListAssignment_2() {
         return cVariableInitializerListAssignment_2;
      }

      // variableInitializerList
      public RuleCall getVariableInitializerListVariableInitializerListParserRuleCall_2_0() {
         return cVariableInitializerListVariableInitializerListParserRuleCall_2_0;
      }

      // ","?
      public Keyword getCommaKeyword_3() {
         return cCommaKeyword_3;
      }

      // "}"
      public Keyword getRightCurlyBracketKeyword_4() {
         return cRightCurlyBracketKeyword_4;
      }
   }

   public class VariableInitializerListElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "variableInitializerList");
      private final Group cGroup = (Group) rule.eContents().get(1);
      private final Assignment cVariableInitializerAssignment_0 = (Assignment) cGroup.eContents().get(0);
      private final RuleCall cVariableInitializerVariableInitializerParserRuleCall_0_0 = (RuleCall) cVariableInitializerAssignment_0.eContents()
         .get(0);
      private final Group cGroup_1 = (Group) cGroup.eContents().get(1);
      private final Keyword cCommaKeyword_1_0 = (Keyword) cGroup_1.eContents().get(0);
      private final Assignment cVariableInitializerAssignment_1_1 = (Assignment) cGroup_1.eContents().get(1);
      private final RuleCall cVariableInitializerVariableInitializerParserRuleCall_1_1_0 = (RuleCall) cVariableInitializerAssignment_1_1.eContents()
         .get(0);

      // variableInitializerList:
      // variableInitializer+=variableInitializer ("," variableInitializer+=variableInitializer)*;
      public ParserRule getRule() {
         return rule;
      }

      // variableInitializer+=variableInitializer ("," variableInitializer+=variableInitializer)*
      public Group getGroup() {
         return cGroup;
      }

      // variableInitializer+=variableInitializer
      public Assignment getVariableInitializerAssignment_0() {
         return cVariableInitializerAssignment_0;
      }

      // variableInitializer
      public RuleCall getVariableInitializerVariableInitializerParserRuleCall_0_0() {
         return cVariableInitializerVariableInitializerParserRuleCall_0_0;
      }

      // ("," variableInitializer+=variableInitializer)*
      public Group getGroup_1() {
         return cGroup_1;
      }

      // ","
      public Keyword getCommaKeyword_1_0() {
         return cCommaKeyword_1_0;
      }

      // variableInitializer+=variableInitializer
      public Assignment getVariableInitializerAssignment_1_1() {
         return cVariableInitializerAssignment_1_1;
      }

      // variableInitializer
      public RuleCall getVariableInitializerVariableInitializerParserRuleCall_1_1_0() {
         return cVariableInitializerVariableInitializerParserRuleCall_1_1_0;
      }
   }

   public class BlockElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "block");
      private final Assignment cDummyAssignment = (Assignment) rule.eContents().get(1);
      private final Keyword cDummyBlockKeyword_0 = (Keyword) cDummyAssignment.eContents().get(0);

      // block:
      // dummy="block";
      public ParserRule getRule() {
         return rule;
      }

      // dummy="block"
      public Assignment getDummyAssignment() {
         return cDummyAssignment;
      }

      // "block"
      public Keyword getDummyBlockKeyword_0() {
         return cDummyBlockKeyword_0;
      }
   }

   public class BlockStatementsElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "blockStatements");
      private final Assignment cDummyAssignment = (Assignment) rule.eContents().get(1);
      private final Keyword cDummyBlockStatementsKeyword_0 = (Keyword) cDummyAssignment.eContents().get(0);

      // blockStatements:
      // dummy="blockStatements";
      public ParserRule getRule() {
         return rule;
      }

      // dummy="blockStatements"
      public Assignment getDummyAssignment() {
         return cDummyAssignment;
      }

      // "blockStatements"
      public Keyword getDummyBlockStatementsKeyword_0() {
         return cDummyBlockStatementsKeyword_0;
      }
   }

   public class ArgumentListElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "argumentList");
      private final Assignment cDummyAssignment = (Assignment) rule.eContents().get(1);
      private final Keyword cDummyArgumentListKeyword_0 = (Keyword) cDummyAssignment.eContents().get(0);

      // argumentList:
      // dummy="argumentList";
      public ParserRule getRule() {
         return rule;
      }

      // dummy="argumentList"
      public Assignment getDummyAssignment() {
         return cDummyAssignment;
      }

      // "argumentList"
      public Keyword getDummyArgumentListKeyword_0() {
         return cDummyArgumentListKeyword_0;
      }
   }

   public class PrimaryElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "primary");
      private final Assignment cDummyAssignment = (Assignment) rule.eContents().get(1);
      private final Keyword cDummyPrimaryKeyword_0 = (Keyword) cDummyAssignment.eContents().get(0);

      // primary:
      // dummy="primary";
      public ParserRule getRule() {
         return rule;
      }

      // dummy="primary"
      public Assignment getDummyAssignment() {
         return cDummyAssignment;
      }

      // "primary"
      public Keyword getDummyPrimaryKeyword_0() {
         return cDummyPrimaryKeyword_0;
      }
   }

   public class ExpressionElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "expression");
      private final Assignment cDummyAssignment = (Assignment) rule.eContents().get(1);
      private final Keyword cDummyExpressionKeyword_0 = (Keyword) cDummyAssignment.eContents().get(0);

      // expression:
      // dummy="expression";
      public ParserRule getRule() {
         return rule;
      }

      // dummy="expression"
      public Assignment getDummyAssignment() {
         return cDummyAssignment;
      }

      // "expression"
      public Keyword getDummyExpressionKeyword_0() {
         return cDummyExpressionKeyword_0;
      }
   }

   public class ConditionalExpressionElements extends AbstractParserRuleElementFinder {
      private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "conditionalExpression");
      private final Assignment cDummyAssignment = (Assignment) rule.eContents().get(1);
      private final Keyword cDummyConditionalExpressionKeyword_0 = (Keyword) cDummyAssignment.eContents().get(0);

      // conditionalExpression:
      // dummy="conditionalExpression";
      public ParserRule getRule() {
         return rule;
      }

      // dummy="conditionalExpression"
      public Assignment getDummyAssignment() {
         return cDummyAssignment;
      }

      // "conditionalExpression"
      public Keyword getDummyConditionalExpressionKeyword_0() {
         return cDummyConditionalExpressionKeyword_0;
      }
   }


   public class ClassModifiersElements extends AbstractEnumRuleElementFinder {
      private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ClassModifiers");
      private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
      private final EnumLiteralDeclaration cPUBLICEnumLiteralDeclaration_0 = (EnumLiteralDeclaration) cAlternatives.eContents()
         .get(0);
      private final Keyword cPUBLICPublicKeyword_0_0 = (Keyword) cPUBLICEnumLiteralDeclaration_0.eContents().get(0);
      private final EnumLiteralDeclaration cPROTECTEDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration) cAlternatives.eContents()
         .get(1);
      private final Keyword cPROTECTEDProtectedKeyword_1_0 = (Keyword) cPROTECTEDEnumLiteralDeclaration_1.eContents()
         .get(0);
      private final EnumLiteralDeclaration cPRIVATEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration) cAlternatives.eContents()
         .get(2);
      private final Keyword cPRIVATEPrivateKeyword_2_0 = (Keyword) cPRIVATEEnumLiteralDeclaration_2.eContents().get(0);
      private final EnumLiteralDeclaration cABSTRACTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration) cAlternatives.eContents()
         .get(3);
      private final Keyword cABSTRACTAbstractKeyword_3_0 = (Keyword) cABSTRACTEnumLiteralDeclaration_3.eContents().get(
         0);
      private final EnumLiteralDeclaration cSTATICEnumLiteralDeclaration_4 = (EnumLiteralDeclaration) cAlternatives.eContents()
         .get(4);
      private final Keyword cSTATICStaticKeyword_4_0 = (Keyword) cSTATICEnumLiteralDeclaration_4.eContents().get(0);
      private final EnumLiteralDeclaration cFINALEnumLiteralDeclaration_5 = (EnumLiteralDeclaration) cAlternatives.eContents()
         .get(5);
      private final Keyword cFINALFinalKeyword_5_0 = (Keyword) cFINALEnumLiteralDeclaration_5.eContents().get(0);
      private final EnumLiteralDeclaration cSTRICTFPEnumLiteralDeclaration_6 = (EnumLiteralDeclaration) cAlternatives.eContents()
         .get(6);
      private final Keyword cSTRICTFPStrictfpKeyword_6_0 = (Keyword) cSTRICTFPEnumLiteralDeclaration_6.eContents().get(
         0);

      // enum ClassModifiers:
      // PUBLIC="public" | PROTECTED="protected" | PRIVATE="private" | ABSTRACT="abstract" | STATIC="static" |
      // FINAL="final" |
      // STRICTFP="strictfp";
      public EnumRule getRule() {
         return rule;
      }

      // PUBLIC="public" | PROTECTED="protected" | PRIVATE="private" | ABSTRACT="abstract" | STATIC="static" |
      // FINAL="final" |
      // STRICTFP="strictfp"
      public Alternatives getAlternatives() {
         return cAlternatives;
      }

      // PUBLIC="public"
      public EnumLiteralDeclaration getPUBLICEnumLiteralDeclaration_0() {
         return cPUBLICEnumLiteralDeclaration_0;
      }

      // "public"
      public Keyword getPUBLICPublicKeyword_0_0() {
         return cPUBLICPublicKeyword_0_0;
      }

      // PROTECTED="protected"
      public EnumLiteralDeclaration getPROTECTEDEnumLiteralDeclaration_1() {
         return cPROTECTEDEnumLiteralDeclaration_1;
      }

      // "protected"
      public Keyword getPROTECTEDProtectedKeyword_1_0() {
         return cPROTECTEDProtectedKeyword_1_0;
      }

      // PRIVATE="private"
      public EnumLiteralDeclaration getPRIVATEEnumLiteralDeclaration_2() {
         return cPRIVATEEnumLiteralDeclaration_2;
      }

      // "private"
      public Keyword getPRIVATEPrivateKeyword_2_0() {
         return cPRIVATEPrivateKeyword_2_0;
      }

      // ABSTRACT="abstract"
      public EnumLiteralDeclaration getABSTRACTEnumLiteralDeclaration_3() {
         return cABSTRACTEnumLiteralDeclaration_3;
      }

      // "abstract"
      public Keyword getABSTRACTAbstractKeyword_3_0() {
         return cABSTRACTAbstractKeyword_3_0;
      }

      // STATIC="static"
      public EnumLiteralDeclaration getSTATICEnumLiteralDeclaration_4() {
         return cSTATICEnumLiteralDeclaration_4;
      }

      // "static"
      public Keyword getSTATICStaticKeyword_4_0() {
         return cSTATICStaticKeyword_4_0;
      }

      // FINAL="final"
      public EnumLiteralDeclaration getFINALEnumLiteralDeclaration_5() {
         return cFINALEnumLiteralDeclaration_5;
      }

      // "final"
      public Keyword getFINALFinalKeyword_5_0() {
         return cFINALFinalKeyword_5_0;
      }

      // STRICTFP="strictfp"
      public EnumLiteralDeclaration getSTRICTFPEnumLiteralDeclaration_6() {
         return cSTRICTFPEnumLiteralDeclaration_6;
      }

      // "strictfp"
      public Keyword getSTRICTFPStrictfpKeyword_6_0() {
         return cSTRICTFPStrictfpKeyword_6_0;
      }
   }

   public class FieldModifiersElements extends AbstractEnumRuleElementFinder {
      private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "FieldModifiers");
      private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
      private final EnumLiteralDeclaration cPUBLICEnumLiteralDeclaration_0 = (EnumLiteralDeclaration) cAlternatives.eContents()
         .get(0);
      private final Keyword cPUBLICPublicKeyword_0_0 = (Keyword) cPUBLICEnumLiteralDeclaration_0.eContents().get(0);
      private final EnumLiteralDeclaration cPROTECTEDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration) cAlternatives.eContents()
         .get(1);
      private final Keyword cPROTECTEDProtectedKeyword_1_0 = (Keyword) cPROTECTEDEnumLiteralDeclaration_1.eContents()
         .get(0);
      private final EnumLiteralDeclaration cPRIVATEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration) cAlternatives.eContents()
         .get(2);
      private final Keyword cPRIVATEPrivateKeyword_2_0 = (Keyword) cPRIVATEEnumLiteralDeclaration_2.eContents().get(0);
      private final EnumLiteralDeclaration cSTATICEnumLiteralDeclaration_3 = (EnumLiteralDeclaration) cAlternatives.eContents()
         .get(3);
      private final Keyword cSTATICStaticKeyword_3_0 = (Keyword) cSTATICEnumLiteralDeclaration_3.eContents().get(0);
      private final EnumLiteralDeclaration cFINALEnumLiteralDeclaration_4 = (EnumLiteralDeclaration) cAlternatives.eContents()
         .get(4);
      private final Keyword cFINALFinalKeyword_4_0 = (Keyword) cFINALEnumLiteralDeclaration_4.eContents().get(0);
      private final EnumLiteralDeclaration cTRANSIENTEnumLiteralDeclaration_5 = (EnumLiteralDeclaration) cAlternatives.eContents()
         .get(5);
      private final Keyword cTRANSIENTTransientKeyword_5_0 = (Keyword) cTRANSIENTEnumLiteralDeclaration_5.eContents()
         .get(0);
      private final EnumLiteralDeclaration cVOLATILEEnumLiteralDeclaration_6 = (EnumLiteralDeclaration) cAlternatives.eContents()
         .get(6);
      private final Keyword cVOLATILEVolatileKeyword_6_0 = (Keyword) cVOLATILEEnumLiteralDeclaration_6.eContents().get(
         0);

      // enum FieldModifiers:
      // PUBLIC="public" | PROTECTED="protected" | PRIVATE="private" | STATIC="static" | FINAL="final" |
      // TRANSIENT="transient"
      // | VOLATILE="volatile";
      public EnumRule getRule() {
         return rule;
      }

      // PUBLIC="public" | PROTECTED="protected" | PRIVATE="private" | STATIC="static" | FINAL="final" |
      // TRANSIENT="transient" |
      // VOLATILE="volatile"
      public Alternatives getAlternatives() {
         return cAlternatives;
      }

      // PUBLIC="public"
      public EnumLiteralDeclaration getPUBLICEnumLiteralDeclaration_0() {
         return cPUBLICEnumLiteralDeclaration_0;
      }

      // "public"
      public Keyword getPUBLICPublicKeyword_0_0() {
         return cPUBLICPublicKeyword_0_0;
      }

      // PROTECTED="protected"
      public EnumLiteralDeclaration getPROTECTEDEnumLiteralDeclaration_1() {
         return cPROTECTEDEnumLiteralDeclaration_1;
      }

      // "protected"
      public Keyword getPROTECTEDProtectedKeyword_1_0() {
         return cPROTECTEDProtectedKeyword_1_0;
      }

      // PRIVATE="private"
      public EnumLiteralDeclaration getPRIVATEEnumLiteralDeclaration_2() {
         return cPRIVATEEnumLiteralDeclaration_2;
      }

      // "private"
      public Keyword getPRIVATEPrivateKeyword_2_0() {
         return cPRIVATEPrivateKeyword_2_0;
      }

      // STATIC="static"
      public EnumLiteralDeclaration getSTATICEnumLiteralDeclaration_3() {
         return cSTATICEnumLiteralDeclaration_3;
      }

      // "static"
      public Keyword getSTATICStaticKeyword_3_0() {
         return cSTATICStaticKeyword_3_0;
      }

      // FINAL="final"
      public EnumLiteralDeclaration getFINALEnumLiteralDeclaration_4() {
         return cFINALEnumLiteralDeclaration_4;
      }

      // "final"
      public Keyword getFINALFinalKeyword_4_0() {
         return cFINALFinalKeyword_4_0;
      }

      // TRANSIENT="transient"
      public EnumLiteralDeclaration getTRANSIENTEnumLiteralDeclaration_5() {
         return cTRANSIENTEnumLiteralDeclaration_5;
      }

      // "transient"
      public Keyword getTRANSIENTTransientKeyword_5_0() {
         return cTRANSIENTTransientKeyword_5_0;
      }

      // VOLATILE="volatile"
      public EnumLiteralDeclaration getVOLATILEEnumLiteralDeclaration_6() {
         return cVOLATILEEnumLiteralDeclaration_6;
      }

      // "volatile"
      public Keyword getVOLATILEVolatileKeyword_6_0() {
         return cVOLATILEVolatileKeyword_6_0;
      }
   }

   public class MethodModifiersElements extends AbstractEnumRuleElementFinder {
      private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "methodModifiers");
      private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
      private final EnumLiteralDeclaration cPUBLICEnumLiteralDeclaration_0 = (EnumLiteralDeclaration) cAlternatives.eContents()
         .get(0);
      private final Keyword cPUBLICPublicKeyword_0_0 = (Keyword) cPUBLICEnumLiteralDeclaration_0.eContents().get(0);
      private final EnumLiteralDeclaration cPROTECTEDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration) cAlternatives.eContents()
         .get(1);
      private final Keyword cPROTECTEDProtectedKeyword_1_0 = (Keyword) cPROTECTEDEnumLiteralDeclaration_1.eContents()
         .get(0);
      private final EnumLiteralDeclaration cPRIVATEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration) cAlternatives.eContents()
         .get(2);
      private final Keyword cPRIVATEPrivateKeyword_2_0 = (Keyword) cPRIVATEEnumLiteralDeclaration_2.eContents().get(0);
      private final EnumLiteralDeclaration cABSTRACTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration) cAlternatives.eContents()
         .get(3);
      private final Keyword cABSTRACTAbstractKeyword_3_0 = (Keyword) cABSTRACTEnumLiteralDeclaration_3.eContents().get(
         0);
      private final EnumLiteralDeclaration cSTATICEnumLiteralDeclaration_4 = (EnumLiteralDeclaration) cAlternatives.eContents()
         .get(4);
      private final Keyword cSTATICStaticKeyword_4_0 = (Keyword) cSTATICEnumLiteralDeclaration_4.eContents().get(0);
      private final EnumLiteralDeclaration cFINALEnumLiteralDeclaration_5 = (EnumLiteralDeclaration) cAlternatives.eContents()
         .get(5);
      private final Keyword cFINALFinalKeyword_5_0 = (Keyword) cFINALEnumLiteralDeclaration_5.eContents().get(0);
      private final EnumLiteralDeclaration cSYNCHRONIZEDEnumLiteralDeclaration_6 = (EnumLiteralDeclaration) cAlternatives.eContents()
         .get(6);
      private final Keyword cSYNCHRONIZEDSynchronizedKeyword_6_0 = (Keyword) cSYNCHRONIZEDEnumLiteralDeclaration_6.eContents()
         .get(0);
      private final EnumLiteralDeclaration cNATIVEEnumLiteralDeclaration_7 = (EnumLiteralDeclaration) cAlternatives.eContents()
         .get(7);
      private final Keyword cNATIVENativeKeyword_7_0 = (Keyword) cNATIVEEnumLiteralDeclaration_7.eContents().get(0);
      private final EnumLiteralDeclaration cSTRICTFPEnumLiteralDeclaration_8 = (EnumLiteralDeclaration) cAlternatives.eContents()
         .get(8);
      private final Keyword cSTRICTFPStrictfpKeyword_8_0 = (Keyword) cSTRICTFPEnumLiteralDeclaration_8.eContents().get(
         0);

      // enum methodModifiers:
      // PUBLIC="public" | PROTECTED="protected" | PRIVATE="private" | ABSTRACT="abstract" | STATIC="static" |
      // FINAL="final" |
      // SYNCHRONIZED="synchronized" | NATIVE="native" | STRICTFP="strictfp";
      public EnumRule getRule() {
         return rule;
      }

      // PUBLIC="public" | PROTECTED="protected" | PRIVATE="private" | ABSTRACT="abstract" | STATIC="static" |
      // FINAL="final" |
      // SYNCHRONIZED="synchronized" | NATIVE="native" | STRICTFP="strictfp"
      public Alternatives getAlternatives() {
         return cAlternatives;
      }

      // PUBLIC="public"
      public EnumLiteralDeclaration getPUBLICEnumLiteralDeclaration_0() {
         return cPUBLICEnumLiteralDeclaration_0;
      }

      // "public"
      public Keyword getPUBLICPublicKeyword_0_0() {
         return cPUBLICPublicKeyword_0_0;
      }

      // PROTECTED="protected"
      public EnumLiteralDeclaration getPROTECTEDEnumLiteralDeclaration_1() {
         return cPROTECTEDEnumLiteralDeclaration_1;
      }

      // "protected"
      public Keyword getPROTECTEDProtectedKeyword_1_0() {
         return cPROTECTEDProtectedKeyword_1_0;
      }

      // PRIVATE="private"
      public EnumLiteralDeclaration getPRIVATEEnumLiteralDeclaration_2() {
         return cPRIVATEEnumLiteralDeclaration_2;
      }

      // "private"
      public Keyword getPRIVATEPrivateKeyword_2_0() {
         return cPRIVATEPrivateKeyword_2_0;
      }

      // ABSTRACT="abstract"
      public EnumLiteralDeclaration getABSTRACTEnumLiteralDeclaration_3() {
         return cABSTRACTEnumLiteralDeclaration_3;
      }

      // "abstract"
      public Keyword getABSTRACTAbstractKeyword_3_0() {
         return cABSTRACTAbstractKeyword_3_0;
      }

      // STATIC="static"
      public EnumLiteralDeclaration getSTATICEnumLiteralDeclaration_4() {
         return cSTATICEnumLiteralDeclaration_4;
      }

      // "static"
      public Keyword getSTATICStaticKeyword_4_0() {
         return cSTATICStaticKeyword_4_0;
      }

      // FINAL="final"
      public EnumLiteralDeclaration getFINALEnumLiteralDeclaration_5() {
         return cFINALEnumLiteralDeclaration_5;
      }

      // "final"
      public Keyword getFINALFinalKeyword_5_0() {
         return cFINALFinalKeyword_5_0;
      }

      // SYNCHRONIZED="synchronized"
      public EnumLiteralDeclaration getSYNCHRONIZEDEnumLiteralDeclaration_6() {
         return cSYNCHRONIZEDEnumLiteralDeclaration_6;
      }

      // "synchronized"
      public Keyword getSYNCHRONIZEDSynchronizedKeyword_6_0() {
         return cSYNCHRONIZEDSynchronizedKeyword_6_0;
      }

      // NATIVE="native"
      public EnumLiteralDeclaration getNATIVEEnumLiteralDeclaration_7() {
         return cNATIVEEnumLiteralDeclaration_7;
      }

      // "native"
      public Keyword getNATIVENativeKeyword_7_0() {
         return cNATIVENativeKeyword_7_0;
      }

      // STRICTFP="strictfp"
      public EnumLiteralDeclaration getSTRICTFPEnumLiteralDeclaration_8() {
         return cSTRICTFPEnumLiteralDeclaration_8;
      }

      // "strictfp"
      public Keyword getSTRICTFPStrictfpKeyword_8_0() {
         return cSTRICTFPStrictfpKeyword_8_0;
      }
   }

   public class VariableModifiersElements extends AbstractEnumRuleElementFinder {
      private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "VariableModifiers");
      private final EnumLiteralDeclaration cPUBLICEnumLiteralDeclaration = (EnumLiteralDeclaration) rule.eContents()
         .get(1);
      private final Keyword cPUBLICFinalKeyword_0 = (Keyword) cPUBLICEnumLiteralDeclaration.eContents().get(0);

      // enum VariableModifiers:
      // PUBLIC="final";
      public EnumRule getRule() {
         return rule;
      }

      // PUBLIC="final"
      public EnumLiteralDeclaration getPUBLICEnumLiteralDeclaration() {
         return cPUBLICEnumLiteralDeclaration;
      }

      // "final"
      public Keyword getPUBLICFinalKeyword_0() {
         return cPUBLICFinalKeyword_0;
      }
   }

   public class ConstructorModifiersElements extends AbstractEnumRuleElementFinder {
      private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ConstructorModifiers");
      private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
      private final EnumLiteralDeclaration cPUBLICEnumLiteralDeclaration_0 = (EnumLiteralDeclaration) cAlternatives.eContents()
         .get(0);
      private final Keyword cPUBLICPublicKeyword_0_0 = (Keyword) cPUBLICEnumLiteralDeclaration_0.eContents().get(0);
      private final EnumLiteralDeclaration cPROTECTEDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration) cAlternatives.eContents()
         .get(1);
      private final Keyword cPROTECTEDProtectedKeyword_1_0 = (Keyword) cPROTECTEDEnumLiteralDeclaration_1.eContents()
         .get(0);
      private final EnumLiteralDeclaration cPRIVATEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration) cAlternatives.eContents()
         .get(2);
      private final Keyword cPRIVATEPrivateKeyword_2_0 = (Keyword) cPRIVATEEnumLiteralDeclaration_2.eContents().get(0);

      // enum ConstructorModifiers:
      // PUBLIC="public" | PROTECTED="protected" | PRIVATE="private";
      public EnumRule getRule() {
         return rule;
      }

      // PUBLIC="public" | PROTECTED="protected" | PRIVATE="private"
      public Alternatives getAlternatives() {
         return cAlternatives;
      }

      // PUBLIC="public"
      public EnumLiteralDeclaration getPUBLICEnumLiteralDeclaration_0() {
         return cPUBLICEnumLiteralDeclaration_0;
      }

      // "public"
      public Keyword getPUBLICPublicKeyword_0_0() {
         return cPUBLICPublicKeyword_0_0;
      }

      // PROTECTED="protected"
      public EnumLiteralDeclaration getPROTECTEDEnumLiteralDeclaration_1() {
         return cPROTECTEDEnumLiteralDeclaration_1;
      }

      // "protected"
      public Keyword getPROTECTEDProtectedKeyword_1_0() {
         return cPROTECTEDProtectedKeyword_1_0;
      }

      // PRIVATE="private"
      public EnumLiteralDeclaration getPRIVATEEnumLiteralDeclaration_2() {
         return cPRIVATEEnumLiteralDeclaration_2;
      }

      // "private"
      public Keyword getPRIVATEPrivateKeyword_2_0() {
         return cPRIVATEPrivateKeyword_2_0;
      }
   }

   public class InterfaceModifiersElements extends AbstractEnumRuleElementFinder {
      private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "InterfaceModifiers");
      private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
      private final EnumLiteralDeclaration cPUBLICEnumLiteralDeclaration_0 = (EnumLiteralDeclaration) cAlternatives.eContents()
         .get(0);
      private final Keyword cPUBLICPublicKeyword_0_0 = (Keyword) cPUBLICEnumLiteralDeclaration_0.eContents().get(0);
      private final EnumLiteralDeclaration cPROTECTEDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration) cAlternatives.eContents()
         .get(1);
      private final Keyword cPROTECTEDProtectedKeyword_1_0 = (Keyword) cPROTECTEDEnumLiteralDeclaration_1.eContents()
         .get(0);
      private final EnumLiteralDeclaration cPRIVATEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration) cAlternatives.eContents()
         .get(2);
      private final Keyword cPRIVATEPrivateKeyword_2_0 = (Keyword) cPRIVATEEnumLiteralDeclaration_2.eContents().get(0);
      private final EnumLiteralDeclaration cABSTRACTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration) cAlternatives.eContents()
         .get(3);
      private final Keyword cABSTRACTAbstractKeyword_3_0 = (Keyword) cABSTRACTEnumLiteralDeclaration_3.eContents().get(
         0);
      private final EnumLiteralDeclaration cSTATICEnumLiteralDeclaration_4 = (EnumLiteralDeclaration) cAlternatives.eContents()
         .get(4);
      private final Keyword cSTATICStaticKeyword_4_0 = (Keyword) cSTATICEnumLiteralDeclaration_4.eContents().get(0);
      private final EnumLiteralDeclaration cSTRICTFPEnumLiteralDeclaration_5 = (EnumLiteralDeclaration) cAlternatives.eContents()
         .get(5);
      private final Keyword cSTRICTFPStrictfpKeyword_5_0 = (Keyword) cSTRICTFPEnumLiteralDeclaration_5.eContents().get(
         0);

      // enum InterfaceModifiers:
      // PUBLIC="public" | PROTECTED="protected" | PRIVATE="private" | ABSTRACT="abstract" | STATIC="static" |
      // STRICTFP="strictfp";
      public EnumRule getRule() {
         return rule;
      }

      // PUBLIC="public" | PROTECTED="protected" | PRIVATE="private" | ABSTRACT="abstract" | STATIC="static" |
      // STRICTFP="strictfp"
      public Alternatives getAlternatives() {
         return cAlternatives;
      }

      // PUBLIC="public"
      public EnumLiteralDeclaration getPUBLICEnumLiteralDeclaration_0() {
         return cPUBLICEnumLiteralDeclaration_0;
      }

      // "public"
      public Keyword getPUBLICPublicKeyword_0_0() {
         return cPUBLICPublicKeyword_0_0;
      }

      // PROTECTED="protected"
      public EnumLiteralDeclaration getPROTECTEDEnumLiteralDeclaration_1() {
         return cPROTECTEDEnumLiteralDeclaration_1;
      }

      // "protected"
      public Keyword getPROTECTEDProtectedKeyword_1_0() {
         return cPROTECTEDProtectedKeyword_1_0;
      }

      // PRIVATE="private"
      public EnumLiteralDeclaration getPRIVATEEnumLiteralDeclaration_2() {
         return cPRIVATEEnumLiteralDeclaration_2;
      }

      // "private"
      public Keyword getPRIVATEPrivateKeyword_2_0() {
         return cPRIVATEPrivateKeyword_2_0;
      }

      // ABSTRACT="abstract"
      public EnumLiteralDeclaration getABSTRACTEnumLiteralDeclaration_3() {
         return cABSTRACTEnumLiteralDeclaration_3;
      }

      // "abstract"
      public Keyword getABSTRACTAbstractKeyword_3_0() {
         return cABSTRACTAbstractKeyword_3_0;
      }

      // STATIC="static"
      public EnumLiteralDeclaration getSTATICEnumLiteralDeclaration_4() {
         return cSTATICEnumLiteralDeclaration_4;
      }

      // "static"
      public Keyword getSTATICStaticKeyword_4_0() {
         return cSTATICStaticKeyword_4_0;
      }

      // STRICTFP="strictfp"
      public EnumLiteralDeclaration getSTRICTFPEnumLiteralDeclaration_5() {
         return cSTRICTFPEnumLiteralDeclaration_5;
      }

      // "strictfp"
      public Keyword getSTRICTFPStrictfpKeyword_5_0() {
         return cSTRICTFPStrictfpKeyword_5_0;
      }
   }

   public class ConstantModifiersElements extends AbstractEnumRuleElementFinder {
      private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ConstantModifiers");
      private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
      private final EnumLiteralDeclaration cPUBLICEnumLiteralDeclaration_0 = (EnumLiteralDeclaration) cAlternatives.eContents()
         .get(0);
      private final Keyword cPUBLICPublicKeyword_0_0 = (Keyword) cPUBLICEnumLiteralDeclaration_0.eContents().get(0);
      private final EnumLiteralDeclaration cSTATICEnumLiteralDeclaration_1 = (EnumLiteralDeclaration) cAlternatives.eContents()
         .get(1);
      private final Keyword cSTATICStaticKeyword_1_0 = (Keyword) cSTATICEnumLiteralDeclaration_1.eContents().get(0);
      private final EnumLiteralDeclaration cFINALEnumLiteralDeclaration_2 = (EnumLiteralDeclaration) cAlternatives.eContents()
         .get(2);
      private final Keyword cFINALFinalKeyword_2_0 = (Keyword) cFINALEnumLiteralDeclaration_2.eContents().get(0);

      // enum ConstantModifiers:
      // PUBLIC="public" | STATIC="static" | FINAL="final";
      public EnumRule getRule() {
         return rule;
      }

      // PUBLIC="public" | STATIC="static" | FINAL="final"
      public Alternatives getAlternatives() {
         return cAlternatives;
      }

      // PUBLIC="public"
      public EnumLiteralDeclaration getPUBLICEnumLiteralDeclaration_0() {
         return cPUBLICEnumLiteralDeclaration_0;
      }

      // "public"
      public Keyword getPUBLICPublicKeyword_0_0() {
         return cPUBLICPublicKeyword_0_0;
      }

      // STATIC="static"
      public EnumLiteralDeclaration getSTATICEnumLiteralDeclaration_1() {
         return cSTATICEnumLiteralDeclaration_1;
      }

      // "static"
      public Keyword getSTATICStaticKeyword_1_0() {
         return cSTATICStaticKeyword_1_0;
      }

      // FINAL="final"
      public EnumLiteralDeclaration getFINALEnumLiteralDeclaration_2() {
         return cFINALEnumLiteralDeclaration_2;
      }

      // "final"
      public Keyword getFINALFinalKeyword_2_0() {
         return cFINALFinalKeyword_2_0;
      }
   }

   public class InterfaceMethodModifiersElements extends AbstractEnumRuleElementFinder {
      private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "InterfaceMethodModifiers");
      private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
      private final EnumLiteralDeclaration cPUBLICEnumLiteralDeclaration_0 = (EnumLiteralDeclaration) cAlternatives.eContents()
         .get(0);
      private final Keyword cPUBLICPublicKeyword_0_0 = (Keyword) cPUBLICEnumLiteralDeclaration_0.eContents().get(0);
      private final EnumLiteralDeclaration cABSTRACTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration) cAlternatives.eContents()
         .get(1);
      private final Keyword cABSTRACTAbstractKeyword_1_0 = (Keyword) cABSTRACTEnumLiteralDeclaration_1.eContents().get(
         0);
      private final EnumLiteralDeclaration cDEFAULTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration) cAlternatives.eContents()
         .get(2);
      private final Keyword cDEFAULTDefaultKeyword_2_0 = (Keyword) cDEFAULTEnumLiteralDeclaration_2.eContents().get(0);
      private final EnumLiteralDeclaration cSTATICEnumLiteralDeclaration_3 = (EnumLiteralDeclaration) cAlternatives.eContents()
         .get(3);
      private final Keyword cSTATICStaticKeyword_3_0 = (Keyword) cSTATICEnumLiteralDeclaration_3.eContents().get(0);
      private final EnumLiteralDeclaration cSTRICTFPEnumLiteralDeclaration_4 = (EnumLiteralDeclaration) cAlternatives.eContents()
         .get(4);
      private final Keyword cSTRICTFPStrictfpKeyword_4_0 = (Keyword) cSTRICTFPEnumLiteralDeclaration_4.eContents().get(
         0);

      // enum InterfaceMethodModifiers:
      // PUBLIC="public" | ABSTRACT="abstract" | DEFAULT="default" | STATIC="static" | STRICTFP="strictfp";
      public EnumRule getRule() {
         return rule;
      }

      // PUBLIC="public" | ABSTRACT="abstract" | DEFAULT="default" | STATIC="static" | STRICTFP="strictfp"
      public Alternatives getAlternatives() {
         return cAlternatives;
      }

      // PUBLIC="public"
      public EnumLiteralDeclaration getPUBLICEnumLiteralDeclaration_0() {
         return cPUBLICEnumLiteralDeclaration_0;
      }

      // "public"
      public Keyword getPUBLICPublicKeyword_0_0() {
         return cPUBLICPublicKeyword_0_0;
      }

      // ABSTRACT="abstract"
      public EnumLiteralDeclaration getABSTRACTEnumLiteralDeclaration_1() {
         return cABSTRACTEnumLiteralDeclaration_1;
      }

      // "abstract"
      public Keyword getABSTRACTAbstractKeyword_1_0() {
         return cABSTRACTAbstractKeyword_1_0;
      }

      // DEFAULT="default"
      public EnumLiteralDeclaration getDEFAULTEnumLiteralDeclaration_2() {
         return cDEFAULTEnumLiteralDeclaration_2;
      }

      // "default"
      public Keyword getDEFAULTDefaultKeyword_2_0() {
         return cDEFAULTDefaultKeyword_2_0;
      }

      // STATIC="static"
      public EnumLiteralDeclaration getSTATICEnumLiteralDeclaration_3() {
         return cSTATICEnumLiteralDeclaration_3;
      }

      // "static"
      public Keyword getSTATICStaticKeyword_3_0() {
         return cSTATICStaticKeyword_3_0;
      }

      // STRICTFP="strictfp"
      public EnumLiteralDeclaration getSTRICTFPEnumLiteralDeclaration_4() {
         return cSTRICTFPEnumLiteralDeclaration_4;
      }

      // "strictfp"
      public Keyword getSTRICTFPStrictfpKeyword_4_0() {
         return cSTRICTFPStrictfpKeyword_4_0;
      }
   }

   public class AnnotationTypeElementModifiersElements extends AbstractEnumRuleElementFinder {
      private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(),
         "AnnotationTypeElementModifiers");
      private final Alternatives cAlternatives = (Alternatives) rule.eContents().get(1);
      private final EnumLiteralDeclaration cPUBLICEnumLiteralDeclaration_0 = (EnumLiteralDeclaration) cAlternatives.eContents()
         .get(0);
      private final Keyword cPUBLICPublicKeyword_0_0 = (Keyword) cPUBLICEnumLiteralDeclaration_0.eContents().get(0);
      private final EnumLiteralDeclaration cSTATICEnumLiteralDeclaration_1 = (EnumLiteralDeclaration) cAlternatives.eContents()
         .get(1);
      private final Keyword cSTATICAbstractKeyword_1_0 = (Keyword) cSTATICEnumLiteralDeclaration_1.eContents().get(0);

      // enum AnnotationTypeElementModifiers:
      // PUBLIC="public" | STATIC="abstract";
      public EnumRule getRule() {
         return rule;
      }

      // PUBLIC="public" | STATIC="abstract"
      public Alternatives getAlternatives() {
         return cAlternatives;
      }

      // PUBLIC="public"
      public EnumLiteralDeclaration getPUBLICEnumLiteralDeclaration_0() {
         return cPUBLICEnumLiteralDeclaration_0;
      }

      // "public"
      public Keyword getPUBLICPublicKeyword_0_0() {
         return cPUBLICPublicKeyword_0_0;
      }

      // STATIC="abstract"
      public EnumLiteralDeclaration getSTATICEnumLiteralDeclaration_1() {
         return cSTATICEnumLiteralDeclaration_1;
      }

      // "abstract"
      public Keyword getSTATICAbstractKeyword_1_0() {
         return cSTATICAbstractKeyword_1_0;
      }
   }

   private final ModelElements pModel;
   private final TypeElements pType;
   private final PrimitiveTypeElements pPrimitiveType;
   private final TerminalRule tBooleanType;
   private final TerminalRule tNumericType;
   private final TerminalRule tIntegralType;
   private final TerminalRule tFloatingPointType;
   private final ReferenceTypeElements pReferenceType;
   private final ClassOrInterfaceTypeElements pClassOrInterfaceType;
   private final ClassOrInterfaceTypeSegmentElements pClassOrInterfaceTypeSegment;
   private final ClassTypeElements pClassType;
   private final ClassType_lf_classOrInterfaceTypeElements pClassType_lf_classOrInterfaceType;
   private final ClassType_lfno_classOrInterfaceTypeElements pClassType_lfno_classOrInterfaceType;
   private final InterfaceTypeElements pInterfaceType;
   private final InterfaceType_lf_classOrInterfaceTypeElements pInterfaceType_lf_classOrInterfaceType;
   private final InterfaceType_lfno_classOrInterfaceTypeElements pInterfaceType_lfno_classOrInterfaceType;
   private final TypeVariableElements pTypeVariable;
   private final ArrayTypeElements pArrayType;
   private final DimsElements pDims;
   private final DimElements pDim;
   private final TypeParameterElements pTypeParameter;
   private final TypeParameterModifierElements pTypeParameterModifier;
   private final TypeBoundElements pTypeBound;
   private final AdditionalBoundElements pAdditionalBound;
   private final TypeArgumentsElements pTypeArguments;
   private final TypeArgumentListElements pTypeArgumentList;
   private final TypeArgumentElements pTypeArgument;
   private final WildcardElements pWildcard;
   private final WildcardBoundsElements pWildcardBounds;
   private final PackageNameElements pPackageName;
   private final TypeNameElements pTypeName;
   private final PackageOrTypeNameElements pPackageOrTypeName;
   private final ExpressionNameElements pExpressionName;
   private final MethodNameElements pMethodName;
   private final AmbiguousNameElements pAmbiguousName;
   private final QualifiedNameElements pQualifiedName;
   private final CompilationUnitElements pCompilationUnit;
   private final PackageDeclarationElements pPackageDeclaration;
   private final PackageModifierElements pPackageModifier;
   private final ImportDeclarationElements pImportDeclaration;
   private final SingleTypeImportDeclarationElements pSingleTypeImportDeclaration;
   private final TypeImportOnDemandDeclarationElements pTypeImportOnDemandDeclaration;
   private final SingleStaticImportDeclarationElements pSingleStaticImportDeclaration;
   private final StaticImportOnDemandDeclarationElements pStaticImportOnDemandDeclaration;
   private final TypeDeclarationElements pTypeDeclaration;
   private final ClassDeclarationElements pClassDeclaration;
   private final NormalClassDeclarationElements pNormalClassDeclaration;
   private final ClassModifierElements pClassModifier;
   private final JavaClassModifierElements pJavaClassModifier;
   private final ClassModifiersElements unknownRuleClassModifiers;
   private final TypeParametersElements pTypeParameters;
   private final TypeParameterListElements pTypeParameterList;
   private final SuperclassElements pSuperclass;
   private final SuperinterfacesElements pSuperinterfaces;
   private final InterfaceTypeListElements pInterfaceTypeList;
   private final ClassBodyElements pClassBody;
   private final ClassBodyDeclarationElements pClassBodyDeclaration;
   private final ClassMemberDeclarationElements pClassMemberDeclaration;
   private final FieldDeclarationElements pFieldDeclaration;
   private final FieldModifierElements pFieldModifier;
   private final JavaFieldModifierElements pJavaFieldModifier;
   private final FieldModifiersElements unknownRuleFieldModifiers;
   private final VariableDeclaratorListElements pVariableDeclaratorList;
   private final VariableDeclaratorElements pVariableDeclarator;
   private final VariableDeclaratorIdElements pVariableDeclaratorId;
   private final VariableInitializerElements pVariableInitializer;
   private final UnannTypeElements pUnannType;
   private final UnannPrimitiveTypeElements pUnannPrimitiveType;
   private final UnannReferenceTypeElements pUnannReferenceType;
   private final UnannClassOrInterfaceTypeElements pUnannClassOrInterfaceType;
   private final UnannClassTypeElements pUnannClassType;
   private final ClassTypeSegmentElements pClassTypeSegment;
   private final ClassTypeSegmentWithAnnotationsElements pClassTypeSegmentWithAnnotations;
   private final UnannInterfaceTypeElements pUnannInterfaceType;
   private final UnannTypeVariableElements pUnannTypeVariable;
   private final UnannArrayTypeElements pUnannArrayType;
   private final MethodDeclarationElements pMethodDeclaration;
   private final MethodModifierElements pMethodModifier;
   private final JavaMethodModifierElements pJavaMethodModifier;
   private final MethodModifiersElements unknownRuleMethodModifiers;
   private final MethodHeaderElements pMethodHeader;
   private final ResultElements pResult;
   private final VoidTypeElements pVoidType;
   private final MethodDeclaratorElements pMethodDeclarator;
   private final FormalParameterListElements pFormalParameterList;
   private final FormalParametersElements pFormalParameters;
   private final FormalParameterElements pFormalParameter;
   private final VariableModifierElements pVariableModifier;
   private final JavaVariableModifierElements pJavaVariableModifier;
   private final VariableModifiersElements unknownRuleVariableModifiers;
   private final LastFormalParameterElements pLastFormalParameter;
   private final ReceiverParameterElements pReceiverParameter;
   private final Throws_Elements pThrows_;
   private final ExceptionTypeListElements pExceptionTypeList;
   private final ExceptionTypeElements pExceptionType;
   private final MethodBodyElements pMethodBody;
   private final InstanceInitializerElements pInstanceInitializer;
   private final StaticInitializerElements pStaticInitializer;
   private final ConstructorDeclarationElements pConstructorDeclaration;
   private final ConstructorModifierElements pConstructorModifier;
   private final JavaConstructorModifierElements pJavaConstructorModifier;
   private final ConstructorModifiersElements unknownRuleConstructorModifiers;
   private final ConstructorDeclaratorElements pConstructorDeclarator;
   private final SimpleTypeNameElements pSimpleTypeName;
   private final EnumDeclarationElements pEnumDeclaration;
   private final EnumBodyElements pEnumBody;
   private final EnumConstantListElements pEnumConstantList;
   private final EnumConstantElements pEnumConstant;
   private final EnumConstantModifierElements pEnumConstantModifier;
   private final EnumBodyDeclarationsElements pEnumBodyDeclarations;
   private final InterfaceDeclarationElements pInterfaceDeclaration;
   private final NormalInterfaceDeclarationElements pNormalInterfaceDeclaration;
   private final InterfaceModifierElements pInterfaceModifier;
   private final JavaInterfaceModifierElements pJavaInterfaceModifier;
   private final InterfaceModifiersElements unknownRuleInterfaceModifiers;
   private final ExtendsInterfacesElements pExtendsInterfaces;
   private final InterfaceBodyElements pInterfaceBody;
   private final InterfaceMemberDeclarationElements pInterfaceMemberDeclaration;
   private final ConstantDeclarationElements pConstantDeclaration;
   private final ConstantModifierElements pConstantModifier;
   private final JavaConstantModifierElements pJavaConstantModifier;
   private final ConstantModifiersElements unknownRuleConstantModifiers;
   private final InterfaceMethodDeclarationElements pInterfaceMethodDeclaration;
   private final InterfaceMethodModifierElements pInterfaceMethodModifier;
   private final JavaInterfaceMethodModifiersElements pJavaInterfaceMethodModifiers;
   private final InterfaceMethodModifiersElements unknownRuleInterfaceMethodModifiers;
   private final AnnotationTypeDeclarationElements pAnnotationTypeDeclaration;
   private final AnnotationTypeBodyElements pAnnotationTypeBody;
   private final AnnotationTypeMemberDeclarationElements pAnnotationTypeMemberDeclaration;
   private final AnnotationTypeElementDeclarationElements pAnnotationTypeElementDeclaration;
   private final AnnotationTypeElementModifierElements pAnnotationTypeElementModifier;
   private final JavaAnnotationTypeElementModifiersElements pJavaAnnotationTypeElementModifiers;
   private final AnnotationTypeElementModifiersElements unknownRuleAnnotationTypeElementModifiers;
   private final DefaultValueElements pDefaultValue;
   private final AnnotationElements pAnnotation;
   private final NormalAnnotationElements pNormalAnnotation;
   private final ElementValuePairListElements pElementValuePairList;
   private final ElementValuePairElements pElementValuePair;
   private final ElementValueElements pElementValue;
   private final ElementValueArrayInitializerElements pElementValueArrayInitializer;
   private final ElementValueListElements pElementValueList;
   private final MarkerAnnotationElements pMarkerAnnotation;
   private final SingleElementAnnotationElements pSingleElementAnnotation;
   private final ArrayInitializerElements pArrayInitializer;
   private final VariableInitializerListElements pVariableInitializerList;
   private final BlockElements pBlock;
   private final BlockStatementsElements pBlockStatements;
   private final ArgumentListElements pArgumentList;
   private final PrimaryElements pPrimary;
   private final ExpressionElements pExpression;
   private final ConditionalExpressionElements pConditionalExpression;

   private final Grammar grammar;

   private final LiteralsGrammarAccess gaLiterals;

   @Inject
   public TypeGrammarAccess(GrammarProvider grammarProvider, LiteralsGrammarAccess gaLiterals) {
      this.grammar = internalFindGrammar(grammarProvider);
      this.gaLiterals = gaLiterals;
      this.pModel = new ModelElements();
      this.pType = new TypeElements();
      this.pPrimitiveType = new PrimitiveTypeElements();
      this.tBooleanType = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "booleanType");
      this.tNumericType = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "numericType");
      this.tIntegralType = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "integralType");
      this.tFloatingPointType = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "floatingPointType");
      this.pReferenceType = new ReferenceTypeElements();
      this.pClassOrInterfaceType = new ClassOrInterfaceTypeElements();
      this.pClassOrInterfaceTypeSegment = new ClassOrInterfaceTypeSegmentElements();
      this.pClassType = new ClassTypeElements();
      this.pClassType_lf_classOrInterfaceType = new ClassType_lf_classOrInterfaceTypeElements();
      this.pClassType_lfno_classOrInterfaceType = new ClassType_lfno_classOrInterfaceTypeElements();
      this.pInterfaceType = new InterfaceTypeElements();
      this.pInterfaceType_lf_classOrInterfaceType = new InterfaceType_lf_classOrInterfaceTypeElements();
      this.pInterfaceType_lfno_classOrInterfaceType = new InterfaceType_lfno_classOrInterfaceTypeElements();
      this.pTypeVariable = new TypeVariableElements();
      this.pArrayType = new ArrayTypeElements();
      this.pDims = new DimsElements();
      this.pDim = new DimElements();
      this.pTypeParameter = new TypeParameterElements();
      this.pTypeParameterModifier = new TypeParameterModifierElements();
      this.pTypeBound = new TypeBoundElements();
      this.pAdditionalBound = new AdditionalBoundElements();
      this.pTypeArguments = new TypeArgumentsElements();
      this.pTypeArgumentList = new TypeArgumentListElements();
      this.pTypeArgument = new TypeArgumentElements();
      this.pWildcard = new WildcardElements();
      this.pWildcardBounds = new WildcardBoundsElements();
      this.pPackageName = new PackageNameElements();
      this.pTypeName = new TypeNameElements();
      this.pPackageOrTypeName = new PackageOrTypeNameElements();
      this.pExpressionName = new ExpressionNameElements();
      this.pMethodName = new MethodNameElements();
      this.pAmbiguousName = new AmbiguousNameElements();
      this.pQualifiedName = new QualifiedNameElements();
      this.pCompilationUnit = new CompilationUnitElements();
      this.pPackageDeclaration = new PackageDeclarationElements();
      this.pPackageModifier = new PackageModifierElements();
      this.pImportDeclaration = new ImportDeclarationElements();
      this.pSingleTypeImportDeclaration = new SingleTypeImportDeclarationElements();
      this.pTypeImportOnDemandDeclaration = new TypeImportOnDemandDeclarationElements();
      this.pSingleStaticImportDeclaration = new SingleStaticImportDeclarationElements();
      this.pStaticImportOnDemandDeclaration = new StaticImportOnDemandDeclarationElements();
      this.pTypeDeclaration = new TypeDeclarationElements();
      this.pClassDeclaration = new ClassDeclarationElements();
      this.pNormalClassDeclaration = new NormalClassDeclarationElements();
      this.pClassModifier = new ClassModifierElements();
      this.pJavaClassModifier = new JavaClassModifierElements();
      this.unknownRuleClassModifiers = new ClassModifiersElements();
      this.pTypeParameters = new TypeParametersElements();
      this.pTypeParameterList = new TypeParameterListElements();
      this.pSuperclass = new SuperclassElements();
      this.pSuperinterfaces = new SuperinterfacesElements();
      this.pInterfaceTypeList = new InterfaceTypeListElements();
      this.pClassBody = new ClassBodyElements();
      this.pClassBodyDeclaration = new ClassBodyDeclarationElements();
      this.pClassMemberDeclaration = new ClassMemberDeclarationElements();
      this.pFieldDeclaration = new FieldDeclarationElements();
      this.pFieldModifier = new FieldModifierElements();
      this.pJavaFieldModifier = new JavaFieldModifierElements();
      this.unknownRuleFieldModifiers = new FieldModifiersElements();
      this.pVariableDeclaratorList = new VariableDeclaratorListElements();
      this.pVariableDeclarator = new VariableDeclaratorElements();
      this.pVariableDeclaratorId = new VariableDeclaratorIdElements();
      this.pVariableInitializer = new VariableInitializerElements();
      this.pUnannType = new UnannTypeElements();
      this.pUnannPrimitiveType = new UnannPrimitiveTypeElements();
      this.pUnannReferenceType = new UnannReferenceTypeElements();
      this.pUnannClassOrInterfaceType = new UnannClassOrInterfaceTypeElements();
      this.pUnannClassType = new UnannClassTypeElements();
      this.pClassTypeSegment = new ClassTypeSegmentElements();
      this.pClassTypeSegmentWithAnnotations = new ClassTypeSegmentWithAnnotationsElements();
      this.pUnannInterfaceType = new UnannInterfaceTypeElements();
      this.pUnannTypeVariable = new UnannTypeVariableElements();
      this.pUnannArrayType = new UnannArrayTypeElements();
      this.pMethodDeclaration = new MethodDeclarationElements();
      this.pMethodModifier = new MethodModifierElements();
      this.pJavaMethodModifier = new JavaMethodModifierElements();
      this.unknownRuleMethodModifiers = new MethodModifiersElements();
      this.pMethodHeader = new MethodHeaderElements();
      this.pResult = new ResultElements();
      this.pVoidType = new VoidTypeElements();
      this.pMethodDeclarator = new MethodDeclaratorElements();
      this.pFormalParameterList = new FormalParameterListElements();
      this.pFormalParameters = new FormalParametersElements();
      this.pFormalParameter = new FormalParameterElements();
      this.pVariableModifier = new VariableModifierElements();
      this.pJavaVariableModifier = new JavaVariableModifierElements();
      this.unknownRuleVariableModifiers = new VariableModifiersElements();
      this.pLastFormalParameter = new LastFormalParameterElements();
      this.pReceiverParameter = new ReceiverParameterElements();
      this.pThrows_ = new Throws_Elements();
      this.pExceptionTypeList = new ExceptionTypeListElements();
      this.pExceptionType = new ExceptionTypeElements();
      this.pMethodBody = new MethodBodyElements();
      this.pInstanceInitializer = new InstanceInitializerElements();
      this.pStaticInitializer = new StaticInitializerElements();
      this.pConstructorDeclaration = new ConstructorDeclarationElements();
      this.pConstructorModifier = new ConstructorModifierElements();
      this.pJavaConstructorModifier = new JavaConstructorModifierElements();
      this.unknownRuleConstructorModifiers = new ConstructorModifiersElements();
      this.pConstructorDeclarator = new ConstructorDeclaratorElements();
      this.pSimpleTypeName = new SimpleTypeNameElements();
      this.pEnumDeclaration = new EnumDeclarationElements();
      this.pEnumBody = new EnumBodyElements();
      this.pEnumConstantList = new EnumConstantListElements();
      this.pEnumConstant = new EnumConstantElements();
      this.pEnumConstantModifier = new EnumConstantModifierElements();
      this.pEnumBodyDeclarations = new EnumBodyDeclarationsElements();
      this.pInterfaceDeclaration = new InterfaceDeclarationElements();
      this.pNormalInterfaceDeclaration = new NormalInterfaceDeclarationElements();
      this.pInterfaceModifier = new InterfaceModifierElements();
      this.pJavaInterfaceModifier = new JavaInterfaceModifierElements();
      this.unknownRuleInterfaceModifiers = new InterfaceModifiersElements();
      this.pExtendsInterfaces = new ExtendsInterfacesElements();
      this.pInterfaceBody = new InterfaceBodyElements();
      this.pInterfaceMemberDeclaration = new InterfaceMemberDeclarationElements();
      this.pConstantDeclaration = new ConstantDeclarationElements();
      this.pConstantModifier = new ConstantModifierElements();
      this.pJavaConstantModifier = new JavaConstantModifierElements();
      this.unknownRuleConstantModifiers = new ConstantModifiersElements();
      this.pInterfaceMethodDeclaration = new InterfaceMethodDeclarationElements();
      this.pInterfaceMethodModifier = new InterfaceMethodModifierElements();
      this.pJavaInterfaceMethodModifiers = new JavaInterfaceMethodModifiersElements();
      this.unknownRuleInterfaceMethodModifiers = new InterfaceMethodModifiersElements();
      this.pAnnotationTypeDeclaration = new AnnotationTypeDeclarationElements();
      this.pAnnotationTypeBody = new AnnotationTypeBodyElements();
      this.pAnnotationTypeMemberDeclaration = new AnnotationTypeMemberDeclarationElements();
      this.pAnnotationTypeElementDeclaration = new AnnotationTypeElementDeclarationElements();
      this.pAnnotationTypeElementModifier = new AnnotationTypeElementModifierElements();
      this.pJavaAnnotationTypeElementModifiers = new JavaAnnotationTypeElementModifiersElements();
      this.unknownRuleAnnotationTypeElementModifiers = new AnnotationTypeElementModifiersElements();
      this.pDefaultValue = new DefaultValueElements();
      this.pAnnotation = new AnnotationElements();
      this.pNormalAnnotation = new NormalAnnotationElements();
      this.pElementValuePairList = new ElementValuePairListElements();
      this.pElementValuePair = new ElementValuePairElements();
      this.pElementValue = new ElementValueElements();
      this.pElementValueArrayInitializer = new ElementValueArrayInitializerElements();
      this.pElementValueList = new ElementValueListElements();
      this.pMarkerAnnotation = new MarkerAnnotationElements();
      this.pSingleElementAnnotation = new SingleElementAnnotationElements();
      this.pArrayInitializer = new ArrayInitializerElements();
      this.pVariableInitializerList = new VariableInitializerListElements();
      this.pBlock = new BlockElements();
      this.pBlockStatements = new BlockStatementsElements();
      this.pArgumentList = new ArgumentListElements();
      this.pPrimary = new PrimaryElements();
      this.pExpression = new ExpressionElements();
      this.pConditionalExpression = new ConditionalExpressionElements();
   }

   protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
      Grammar grammar = grammarProvider.getGrammar(this);
      while (grammar != null) {
         if ("org.sourcepit.java.type.Type".equals(grammar.getName())) {
            return grammar;
         }
         List<Grammar> grammars = grammar.getUsedGrammars();
         if (!grammars.isEmpty()) {
            grammar = grammars.iterator().next();
         }
         else {
            return null;
         }
      }
      return grammar;
   }


   public Grammar getGrammar() {
      return grammar;
   }


   public LiteralsGrammarAccess getLiteralsGrammarAccess() {
      return gaLiterals;
   }


   // Model:
   // type=literal;
   public ModelElements getModelAccess() {
      return pModel;
   }

   public ParserRule getModelRule() {
      return getModelAccess().getRule();
   }

   // / *
   // * Productions from §4 (Types, Values, and Variables)
   // * / type:
   // primitiveType | referenceType;
   public TypeElements getTypeAccess() {
      return pType;
   }

   public ParserRule getTypeRule() {
      return getTypeAccess().getRule();
   }

   // primitiveType:
   // annotations+=annotation* typeName=(numericType | booleanType);
   public PrimitiveTypeElements getPrimitiveTypeAccess() {
      return pPrimitiveType;
   }

   public ParserRule getPrimitiveTypeRule() {
      return getPrimitiveTypeAccess().getRule();
   }

   // terminal booleanType:
   // "boolean";
   public TerminalRule getBooleanTypeRule() {
      return tBooleanType;
   }

   // terminal numericType:
   // integralType | floatingPointType;
   public TerminalRule getNumericTypeRule() {
      return tNumericType;
   }

   // terminal integralType:
   // "byte" | "short" | "int" | "long" | "char";
   public TerminalRule getIntegralTypeRule() {
      return tIntegralType;
   }

   // terminal floatingPointType:
   // "float" | "double";
   public TerminalRule getFloatingPointTypeRule() {
      return tFloatingPointType;
   }

   // referenceType:
   // classOrInterfaceType | typeVariable | arrayType;
   public ReferenceTypeElements getReferenceTypeAccess() {
      return pReferenceType;
   }

   public ParserRule getReferenceTypeRule() {
      return getReferenceTypeAccess().getRule();
   }

   // classOrInterfaceType:
   // classOrInterfaceTypeSegments+=classOrInterfaceTypeSegment ("."
   // classOrInterfaceTypeSegments+=classOrInterfaceTypeSegment?)*;
   public ClassOrInterfaceTypeElements getClassOrInterfaceTypeAccess() {
      return pClassOrInterfaceType;
   }

   public ParserRule getClassOrInterfaceTypeRule() {
      return getClassOrInterfaceTypeAccess().getRule();
   }

   // classOrInterfaceTypeSegment:
   // annotations+=annotation* name=Identifier typeArguments=typeArguments?;
   public ClassOrInterfaceTypeSegmentElements getClassOrInterfaceTypeSegmentAccess() {
      return pClassOrInterfaceTypeSegment;
   }

   public ParserRule getClassOrInterfaceTypeSegmentRule() {
      return getClassOrInterfaceTypeSegmentAccess().getRule();
   }

   // classType:
   // annotations+=annotation* name=Identifier typeArguments=typeArguments? | classOrInterfaceType=classOrInterfaceType
   // "."
   // annotations+=annotation* name=Identifier typeArguments=typeArguments?;
   public ClassTypeElements getClassTypeAccess() {
      return pClassType;
   }

   public ParserRule getClassTypeRule() {
      return getClassTypeAccess().getRule();
   }

   // classType_lf_classOrInterfaceType:
   // "." annotations+=annotation* name=Identifier typeArguments=typeArguments?;
   public ClassType_lf_classOrInterfaceTypeElements getClassType_lf_classOrInterfaceTypeAccess() {
      return pClassType_lf_classOrInterfaceType;
   }

   public ParserRule getClassType_lf_classOrInterfaceTypeRule() {
      return getClassType_lf_classOrInterfaceTypeAccess().getRule();
   }

   // classType_lfno_classOrInterfaceType:
   // annotations+=annotation* name=Identifier typeArguments=typeArguments?;
   public ClassType_lfno_classOrInterfaceTypeElements getClassType_lfno_classOrInterfaceTypeAccess() {
      return pClassType_lfno_classOrInterfaceType;
   }

   public ParserRule getClassType_lfno_classOrInterfaceTypeRule() {
      return getClassType_lfno_classOrInterfaceTypeAccess().getRule();
   }

   // interfaceType:
   // classType;
   public InterfaceTypeElements getInterfaceTypeAccess() {
      return pInterfaceType;
   }

   public ParserRule getInterfaceTypeRule() {
      return getInterfaceTypeAccess().getRule();
   }

   // interfaceType_lf_classOrInterfaceType:
   // classType_lf_classOrInterfaceType;
   public InterfaceType_lf_classOrInterfaceTypeElements getInterfaceType_lf_classOrInterfaceTypeAccess() {
      return pInterfaceType_lf_classOrInterfaceType;
   }

   public ParserRule getInterfaceType_lf_classOrInterfaceTypeRule() {
      return getInterfaceType_lf_classOrInterfaceTypeAccess().getRule();
   }

   // interfaceType_lfno_classOrInterfaceType:
   // classType_lfno_classOrInterfaceType;
   public InterfaceType_lfno_classOrInterfaceTypeElements getInterfaceType_lfno_classOrInterfaceTypeAccess() {
      return pInterfaceType_lfno_classOrInterfaceType;
   }

   public ParserRule getInterfaceType_lfno_classOrInterfaceTypeRule() {
      return getInterfaceType_lfno_classOrInterfaceTypeAccess().getRule();
   }

   // typeVariable:
   // annotations+=annotation* name=Identifier;
   public TypeVariableElements getTypeVariableAccess() {
      return pTypeVariable;
   }

   public ParserRule getTypeVariableRule() {
      return getTypeVariableAccess().getRule();
   }

   // arrayType:
   // type=(primitiveType | classOrInterfaceType | typeVariable) dims=dims;
   public ArrayTypeElements getArrayTypeAccess() {
      return pArrayType;
   }

   public ParserRule getArrayTypeRule() {
      return getArrayTypeAccess().getRule();
   }

   // dims:
   // dims+=dim dims+=dim*;
   public DimsElements getDimsAccess() {
      return pDims;
   }

   public ParserRule getDimsRule() {
      return getDimsAccess().getRule();
   }

   // dim:
   // {dim} annotations+=annotation* "[" "]";
   public DimElements getDimAccess() {
      return pDim;
   }

   public ParserRule getDimRule() {
      return getDimAccess().getRule();
   }

   // typeParameter:
   // typeParameterModifiers+=typeParameterModifier* name=Identifier typeBound=typeBound?;
   public TypeParameterElements getTypeParameterAccess() {
      return pTypeParameter;
   }

   public ParserRule getTypeParameterRule() {
      return getTypeParameterAccess().getRule();
   }

   // typeParameterModifier:
   // annotation;
   public TypeParameterModifierElements getTypeParameterModifierAccess() {
      return pTypeParameterModifier;
   }

   public ParserRule getTypeParameterModifierRule() {
      return getTypeParameterModifierAccess().getRule();
   }

   // typeBound:
   // "extends" typeVariable=typeVariable | "extends" classOrInterfaceType=classOrInterfaceType
   // additionalBound+=additionalBound*;
   public TypeBoundElements getTypeBoundAccess() {
      return pTypeBound;
   }

   public ParserRule getTypeBoundRule() {
      return getTypeBoundAccess().getRule();
   }

   // additionalBound:
   // "&" interfaceType;
   public AdditionalBoundElements getAdditionalBoundAccess() {
      return pAdditionalBound;
   }

   public ParserRule getAdditionalBoundRule() {
      return getAdditionalBoundAccess().getRule();
   }

   // typeArguments:
   // "<" typeArgumentList ">";
   public TypeArgumentsElements getTypeArgumentsAccess() {
      return pTypeArguments;
   }

   public ParserRule getTypeArgumentsRule() {
      return getTypeArgumentsAccess().getRule();
   }

   // typeArgumentList:
   // typeArguments+=typeArgument ("," typeArguments+=typeArgument)*;
   public TypeArgumentListElements getTypeArgumentListAccess() {
      return pTypeArgumentList;
   }

   public ParserRule getTypeArgumentListRule() {
      return getTypeArgumentListAccess().getRule();
   }

   // typeArgument:
   // referenceType | wildcard;
   public TypeArgumentElements getTypeArgumentAccess() {
      return pTypeArgument;
   }

   public ParserRule getTypeArgumentRule() {
      return getTypeArgumentAccess().getRule();
   }

   // wildcard:
   // {wildcard} annotations+=annotation* "?" wildcardBounds=wildcardBounds?;
   public WildcardElements getWildcardAccess() {
      return pWildcard;
   }

   public ParserRule getWildcardRule() {
      return getWildcardAccess().getRule();
   }

   // wildcardBounds:
   // "extends" referenceType | "super" referenceType;
   public WildcardBoundsElements getWildcardBoundsAccess() {
      return pWildcardBounds;
   }

   public ParserRule getWildcardBoundsRule() {
      return getWildcardBoundsAccess().getRule();
   }

   // / *
   // * Productions from §6 (Names)
   // * / packageName:
   // qualifiedName;
   public PackageNameElements getPackageNameAccess() {
      return pPackageName;
   }

   public ParserRule getPackageNameRule() {
      return getPackageNameAccess().getRule();
   }

   // typeName:
   // qualifiedName;
   public TypeNameElements getTypeNameAccess() {
      return pTypeName;
   }

   public ParserRule getTypeNameRule() {
      return getTypeNameAccess().getRule();
   }

   // packageOrTypeName:
   // qualifiedName;
   public PackageOrTypeNameElements getPackageOrTypeNameAccess() {
      return pPackageOrTypeName;
   }

   public ParserRule getPackageOrTypeNameRule() {
      return getPackageOrTypeNameAccess().getRule();
   }

   // expressionName:
   // qualifiedName;
   public ExpressionNameElements getExpressionNameAccess() {
      return pExpressionName;
   }

   public ParserRule getExpressionNameRule() {
      return getExpressionNameAccess().getRule();
   }

   // methodName:
   // Identifier;
   public MethodNameElements getMethodNameAccess() {
      return pMethodName;
   }

   public ParserRule getMethodNameRule() {
      return getMethodNameAccess().getRule();
   }

   // ambiguousName:
   // qualifiedName;
   public AmbiguousNameElements getAmbiguousNameAccess() {
      return pAmbiguousName;
   }

   public ParserRule getAmbiguousNameRule() {
      return getAmbiguousNameAccess().getRule();
   }

   // qualifiedName:
   // Identifier ("." Identifier)*;
   public QualifiedNameElements getQualifiedNameAccess() {
      return pQualifiedName;
   }

   public ParserRule getQualifiedNameRule() {
      return getQualifiedNameAccess().getRule();
   }

   // / *
   // * Productions from §7 (Packages)
   // * / compilationUnit:
   // {compilationUnit} package=packageDeclaration? imports+=importDeclaration* types+=typeDeclaration*;
   public CompilationUnitElements getCompilationUnitAccess() {
      return pCompilationUnit;
   }

   public ParserRule getCompilationUnitRule() {
      return getCompilationUnitAccess().getRule();
   }

   // packageDeclaration:
   // modifiers+=packageModifier* "package" name=packageName ";";
   public PackageDeclarationElements getPackageDeclarationAccess() {
      return pPackageDeclaration;
   }

   public ParserRule getPackageDeclarationRule() {
      return getPackageDeclarationAccess().getRule();
   }

   // packageModifier:
   // annotation;
   public PackageModifierElements getPackageModifierAccess() {
      return pPackageModifier;
   }

   public ParserRule getPackageModifierRule() {
      return getPackageModifierAccess().getRule();
   }

   // importDeclaration:
   // singleTypeImportDeclaration | typeImportOnDemandDeclaration | singleStaticImportDeclaration |
   // staticImportOnDemandDeclaration;
   public ImportDeclarationElements getImportDeclarationAccess() {
      return pImportDeclaration;
   }

   public ParserRule getImportDeclarationRule() {
      return getImportDeclarationAccess().getRule();
   }

   // singleTypeImportDeclaration:
   // "import" name=typeName ";";
   public SingleTypeImportDeclarationElements getSingleTypeImportDeclarationAccess() {
      return pSingleTypeImportDeclaration;
   }

   public ParserRule getSingleTypeImportDeclarationRule() {
      return getSingleTypeImportDeclarationAccess().getRule();
   }

   // typeImportOnDemandDeclaration:
   // "import" name=packageOrTypeName "." "*" ";";
   public TypeImportOnDemandDeclarationElements getTypeImportOnDemandDeclarationAccess() {
      return pTypeImportOnDemandDeclaration;
   }

   public ParserRule getTypeImportOnDemandDeclarationRule() {
      return getTypeImportOnDemandDeclarationAccess().getRule();
   }

   // singleStaticImportDeclaration:
   // "import" "static" name=typeName ";";
   public SingleStaticImportDeclarationElements getSingleStaticImportDeclarationAccess() {
      return pSingleStaticImportDeclaration;
   }

   public ParserRule getSingleStaticImportDeclarationRule() {
      return getSingleStaticImportDeclarationAccess().getRule();
   }

   // staticImportOnDemandDeclaration:
   // "import" "static" name=typeName "." "*" ";";
   public StaticImportOnDemandDeclarationElements getStaticImportOnDemandDeclarationAccess() {
      return pStaticImportOnDemandDeclaration;
   }

   public ParserRule getStaticImportOnDemandDeclarationRule() {
      return getStaticImportOnDemandDeclarationAccess().getRule();
   }

   // typeDeclaration:
   // classDeclaration | interfaceDeclaration | {EmptyTypeDeclaration} ";";
   public TypeDeclarationElements getTypeDeclarationAccess() {
      return pTypeDeclaration;
   }

   public ParserRule getTypeDeclarationRule() {
      return getTypeDeclarationAccess().getRule();
   }

   // / *
   // * Productions from §8 (Classes)
   // * / classDeclaration:
   // normalClassDeclaration | enumDeclaration;
   public ClassDeclarationElements getClassDeclarationAccess() {
      return pClassDeclaration;
   }

   public ParserRule getClassDeclarationRule() {
      return getClassDeclarationAccess().getRule();
   }

   // normalClassDeclaration:
   // modifiers+=classModifier* "class" name=Identifier typeParameters=typeParameters? superclass=superclass?
   // superinterfaces=superinterfaces? classBody=classBody;
   public NormalClassDeclarationElements getNormalClassDeclarationAccess() {
      return pNormalClassDeclaration;
   }

   public ParserRule getNormalClassDeclarationRule() {
      return getNormalClassDeclarationAccess().getRule();
   }

   // classModifier:
   // annotation | JavaClassModifier;
   public ClassModifierElements getClassModifierAccess() {
      return pClassModifier;
   }

   public ParserRule getClassModifierRule() {
      return getClassModifierAccess().getRule();
   }

   // JavaClassModifier:
   // modifier=ClassModifiers;
   public JavaClassModifierElements getJavaClassModifierAccess() {
      return pJavaClassModifier;
   }

   public ParserRule getJavaClassModifierRule() {
      return getJavaClassModifierAccess().getRule();
   }

   // enum ClassModifiers:
   // PUBLIC="public" | PROTECTED="protected" | PRIVATE="private" | ABSTRACT="abstract" | STATIC="static" |
   // FINAL="final" |
   // STRICTFP="strictfp";
   public ClassModifiersElements getClassModifiersAccess() {
      return unknownRuleClassModifiers;
   }

   public EnumRule getClassModifiersRule() {
      return getClassModifiersAccess().getRule();
   }

   // typeParameters:
   // "<" typeParameterList ">";
   public TypeParametersElements getTypeParametersAccess() {
      return pTypeParameters;
   }

   public ParserRule getTypeParametersRule() {
      return getTypeParametersAccess().getRule();
   }

   // typeParameterList:
   // typeParameters+=typeParameter ("," typeParameters+=typeParameter)*;
   public TypeParameterListElements getTypeParameterListAccess() {
      return pTypeParameterList;
   }

   public ParserRule getTypeParameterListRule() {
      return getTypeParameterListAccess().getRule();
   }

   // superclass:
   // "extends" classType;
   public SuperclassElements getSuperclassAccess() {
      return pSuperclass;
   }

   public ParserRule getSuperclassRule() {
      return getSuperclassAccess().getRule();
   }

   // superinterfaces:
   // "implements" interfaceTypeList;
   public SuperinterfacesElements getSuperinterfacesAccess() {
      return pSuperinterfaces;
   }

   public ParserRule getSuperinterfacesRule() {
      return getSuperinterfacesAccess().getRule();
   }

   // interfaceTypeList:
   // interfaceTypes+=interfaceType ("," interfaceTypes+=interfaceType)*;
   public InterfaceTypeListElements getInterfaceTypeListAccess() {
      return pInterfaceTypeList;
   }

   public ParserRule getInterfaceTypeListRule() {
      return getInterfaceTypeListAccess().getRule();
   }

   // classBody:
   // {classBody} "{" declarations+=classBodyDeclaration* "}";
   public ClassBodyElements getClassBodyAccess() {
      return pClassBody;
   }

   public ParserRule getClassBodyRule() {
      return getClassBodyAccess().getRule();
   }

   // classBodyDeclaration:
   // classMemberDeclaration | instanceInitializer | staticInitializer | constructorDeclaration;
   public ClassBodyDeclarationElements getClassBodyDeclarationAccess() {
      return pClassBodyDeclaration;
   }

   public ParserRule getClassBodyDeclarationRule() {
      return getClassBodyDeclarationAccess().getRule();
   }

   // classMemberDeclaration:
   // fieldDeclaration | methodDeclaration | classDeclaration | interfaceDeclaration | {EmptyClassMemberDeclaration}
   // ";";
   public ClassMemberDeclarationElements getClassMemberDeclarationAccess() {
      return pClassMemberDeclaration;
   }

   public ParserRule getClassMemberDeclarationRule() {
      return getClassMemberDeclarationAccess().getRule();
   }

   // fieldDeclaration:
   // fieldModifiers+=fieldModifier* unannType=unannType variableDeclaratorList=variableDeclaratorList ";";
   public FieldDeclarationElements getFieldDeclarationAccess() {
      return pFieldDeclaration;
   }

   public ParserRule getFieldDeclarationRule() {
      return getFieldDeclarationAccess().getRule();
   }

   // fieldModifier:
   // annotation | JavaFieldModifier;
   public FieldModifierElements getFieldModifierAccess() {
      return pFieldModifier;
   }

   public ParserRule getFieldModifierRule() {
      return getFieldModifierAccess().getRule();
   }

   // JavaFieldModifier:
   // modifier=FieldModifiers;
   public JavaFieldModifierElements getJavaFieldModifierAccess() {
      return pJavaFieldModifier;
   }

   public ParserRule getJavaFieldModifierRule() {
      return getJavaFieldModifierAccess().getRule();
   }

   // enum FieldModifiers:
   // PUBLIC="public" | PROTECTED="protected" | PRIVATE="private" | STATIC="static" | FINAL="final" |
   // TRANSIENT="transient"
   // | VOLATILE="volatile";
   public FieldModifiersElements getFieldModifiersAccess() {
      return unknownRuleFieldModifiers;
   }

   public EnumRule getFieldModifiersRule() {
      return getFieldModifiersAccess().getRule();
   }

   // variableDeclaratorList:
   // variableDeclarators+=variableDeclarator ("," variableDeclarators+=variableDeclarator)*;
   public VariableDeclaratorListElements getVariableDeclaratorListAccess() {
      return pVariableDeclaratorList;
   }

   public ParserRule getVariableDeclaratorListRule() {
      return getVariableDeclaratorListAccess().getRule();
   }

   // variableDeclarator:
   // id=variableDeclaratorId ("=" initializer=variableInitializer)?;
   public VariableDeclaratorElements getVariableDeclaratorAccess() {
      return pVariableDeclarator;
   }

   public ParserRule getVariableDeclaratorRule() {
      return getVariableDeclaratorAccess().getRule();
   }

   // variableDeclaratorId:
   // id=Identifier dims=dims?;
   public VariableDeclaratorIdElements getVariableDeclaratorIdAccess() {
      return pVariableDeclaratorId;
   }

   public ParserRule getVariableDeclaratorIdRule() {
      return getVariableDeclaratorIdAccess().getRule();
   }

   // variableInitializer:
   // expression | arrayInitializer;
   public VariableInitializerElements getVariableInitializerAccess() {
      return pVariableInitializer;
   }

   public ParserRule getVariableInitializerRule() {
      return getVariableInitializerAccess().getRule();
   }

   // unannType:
   // unannPrimitiveType | unannReferenceType;
   public UnannTypeElements getUnannTypeAccess() {
      return pUnannType;
   }

   public ParserRule getUnannTypeRule() {
      return getUnannTypeAccess().getRule();
   }

   // unannPrimitiveType:
   // name=(numericType | booleanType);
   public UnannPrimitiveTypeElements getUnannPrimitiveTypeAccess() {
      return pUnannPrimitiveType;
   }

   public ParserRule getUnannPrimitiveTypeRule() {
      return getUnannPrimitiveTypeAccess().getRule();
   }

   // unannReferenceType:
   // unannClassOrInterfaceType | unannTypeVariable | unannArrayType;
   public UnannReferenceTypeElements getUnannReferenceTypeAccess() {
      return pUnannReferenceType;
   }

   public ParserRule getUnannReferenceTypeRule() {
      return getUnannReferenceTypeAccess().getRule();
   }

   // //unannClassOrInterfaceType:
   // // (unannClassType_lfno_unannClassOrInterfaceType | unannInterfaceType_lfno_unannClassOrInterfaceType)
   // // (unannClassType_lf_unannClassOrInterfaceType | unannInterfaceType_lf_unannClassOrInterfaceType)*;
   // //unannInterfaceType_lf_unannClassOrInterfaceType:
   // // unannClassType_lf_unannClassOrInterfaceType;
   // //
   // //unannInterfaceType_lfno_unannClassOrInterfaceType:
   // // unannClassType_lfno_unannClassOrInterfaceType;
   // //unannClassType_lf_unannClassOrInterfaceType:
   // // '.' annotations+=annotation* name=Identifier typeArguments+=typeArguments?;
   // //
   // //unannClassType_lfno_unannClassOrInterfaceType:
   // // name=Identifier typeArguments+=typeArguments?;
   // unannClassOrInterfaceType:
   // unannClassType | unannInterfaceType;
   public UnannClassOrInterfaceTypeElements getUnannClassOrInterfaceTypeAccess() {
      return pUnannClassOrInterfaceType;
   }

   public ParserRule getUnannClassOrInterfaceTypeRule() {
      return getUnannClassOrInterfaceTypeAccess().getRule();
   }

   // unannClassType:
   // classTypeSegment+=ClassTypeSegment ("." classTypeSegment+=ClassTypeSegment)* ("."
   // classTypeSegment+=ClassTypeSegmentWithAnnotations)?;
   public UnannClassTypeElements getUnannClassTypeAccess() {
      return pUnannClassType;
   }

   public ParserRule getUnannClassTypeRule() {
      return getUnannClassTypeAccess().getRule();
   }

   // ClassTypeSegment:
   // name=Identifier typeArguments=typeArguments?;
   public ClassTypeSegmentElements getClassTypeSegmentAccess() {
      return pClassTypeSegment;
   }

   public ParserRule getClassTypeSegmentRule() {
      return getClassTypeSegmentAccess().getRule();
   }

   // ClassTypeSegmentWithAnnotations:
   // annotations+=annotation* name=Identifier typeArguments=typeArguments?;
   public ClassTypeSegmentWithAnnotationsElements getClassTypeSegmentWithAnnotationsAccess() {
      return pClassTypeSegmentWithAnnotations;
   }

   public ParserRule getClassTypeSegmentWithAnnotationsRule() {
      return getClassTypeSegmentWithAnnotationsAccess().getRule();
   }

   // unannInterfaceType:
   // unannClassType;
   public UnannInterfaceTypeElements getUnannInterfaceTypeAccess() {
      return pUnannInterfaceType;
   }

   public ParserRule getUnannInterfaceTypeRule() {
      return getUnannInterfaceTypeAccess().getRule();
   }

   // unannTypeVariable:
   // name=Identifier;
   public UnannTypeVariableElements getUnannTypeVariableAccess() {
      return pUnannTypeVariable;
   }

   public ParserRule getUnannTypeVariableRule() {
      return getUnannTypeVariableAccess().getRule();
   }

   // unannArrayType:
   // (unannPrimitiveType | unannClassOrInterfaceType | unannTypeVariable) dims=dims;
   public UnannArrayTypeElements getUnannArrayTypeAccess() {
      return pUnannArrayType;
   }

   public ParserRule getUnannArrayTypeRule() {
      return getUnannArrayTypeAccess().getRule();
   }

   // methodDeclaration:
   // methodModifiers+=methodModifier* methodHeader=methodHeader methodBody=methodBody;
   public MethodDeclarationElements getMethodDeclarationAccess() {
      return pMethodDeclaration;
   }

   public ParserRule getMethodDeclarationRule() {
      return getMethodDeclarationAccess().getRule();
   }

   // methodModifier:
   // annotation | JavaMethodModifier;
   public MethodModifierElements getMethodModifierAccess() {
      return pMethodModifier;
   }

   public ParserRule getMethodModifierRule() {
      return getMethodModifierAccess().getRule();
   }

   // JavaMethodModifier:
   // modifier=methodModifiers;
   public JavaMethodModifierElements getJavaMethodModifierAccess() {
      return pJavaMethodModifier;
   }

   public ParserRule getJavaMethodModifierRule() {
      return getJavaMethodModifierAccess().getRule();
   }

   // enum methodModifiers:
   // PUBLIC="public" | PROTECTED="protected" | PRIVATE="private" | ABSTRACT="abstract" | STATIC="static" |
   // FINAL="final" |
   // SYNCHRONIZED="synchronized" | NATIVE="native" | STRICTFP="strictfp";
   public MethodModifiersElements getMethodModifiersAccess() {
      return unknownRuleMethodModifiers;
   }

   public EnumRule getMethodModifiersRule() {
      return getMethodModifiersAccess().getRule();
   }

   // methodHeader:
   // result=result methodDeclarator=methodDeclarator throws_=throws_? | typeParameters=typeParameters
   // annotations+=annotation* result=result methodDeclarator=methodDeclarator throws_=throws_?;
   public MethodHeaderElements getMethodHeaderAccess() {
      return pMethodHeader;
   }

   public ParserRule getMethodHeaderRule() {
      return getMethodHeaderAccess().getRule();
   }

   // result:
   // unannType | voidType;
   public ResultElements getResultAccess() {
      return pResult;
   }

   public ParserRule getResultRule() {
      return getResultAccess().getRule();
   }

   // voidType:
   // name="void";
   public VoidTypeElements getVoidTypeAccess() {
      return pVoidType;
   }

   public ParserRule getVoidTypeRule() {
      return getVoidTypeAccess().getRule();
   }

   // methodDeclarator:
   // name=Identifier "(" parameters+=formalParameterList? ")" dims_=dims?;
   public MethodDeclaratorElements getMethodDeclaratorAccess() {
      return pMethodDeclarator;
   }

   public ParserRule getMethodDeclaratorRule() {
      return getMethodDeclaratorAccess().getRule();
   }

   // formalParameterList:
   // parameters+=formalParameters "," parameters+=lastFormalParameter | parameters+=lastFormalParameter;
   public FormalParameterListElements getFormalParameterListAccess() {
      return pFormalParameterList;
   }

   public ParserRule getFormalParameterListRule() {
      return getFormalParameterListAccess().getRule();
   }

   // formalParameters:
   // parameters+=formalParameter ("," parameters+=formalParameter)* | parameters+=receiverParameter (","
   // parameters+=formalParameter)*;
   public FormalParametersElements getFormalParametersAccess() {
      return pFormalParameters;
   }

   public ParserRule getFormalParametersRule() {
      return getFormalParametersAccess().getRule();
   }

   // formalParameter:
   // modifiers+=variableModifier* type=unannType name=variableDeclaratorId;
   public FormalParameterElements getFormalParameterAccess() {
      return pFormalParameter;
   }

   public ParserRule getFormalParameterRule() {
      return getFormalParameterAccess().getRule();
   }

   // variableModifier:
   // annotation | JavaVariableModifier;
   public VariableModifierElements getVariableModifierAccess() {
      return pVariableModifier;
   }

   public ParserRule getVariableModifierRule() {
      return getVariableModifierAccess().getRule();
   }

   // JavaVariableModifier:
   // modifier=VariableModifiers;
   public JavaVariableModifierElements getJavaVariableModifierAccess() {
      return pJavaVariableModifier;
   }

   public ParserRule getJavaVariableModifierRule() {
      return getJavaVariableModifierAccess().getRule();
   }

   // enum VariableModifiers:
   // PUBLIC="final";
   public VariableModifiersElements getVariableModifiersAccess() {
      return unknownRuleVariableModifiers;
   }

   public EnumRule getVariableModifiersRule() {
      return getVariableModifiersAccess().getRule();
   }

   // lastFormalParameter:
   // modifiers+=variableModifier* type=unannType annotations+=annotation* varargs?="..." name=variableDeclaratorId |
   // formalParameter;
   public LastFormalParameterElements getLastFormalParameterAccess() {
      return pLastFormalParameter;
   }

   public ParserRule getLastFormalParameterRule() {
      return getLastFormalParameterAccess().getRule();
   }

   // receiverParameter:
   // annotations+=annotation* type=unannType (qualifier=Identifier ".")? name="this";
   public ReceiverParameterElements getReceiverParameterAccess() {
      return pReceiverParameter;
   }

   public ParserRule getReceiverParameterRule() {
      return getReceiverParameterAccess().getRule();
   }

   // throws_:
   // "throws" exceptionTypeList;
   public Throws_Elements getThrows_Access() {
      return pThrows_;
   }

   public ParserRule getThrows_Rule() {
      return getThrows_Access().getRule();
   }

   // exceptionTypeList:
   // exceptionTypes+=exceptionType ("," exceptionTypes+=exceptionType)*;
   public ExceptionTypeListElements getExceptionTypeListAccess() {
      return pExceptionTypeList;
   }

   public ParserRule getExceptionTypeListRule() {
      return getExceptionTypeListAccess().getRule();
   }

   // exceptionType:
   // classType | typeVariable;
   public ExceptionTypeElements getExceptionTypeAccess() {
      return pExceptionType;
   }

   public ParserRule getExceptionTypeRule() {
      return getExceptionTypeAccess().getRule();
   }

   // methodBody:
   // block | {methodBody} ";";
   public MethodBodyElements getMethodBodyAccess() {
      return pMethodBody;
   }

   public ParserRule getMethodBodyRule() {
      return getMethodBodyAccess().getRule();
   }

   // instanceInitializer:
   // block;
   public InstanceInitializerElements getInstanceInitializerAccess() {
      return pInstanceInitializer;
   }

   public ParserRule getInstanceInitializerRule() {
      return getInstanceInitializerAccess().getRule();
   }

   // staticInitializer:
   // "static" block;
   public StaticInitializerElements getStaticInitializerAccess() {
      return pStaticInitializer;
   }

   public ParserRule getStaticInitializerRule() {
      return getStaticInitializerAccess().getRule();
   }

   // // constructorBody=constructorBody;
   // constructorDeclaration:
   // constructorModifiers+=constructorModifier* constructorDeclarator=constructorDeclarator throws_=throws_?;
   public ConstructorDeclarationElements getConstructorDeclarationAccess() {
      return pConstructorDeclaration;
   }

   public ParserRule getConstructorDeclarationRule() {
      return getConstructorDeclarationAccess().getRule();
   }

   // constructorModifier:
   // annotation | JavaConstructorModifier;
   public ConstructorModifierElements getConstructorModifierAccess() {
      return pConstructorModifier;
   }

   public ParserRule getConstructorModifierRule() {
      return getConstructorModifierAccess().getRule();
   }

   // JavaConstructorModifier:
   // modifier=ConstructorModifiers;
   public JavaConstructorModifierElements getJavaConstructorModifierAccess() {
      return pJavaConstructorModifier;
   }

   public ParserRule getJavaConstructorModifierRule() {
      return getJavaConstructorModifierAccess().getRule();
   }

   // enum ConstructorModifiers:
   // PUBLIC="public" | PROTECTED="protected" | PRIVATE="private";
   public ConstructorModifiersElements getConstructorModifiersAccess() {
      return unknownRuleConstructorModifiers;
   }

   public EnumRule getConstructorModifiersRule() {
      return getConstructorModifiersAccess().getRule();
   }

   // constructorDeclarator:
   // typeParameters+=typeParameters? simpleTypeName=simpleTypeName "(" formalParameterList=formalParameterList? ")";
   public ConstructorDeclaratorElements getConstructorDeclaratorAccess() {
      return pConstructorDeclarator;
   }

   public ParserRule getConstructorDeclaratorRule() {
      return getConstructorDeclaratorAccess().getRule();
   }

   // simpleTypeName:
   // Identifier;
   public SimpleTypeNameElements getSimpleTypeNameAccess() {
      return pSimpleTypeName;
   }

   public ParserRule getSimpleTypeNameRule() {
      return getSimpleTypeNameAccess().getRule();
   }

   // //constructorBody:
   // // {constructorBody} '{' explicitConstructorInvocation=explicitConstructorInvocation?
   // blockStatements=blockStatements?
   // // '}';
   // //explicitConstructorInvocation:
   // // typeArguments=typeArguments? 'this' '(' argumentList=argumentList? ')' ';' | typeArguments=typeArguments?
   // 'super' '('
   // // argumentList=argumentList? ')' ';' | expressionName=expressionName '.' typeArguments=typeArguments? 'super' '('
   // // argumentList=argumentList? ')' ';' | primary=primary '.' typeArguments=typeArguments? 'super' '('
   // // argumentList=argumentList? ')' ';';
   // enumDeclaration:
   // modifiers+=classModifier* "enum" name=Identifier superinterfaces=superinterfaces? enumBody=enumBody;
   public EnumDeclarationElements getEnumDeclarationAccess() {
      return pEnumDeclaration;
   }

   public ParserRule getEnumDeclarationRule() {
      return getEnumDeclarationAccess().getRule();
   }

   // enumBody:
   // {enumBody} "{" enumConstantList=enumConstantList? ","? enumBodyDeclarations=enumBodyDeclarations? "}";
   public EnumBodyElements getEnumBodyAccess() {
      return pEnumBody;
   }

   public ParserRule getEnumBodyRule() {
      return getEnumBodyAccess().getRule();
   }

   // enumConstantList:
   // enumConstants+=enumConstant ("," enumConstants+=enumConstant)*;
   public EnumConstantListElements getEnumConstantListAccess() {
      return pEnumConstantList;
   }

   public ParserRule getEnumConstantListRule() {
      return getEnumConstantListAccess().getRule();
   }

   // enumConstant:
   // enumConstantModifiers+=enumConstantModifier* name=Identifier ("(" argumentList=argumentList? ")")?
   // classBody=classBody?;
   public EnumConstantElements getEnumConstantAccess() {
      return pEnumConstant;
   }

   public ParserRule getEnumConstantRule() {
      return getEnumConstantAccess().getRule();
   }

   // enumConstantModifier:
   // annotation;
   public EnumConstantModifierElements getEnumConstantModifierAccess() {
      return pEnumConstantModifier;
   }

   public ParserRule getEnumConstantModifierRule() {
      return getEnumConstantModifierAccess().getRule();
   }

   // enumBodyDeclarations:
   // {enumBodyDeclarations} ";" classBodyDeclarations+=classBodyDeclaration*;
   public EnumBodyDeclarationsElements getEnumBodyDeclarationsAccess() {
      return pEnumBodyDeclarations;
   }

   public ParserRule getEnumBodyDeclarationsRule() {
      return getEnumBodyDeclarationsAccess().getRule();
   }

   // / *
   // * Productions from §9 (Interfaces)
   // * / interfaceDeclaration:
   // normalInterfaceDeclaration | annotationTypeDeclaration;
   public InterfaceDeclarationElements getInterfaceDeclarationAccess() {
      return pInterfaceDeclaration;
   }

   public ParserRule getInterfaceDeclarationRule() {
      return getInterfaceDeclarationAccess().getRule();
   }

   // normalInterfaceDeclaration:
   // interfaceModifiers+=interfaceModifier* "interface" name=Identifier typeParameters=typeParameters?
   // extendsInterfaces=extendsInterfaces? interfaceBody=interfaceBody;
   public NormalInterfaceDeclarationElements getNormalInterfaceDeclarationAccess() {
      return pNormalInterfaceDeclaration;
   }

   public ParserRule getNormalInterfaceDeclarationRule() {
      return getNormalInterfaceDeclarationAccess().getRule();
   }

   // interfaceModifier:
   // annotation | JavaInterfaceModifier;
   public InterfaceModifierElements getInterfaceModifierAccess() {
      return pInterfaceModifier;
   }

   public ParserRule getInterfaceModifierRule() {
      return getInterfaceModifierAccess().getRule();
   }

   // JavaInterfaceModifier:
   // modifier=InterfaceModifiers;
   public JavaInterfaceModifierElements getJavaInterfaceModifierAccess() {
      return pJavaInterfaceModifier;
   }

   public ParserRule getJavaInterfaceModifierRule() {
      return getJavaInterfaceModifierAccess().getRule();
   }

   // enum InterfaceModifiers:
   // PUBLIC="public" | PROTECTED="protected" | PRIVATE="private" | ABSTRACT="abstract" | STATIC="static" |
   // STRICTFP="strictfp";
   public InterfaceModifiersElements getInterfaceModifiersAccess() {
      return unknownRuleInterfaceModifiers;
   }

   public EnumRule getInterfaceModifiersRule() {
      return getInterfaceModifiersAccess().getRule();
   }

   // extendsInterfaces:
   // "extends" interfaceTypeList;
   public ExtendsInterfacesElements getExtendsInterfacesAccess() {
      return pExtendsInterfaces;
   }

   public ParserRule getExtendsInterfacesRule() {
      return getExtendsInterfacesAccess().getRule();
   }

   // interfaceBody:
   // {interfaceBody} "{" interfaceMemberDeclarations+=interfaceMemberDeclaration* "}";
   public InterfaceBodyElements getInterfaceBodyAccess() {
      return pInterfaceBody;
   }

   public ParserRule getInterfaceBodyRule() {
      return getInterfaceBodyAccess().getRule();
   }

   // interfaceMemberDeclaration:
   // constantDeclaration | interfaceMethodDeclaration | classDeclaration | interfaceDeclaration |
   // {interfaceMemberDeclaration} ";";
   public InterfaceMemberDeclarationElements getInterfaceMemberDeclarationAccess() {
      return pInterfaceMemberDeclaration;
   }

   public ParserRule getInterfaceMemberDeclarationRule() {
      return getInterfaceMemberDeclarationAccess().getRule();
   }

   // constantDeclaration:
   // constantModifiers+=constantModifier* unannType=unannType variableDeclaratorList=variableDeclaratorList ";";
   public ConstantDeclarationElements getConstantDeclarationAccess() {
      return pConstantDeclaration;
   }

   public ParserRule getConstantDeclarationRule() {
      return getConstantDeclarationAccess().getRule();
   }

   // constantModifier:
   // annotation | JavaConstantModifier;
   public ConstantModifierElements getConstantModifierAccess() {
      return pConstantModifier;
   }

   public ParserRule getConstantModifierRule() {
      return getConstantModifierAccess().getRule();
   }

   // JavaConstantModifier:
   // modifier=ConstantModifiers;
   public JavaConstantModifierElements getJavaConstantModifierAccess() {
      return pJavaConstantModifier;
   }

   public ParserRule getJavaConstantModifierRule() {
      return getJavaConstantModifierAccess().getRule();
   }

   // enum ConstantModifiers:
   // PUBLIC="public" | STATIC="static" | FINAL="final";
   public ConstantModifiersElements getConstantModifiersAccess() {
      return unknownRuleConstantModifiers;
   }

   public EnumRule getConstantModifiersRule() {
      return getConstantModifiersAccess().getRule();
   }

   // interfaceMethodDeclaration:
   // interfaceMethodModifiers+=interfaceMethodModifier* methodHeader=methodHeader methodBody=methodBody;
   public InterfaceMethodDeclarationElements getInterfaceMethodDeclarationAccess() {
      return pInterfaceMethodDeclaration;
   }

   public ParserRule getInterfaceMethodDeclarationRule() {
      return getInterfaceMethodDeclarationAccess().getRule();
   }

   // interfaceMethodModifier:
   // annotation | JavaInterfaceMethodModifiers;
   public InterfaceMethodModifierElements getInterfaceMethodModifierAccess() {
      return pInterfaceMethodModifier;
   }

   public ParserRule getInterfaceMethodModifierRule() {
      return getInterfaceMethodModifierAccess().getRule();
   }

   // JavaInterfaceMethodModifiers:
   // modifiers=InterfaceMethodModifiers;
   public JavaInterfaceMethodModifiersElements getJavaInterfaceMethodModifiersAccess() {
      return pJavaInterfaceMethodModifiers;
   }

   public ParserRule getJavaInterfaceMethodModifiersRule() {
      return getJavaInterfaceMethodModifiersAccess().getRule();
   }

   // enum InterfaceMethodModifiers:
   // PUBLIC="public" | ABSTRACT="abstract" | DEFAULT="default" | STATIC="static" | STRICTFP="strictfp";
   public InterfaceMethodModifiersElements getInterfaceMethodModifiersAccess() {
      return unknownRuleInterfaceMethodModifiers;
   }

   public EnumRule getInterfaceMethodModifiersRule() {
      return getInterfaceMethodModifiersAccess().getRule();
   }

   // annotationTypeDeclaration:
   // interfaceModifiers+=interfaceModifier* "@" "interface" name=Identifier annotationTypeBody=annotationTypeBody;
   public AnnotationTypeDeclarationElements getAnnotationTypeDeclarationAccess() {
      return pAnnotationTypeDeclaration;
   }

   public ParserRule getAnnotationTypeDeclarationRule() {
      return getAnnotationTypeDeclarationAccess().getRule();
   }

   // annotationTypeBody:
   // {annotationTypeBody} "{" annotationTypeMemberDeclarations+=annotationTypeMemberDeclaration* "}";
   public AnnotationTypeBodyElements getAnnotationTypeBodyAccess() {
      return pAnnotationTypeBody;
   }

   public ParserRule getAnnotationTypeBodyRule() {
      return getAnnotationTypeBodyAccess().getRule();
   }

   // annotationTypeMemberDeclaration:
   // annotationTypeElementDeclaration | constantDeclaration | classDeclaration | interfaceDeclaration |
   // {annotationTypeMemberDeclaration} ";";
   public AnnotationTypeMemberDeclarationElements getAnnotationTypeMemberDeclarationAccess() {
      return pAnnotationTypeMemberDeclaration;
   }

   public ParserRule getAnnotationTypeMemberDeclarationRule() {
      return getAnnotationTypeMemberDeclarationAccess().getRule();
   }

   // annotationTypeElementDeclaration:
   // annotationTypeElementModifiers+=annotationTypeElementModifier* unannType=unannType name=Identifier "(" ")"
   // dims=dims?
   // defaultValue=defaultValue? ";";
   public AnnotationTypeElementDeclarationElements getAnnotationTypeElementDeclarationAccess() {
      return pAnnotationTypeElementDeclaration;
   }

   public ParserRule getAnnotationTypeElementDeclarationRule() {
      return getAnnotationTypeElementDeclarationAccess().getRule();
   }

   // annotationTypeElementModifier:
   // annotation | JavaAnnotationTypeElementModifiers;
   public AnnotationTypeElementModifierElements getAnnotationTypeElementModifierAccess() {
      return pAnnotationTypeElementModifier;
   }

   public ParserRule getAnnotationTypeElementModifierRule() {
      return getAnnotationTypeElementModifierAccess().getRule();
   }

   // JavaAnnotationTypeElementModifiers:
   // modifier=AnnotationTypeElementModifiers;
   public JavaAnnotationTypeElementModifiersElements getJavaAnnotationTypeElementModifiersAccess() {
      return pJavaAnnotationTypeElementModifiers;
   }

   public ParserRule getJavaAnnotationTypeElementModifiersRule() {
      return getJavaAnnotationTypeElementModifiersAccess().getRule();
   }

   // enum AnnotationTypeElementModifiers:
   // PUBLIC="public" | STATIC="abstract";
   public AnnotationTypeElementModifiersElements getAnnotationTypeElementModifiersAccess() {
      return unknownRuleAnnotationTypeElementModifiers;
   }

   public EnumRule getAnnotationTypeElementModifiersRule() {
      return getAnnotationTypeElementModifiersAccess().getRule();
   }

   // defaultValue:
   // "default" elementValue;
   public DefaultValueElements getDefaultValueAccess() {
      return pDefaultValue;
   }

   public ParserRule getDefaultValueRule() {
      return getDefaultValueAccess().getRule();
   }

   // annotation:
   // normalAnnotation | markerAnnotation | singleElementAnnotation;
   public AnnotationElements getAnnotationAccess() {
      return pAnnotation;
   }

   public ParserRule getAnnotationRule() {
      return getAnnotationAccess().getRule();
   }

   // normalAnnotation:
   // "@" typeName=typeName "(" elementValuePairList=elementValuePairList? ")";
   public NormalAnnotationElements getNormalAnnotationAccess() {
      return pNormalAnnotation;
   }

   public ParserRule getNormalAnnotationRule() {
      return getNormalAnnotationAccess().getRule();
   }

   // elementValuePairList:
   // elementValuePairs+=elementValuePair ("," elementValuePairs+=elementValuePair)*;
   public ElementValuePairListElements getElementValuePairListAccess() {
      return pElementValuePairList;
   }

   public ParserRule getElementValuePairListRule() {
      return getElementValuePairListAccess().getRule();
   }

   // elementValuePair:
   // name=Identifier "=" elementValue=elementValue;
   public ElementValuePairElements getElementValuePairAccess() {
      return pElementValuePair;
   }

   public ParserRule getElementValuePairRule() {
      return getElementValuePairAccess().getRule();
   }

   // elementValue:
   // conditionalExpression | elementValueArrayInitializer | annotation;
   public ElementValueElements getElementValueAccess() {
      return pElementValue;
   }

   public ParserRule getElementValueRule() {
      return getElementValueAccess().getRule();
   }

   // elementValueArrayInitializer:
   // {elementValueArrayInitializer} "{" elementValueList=elementValueList? ","? "}";
   public ElementValueArrayInitializerElements getElementValueArrayInitializerAccess() {
      return pElementValueArrayInitializer;
   }

   public ParserRule getElementValueArrayInitializerRule() {
      return getElementValueArrayInitializerAccess().getRule();
   }

   // elementValueList:
   // elementValues+=elementValue ("," elementValues+=elementValue)*;
   public ElementValueListElements getElementValueListAccess() {
      return pElementValueList;
   }

   public ParserRule getElementValueListRule() {
      return getElementValueListAccess().getRule();
   }

   // markerAnnotation:
   // "@" typeName=typeName;
   public MarkerAnnotationElements getMarkerAnnotationAccess() {
      return pMarkerAnnotation;
   }

   public ParserRule getMarkerAnnotationRule() {
      return getMarkerAnnotationAccess().getRule();
   }

   // singleElementAnnotation:
   // "@" typeName=typeName "(" elementValue=elementValue ")";
   public SingleElementAnnotationElements getSingleElementAnnotationAccess() {
      return pSingleElementAnnotation;
   }

   public ParserRule getSingleElementAnnotationRule() {
      return getSingleElementAnnotationAccess().getRule();
   }

   // / *
   // * Productions from §10 (Arrays)
   // * / arrayInitializer:
   // {arrayInitializer} "{" variableInitializerList=variableInitializerList? ","? "}";
   public ArrayInitializerElements getArrayInitializerAccess() {
      return pArrayInitializer;
   }

   public ParserRule getArrayInitializerRule() {
      return getArrayInitializerAccess().getRule();
   }

   // variableInitializerList:
   // variableInitializer+=variableInitializer ("," variableInitializer+=variableInitializer)*;
   public VariableInitializerListElements getVariableInitializerListAccess() {
      return pVariableInitializerList;
   }

   public ParserRule getVariableInitializerListRule() {
      return getVariableInitializerListAccess().getRule();
   }

   // block:
   // dummy="block";
   public BlockElements getBlockAccess() {
      return pBlock;
   }

   public ParserRule getBlockRule() {
      return getBlockAccess().getRule();
   }

   // blockStatements:
   // dummy="blockStatements";
   public BlockStatementsElements getBlockStatementsAccess() {
      return pBlockStatements;
   }

   public ParserRule getBlockStatementsRule() {
      return getBlockStatementsAccess().getRule();
   }

   // argumentList:
   // dummy="argumentList";
   public ArgumentListElements getArgumentListAccess() {
      return pArgumentList;
   }

   public ParserRule getArgumentListRule() {
      return getArgumentListAccess().getRule();
   }

   // primary:
   // dummy="primary";
   public PrimaryElements getPrimaryAccess() {
      return pPrimary;
   }

   public ParserRule getPrimaryRule() {
      return getPrimaryAccess().getRule();
   }

   // expression:
   // dummy="expression";
   public ExpressionElements getExpressionAccess() {
      return pExpression;
   }

   public ParserRule getExpressionRule() {
      return getExpressionAccess().getRule();
   }

   // conditionalExpression:
   // dummy="conditionalExpression";
   public ConditionalExpressionElements getConditionalExpressionAccess() {
      return pConditionalExpression;
   }

   public ParserRule getConditionalExpressionRule() {
      return getConditionalExpressionAccess().getRule();
   }

   // Foo:
   // "@" literal "public" Identifier;
   public LiteralsGrammarAccess.FooElements getFooAccess() {
      return gaLiterals.getFooAccess();
   }

   public ParserRule getFooRule() {
      return getFooAccess().getRule();
   }

   // / *
   // * Productions from §3 (Lexical Structure)
   // * / literal:
   // IntegerLiteral | FloatingPointLiteral | BooleanLiteral | CharacterLiteral | StringLiteral | NullLiteral;
   public LiteralsGrammarAccess.LiteralElements getLiteralAccess() {
      return gaLiterals.getLiteralAccess();
   }

   public ParserRule getLiteralRule() {
      return getLiteralAccess().getRule();
   }

   // / *
   // * 3.10.1. Integer Literals
   // * / IntegerLiteral:
   // value=(DecimalIntegerLiteral | HexIntegerLiteral | OctalIntegerLiteral | BinaryIntegerLiteral);
   public LiteralsGrammarAccess.IntegerLiteralElements getIntegerLiteralAccess() {
      return gaLiterals.getIntegerLiteralAccess();
   }

   public ParserRule getIntegerLiteralRule() {
      return getIntegerLiteralAccess().getRule();
   }

   // terminal DecimalIntegerLiteral:
   // DecimalNumeral IntegerTypeSuffix?;
   public TerminalRule getDecimalIntegerLiteralRule() {
      return gaLiterals.getDecimalIntegerLiteralRule();
   }

   // terminal HexIntegerLiteral:
   // HexNumeral IntegerTypeSuffix?;
   public TerminalRule getHexIntegerLiteralRule() {
      return gaLiterals.getHexIntegerLiteralRule();
   }

   // terminal OctalIntegerLiteral:
   // OctalNumeral IntegerTypeSuffix?;
   public TerminalRule getOctalIntegerLiteralRule() {
      return gaLiterals.getOctalIntegerLiteralRule();
   }

   // terminal BinaryIntegerLiteral:
   // BinaryNumeral IntegerTypeSuffix?;
   public TerminalRule getBinaryIntegerLiteralRule() {
      return gaLiterals.getBinaryIntegerLiteralRule();
   }

   // terminal fragment IntegerTypeSuffix:
   // "l" | "L";
   public TerminalRule getIntegerTypeSuffixRule() {
      return gaLiterals.getIntegerTypeSuffixRule();
   }

   // // Decimal
   // terminal fragment DecimalNumeral:
   // "0" | NonZeroDigit Digits? | NonZeroDigit Underscores Digits;
   public TerminalRule getDecimalNumeralRule() {
      return gaLiterals.getDecimalNumeralRule();
   }

   // terminal fragment NonZeroDigit:
   // "1".."9";
   public TerminalRule getNonZeroDigitRule() {
      return gaLiterals.getNonZeroDigitRule();
   }

   // terminal fragment Digits:
   // Digit | Digit DigitsAndUnderscores? Digit;
   public TerminalRule getDigitsRule() {
      return gaLiterals.getDigitsRule();
   }

   // terminal fragment Digit:
   // "0" | NonZeroDigit;
   public TerminalRule getDigitRule() {
      return gaLiterals.getDigitRule();
   }

   // terminal fragment DigitsAndUnderscores:
   // DigitOrUnderscore DigitOrUnderscore*;
   public TerminalRule getDigitsAndUnderscoresRule() {
      return gaLiterals.getDigitsAndUnderscoresRule();
   }

   // terminal fragment DigitOrUnderscore:
   // Digit | "_";
   public TerminalRule getDigitOrUnderscoreRule() {
      return gaLiterals.getDigitOrUnderscoreRule();
   }

   // terminal fragment Underscores:
   // "_"+;
   public TerminalRule getUnderscoresRule() {
      return gaLiterals.getUnderscoresRule();
   }

   // //Hexadecimal
   // terminal fragment HexNumeral:
   // "0" ("x" | "X") HexDigits;
   public TerminalRule getHexNumeralRule() {
      return gaLiterals.getHexNumeralRule();
   }

   // terminal fragment HexDigits:
   // HexDigit | HexDigit HexDigitsAndUnderscores? HexDigit;
   public TerminalRule getHexDigitsRule() {
      return gaLiterals.getHexDigitsRule();
   }

   // terminal fragment HexDigit:
   // "0".."9" | "a".."f" | "A".."F";
   public TerminalRule getHexDigitRule() {
      return gaLiterals.getHexDigitRule();
   }

   // terminal fragment HexDigitsAndUnderscores:
   // HexDigitOrUnderscore HexDigitOrUnderscore*;
   public TerminalRule getHexDigitsAndUnderscoresRule() {
      return gaLiterals.getHexDigitsAndUnderscoresRule();
   }

   // terminal fragment HexDigitOrUnderscore:
   // HexDigit | "_";
   public TerminalRule getHexDigitOrUnderscoreRule() {
      return gaLiterals.getHexDigitOrUnderscoreRule();
   }

   // //Octal
   // terminal fragment OctalNumeral:
   // "0" OctalDigits | "0" Underscores OctalDigits;
   public TerminalRule getOctalNumeralRule() {
      return gaLiterals.getOctalNumeralRule();
   }

   // terminal fragment OctalDigits:
   // OctalDigit | OctalDigit OctalDigitsAndUnderscores? OctalDigit;
   public TerminalRule getOctalDigitsRule() {
      return gaLiterals.getOctalDigitsRule();
   }

   // terminal fragment OctalDigit:
   // "0".."7";
   public TerminalRule getOctalDigitRule() {
      return gaLiterals.getOctalDigitRule();
   }

   // terminal fragment OctalDigitsAndUnderscores:
   // OctalDigitOrUnderscore OctalDigitOrUnderscore*;
   public TerminalRule getOctalDigitsAndUnderscoresRule() {
      return gaLiterals.getOctalDigitsAndUnderscoresRule();
   }

   // terminal fragment OctalDigitOrUnderscore:
   // OctalDigit | "_";
   public TerminalRule getOctalDigitOrUnderscoreRule() {
      return gaLiterals.getOctalDigitOrUnderscoreRule();
   }

   // // Binary
   // terminal fragment BinaryNumeral:
   // "0" ("b" | "B") BinaryDigits;
   public TerminalRule getBinaryNumeralRule() {
      return gaLiterals.getBinaryNumeralRule();
   }

   // terminal fragment BinaryDigits:
   // BinaryDigit | BinaryDigit BinaryDigitsAndUnderscores? BinaryDigit;
   public TerminalRule getBinaryDigitsRule() {
      return gaLiterals.getBinaryDigitsRule();
   }

   // terminal fragment BinaryDigit:
   // "0" | "1";
   public TerminalRule getBinaryDigitRule() {
      return gaLiterals.getBinaryDigitRule();
   }

   // terminal fragment BinaryDigitsAndUnderscores:
   // BinaryDigitOrUnderscore BinaryDigitOrUnderscore*;
   public TerminalRule getBinaryDigitsAndUnderscoresRule() {
      return gaLiterals.getBinaryDigitsAndUnderscoresRule();
   }

   // terminal fragment BinaryDigitOrUnderscore:
   // BinaryDigit | "_";
   public TerminalRule getBinaryDigitOrUnderscoreRule() {
      return gaLiterals.getBinaryDigitOrUnderscoreRule();
   }

   // / *
   // * 3.10.2. Floating-Point Literals
   // * / FloatingPointLiteral:
   // value=(DecimalFloatingPointLiteral | HexadecimalFloatingPointLiteral);
   public LiteralsGrammarAccess.FloatingPointLiteralElements getFloatingPointLiteralAccess() {
      return gaLiterals.getFloatingPointLiteralAccess();
   }

   public ParserRule getFloatingPointLiteralRule() {
      return getFloatingPointLiteralAccess().getRule();
   }

   // terminal DecimalFloatingPointLiteral:
   // Digits "." Digits? ExponentPart? FloatTypeSuffix? | "." Digits ExponentPart? FloatTypeSuffix? | Digits
   // ExponentPart
   // FloatTypeSuffix? | Digits FloatTypeSuffix;
   public TerminalRule getDecimalFloatingPointLiteralRule() {
      return gaLiterals.getDecimalFloatingPointLiteralRule();
   }

   // terminal fragment ExponentPart:
   // ExponentIndicator SignedInteger;
   public TerminalRule getExponentPartRule() {
      return gaLiterals.getExponentPartRule();
   }

   // terminal fragment ExponentIndicator:
   // "e" | "E";
   public TerminalRule getExponentIndicatorRule() {
      return gaLiterals.getExponentIndicatorRule();
   }

   // terminal fragment SignedInteger:
   // SIGN? Digits;
   public TerminalRule getSignedIntegerRule() {
      return gaLiterals.getSignedIntegerRule();
   }

   // terminal fragment SIGN:
   // "+" | "-";
   public TerminalRule getSIGNRule() {
      return gaLiterals.getSIGNRule();
   }

   // terminal fragment FloatTypeSuffix:
   // "f" | "F" | "d" | "D";
   public TerminalRule getFloatTypeSuffixRule() {
      return gaLiterals.getFloatTypeSuffixRule();
   }

   // terminal HexadecimalFloatingPointLiteral:
   // HexSignificand BinaryExponent FloatTypeSuffix?;
   public TerminalRule getHexadecimalFloatingPointLiteralRule() {
      return gaLiterals.getHexadecimalFloatingPointLiteralRule();
   }

   // terminal fragment HexSignificand:
   // HexNumeral "."? | "0" ("x" | "X") HexDigit* "." HexDigit+;
   public TerminalRule getHexSignificandRule() {
      return gaLiterals.getHexSignificandRule();
   }

   // terminal fragment BinaryExponent:
   // BinaryExponentIndicator SignedInteger;
   public TerminalRule getBinaryExponentRule() {
      return gaLiterals.getBinaryExponentRule();
   }

   // terminal fragment BinaryExponentIndicator:
   // "p" | "P";
   public TerminalRule getBinaryExponentIndicatorRule() {
      return gaLiterals.getBinaryExponentIndicatorRule();
   }

   // / *
   // * 3.10.3. Boolean Literals
   // * / BooleanLiteral:
   // value=(TRUE | FALSE);
   public LiteralsGrammarAccess.BooleanLiteralElements getBooleanLiteralAccess() {
      return gaLiterals.getBooleanLiteralAccess();
   }

   public ParserRule getBooleanLiteralRule() {
      return getBooleanLiteralAccess().getRule();
   }

   // terminal TRUE:
   // "true";
   public TerminalRule getTRUERule() {
      return gaLiterals.getTRUERule();
   }

   // terminal FALSE:
   // "false";
   public TerminalRule getFALSERule() {
      return gaLiterals.getFALSERule();
   }

   // / *
   // * 3.10.4. Character Literals
   // * / CharacterLiteral:
   // value=CHARACTER;
   public LiteralsGrammarAccess.CharacterLiteralElements getCharacterLiteralAccess() {
      return gaLiterals.getCharacterLiteralAccess();
   }

   public ParserRule getCharacterLiteralRule() {
      return getCharacterLiteralAccess().getRule();
   }

   // terminal CHARACTER:
   // "\'" (EscapeSequence | !("\'" | "\\")) "\'";
   public TerminalRule getCHARACTERRule() {
      return gaLiterals.getCHARACTERRule();
   }

   // StringLiteral:
   // value=STRING;
   public LiteralsGrammarAccess.StringLiteralElements getStringLiteralAccess() {
      return gaLiterals.getStringLiteralAccess();
   }

   public ParserRule getStringLiteralRule() {
      return getStringLiteralAccess().getRule();
   }

   // terminal STRING:
   // "\"" (EscapeSequence | !("\\" | "\""))* "\"";
   public TerminalRule getSTRINGRule() {
      return gaLiterals.getSTRINGRule();
   }

   // terminal fragment EscapeSequence:
   // "\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | UnicodeEscape | OctalEscape;
   public TerminalRule getEscapeSequenceRule() {
      return gaLiterals.getEscapeSequenceRule();
   }

   // terminal fragment OctalEscape:
   // "\\" ZeroToThree OctalDigit OctalDigit | "\\" OctalDigit OctalDigit | "\\" OctalDigit;
   public TerminalRule getOctalEscapeRule() {
      return gaLiterals.getOctalEscapeRule();
   }

   // terminal fragment ZeroToThree:
   // "0".."3";
   public TerminalRule getZeroToThreeRule() {
      return gaLiterals.getZeroToThreeRule();
   }

   // terminal fragment UnicodeEscape:
   // "\\" UnicodeMarker HexDigit HexDigit HexDigit HexDigit;
   public TerminalRule getUnicodeEscapeRule() {
      return gaLiterals.getUnicodeEscapeRule();
   }

   // terminal fragment UnicodeMarker:
   // "u" "u"*;
   public TerminalRule getUnicodeMarkerRule() {
      return gaLiterals.getUnicodeMarkerRule();
   }

   // / *
   // * 3.10.7. The Null Literal
   // * / NullLiteral:
   // value=NULL;
   public LiteralsGrammarAccess.NullLiteralElements getNullLiteralAccess() {
      return gaLiterals.getNullLiteralAccess();
   }

   public ParserRule getNullLiteralRule() {
      return getNullLiteralAccess().getRule();
   }

   // terminal NULL:
   // "null";
   public TerminalRule getNULLRule() {
      return gaLiterals.getNULLRule();
   }

   // / *
   // * Identifier
   // * / terminal Identifier:
   // JavaLetter JavaLetterOrDigit*;
   public TerminalRule getIdentifierRule() {
      return gaLiterals.getIdentifierRule();
   }

   // terminal fragment JavaLetter:
   // "$" | "A".."Z" | "_" | "a".."z" | "¢".."¥" | "ª" | "µ" | "º" | "À".."Ö" | "Ø".."ö" | "ø".."ȶ" | "ɐ".."ˁ" |
   // "ˆ".."ˑ" |
   // "ˠ".."ˤ" | "ˮ" | "ͺ" | "Ά" | "Έ".."Ί" | "Ό" | "Ύ".."Ρ" | "Σ".."ώ" | "ϐ".."ϵ" | "Ϸ".."ϻ" | "Ѐ".."ҁ" | "Ҋ".."ӎ" |
   // "Ӑ".."ӵ" | "Ӹ".."ӹ" | "Ԁ".."ԏ" | "Ա".."Ֆ" | "ՙ" | "ա".."և" | "א".."ת" | "װ".."ײ" | "ء".."غ" | "ـ".."ي" | "ٮ".."ٯ"
   // |
   // "ٱ".."ۓ" | "ە" | "ۥ".."ۦ" | "ۮ".."ۯ" | "ۺ".."ۼ" | "ۿ" | "ܐ" | "ܒ".."ܯ" | "ݍ".."ݏ" | "ހ".."ޥ" | "ޱ" | "ऄ".."ह" |
   // "ऽ" |
   // "ॐ" | "क़".."ॡ" | "অ".."ঌ" | "এ".."ঐ" | "ও".."ন" | "প".."র" | "ল" | "শ".."হ" | "ঽ" | "ড়".."ঢ়" | "য়".."ৡ" | "ৰ".."৳"
   // |
   // "ਅ".."ਊ" | "ਏ".."ਐ" | "ਓ".."ਨ" | "ਪ".."ਰ" | "ਲ".."ਲ਼" | "ਵ".."ਸ਼" | "ਸ".."ਹ" | "ਖ਼".."ੜ" | "ਫ਼" | "ੲ".."ੴ" | "અ".."ઍ"
   // |
   // "એ".."ઑ" | "ઓ".."ન" | "પ".."ર" | "લ".."ળ" | "વ".."હ" | "ઽ" | "ૐ" | "ૠ".."ૡ" | "૱" | "ଅ".."ଌ" | "ଏ".."ଐ" | "ଓ".."ନ"
   // |
   // "ପ".."ର" | "ଲ".."ଳ" | "ଵ".."ହ" | "ଽ" | "ଡ଼".."ଢ଼" | "ୟ".."ୡ" | "ୱ" | "ஃ" | "அ".."ஊ" | "எ".."ஐ" | "ஒ".."க" | "ங".."ச"
   // |
   // "ஜ" | "ஞ".."ட" | "ண".."த" | "ந".."ப" | "ம".."வ" | "ஷ".."ஹ" | "௹" | "అ".."ఌ" | "ఎ".."ఐ" | "ఒ".."న" | "ప".."ళ" |
   // "వ".."హ" | "ౠ".."ౡ" | "ಅ".."ಌ" | "ಎ".."ಐ" | "ಒ".."ನ" | "ಪ".."ಳ" | "ವ".."ಹ" | "ಽ" | "ೞ" | "ೠ".."ೡ" | "അ".."ഌ" |
   // "എ".."ഐ" | "ഒ".."ന" | "പ".."ഹ" | "ൠ".."ൡ" | "අ".."ඖ" | "ක".."න" | "ඳ".."ර" | "ල" | "ව".."ෆ" | "ก".."ะ" | "า".."ำ"
   // |
   // "฿".."ๆ" | "ກ".."ຂ" | "ຄ" | "ງ".."ຈ" | "ຊ" | "ຍ" | "ດ".."ທ" | "ນ".."ຟ" | "ມ".."ຣ" | "ລ" | "ວ" | "ສ".."ຫ" |
   // "ອ".."ະ" |
   // "າ".."ຳ" | "ຽ" | "ເ".."ໄ" | "ໆ" | "ໜ".."ໝ" | "ༀ" | "ཀ".."ཇ" | "ཉ".."ཪ" | "ྈ".."ྋ" | "က".."အ" | "ဣ".."ဧ" | "ဩ".."ဪ"
   // |
   // "ၐ".."ၕ" | "Ⴀ".."Ⴥ" | "ა".."ჸ" | "ᄀ".."ᅙ" | "ᅟ".."ᆢ" | "ᆨ".."ᇹ" | "ሀ".."ሆ" | "ለ".."ቆ" | "ቈ" | "ቊ".."ቍ" | "ቐ".."ቖ"
   // |
   // "ቘ" | "ቚ".."ቝ" | "በ".."ኆ" | "ኈ" | "ኊ".."ኍ" | "ነ".."ኮ" | "ኰ" | "ኲ".."ኵ" | "ኸ".."ኾ" | "ዀ" | "ዂ".."ዅ" | "ወ".."ዎ" |
   // "ዐ".."ዖ" | "ዘ".."ዮ" | "ደ".."ጎ" | "ጐ" | "ጒ".."ጕ" | "ጘ".."ጞ" | "ጠ".."ፆ" | "ፈ".."ፚ" | "Ꭰ".."Ᏼ" | "ᐁ".."ᙬ" | "ᙯ".."ᙶ"
   // |
   // "ᚁ".."ᚚ" | "ᚠ".."ᛪ" | "ᛮ".."ᛰ" | "ᜀ".."ᜌ" | "ᜎ".."ᜑ" | "ᜠ".."ᜱ" | "ᝀ".."ᝑ" | "ᝠ".."ᝬ" | "ᝮ".."ᝰ" | "ក".."ឳ" | "ៗ"
   // |
   // "៛".."ៜ" | "ᠠ".."ᡷ" | "ᢀ".."ᢨ" | "ᤀ".."ᤜ" | "ᥐ".."ᥭ" | "ᥰ".."ᥴ" | "ᴀ".."ᵫ" | "Ḁ".."ẛ" | "Ạ".."ỹ" | "ἀ".."ἕ" |
   // "Ἐ".."Ἕ" | "ἠ".."ὅ" | "Ὀ".."Ὅ" | "ὐ".."ὗ" | "Ὑ" | "Ὓ" | "Ὕ" | "Ὗ".."ώ" | "ᾀ".."ᾴ" | "ᾶ".."ᾼ" | "ι" | "ῂ".."ῄ" |
   // "ῆ".."ῌ" | "ῐ".."ΐ" | "ῖ".."Ί" | "ῠ".."Ῥ" | "ῲ".."ῴ" | "ῶ".."ῼ" | "‿".."⁀" | "⁔" | "ⁱ" | "ⁿ" | "₠".."₱" | "ℂ" |
   // "ℇ" |
   // "ℊ".."ℓ" | "ℕ" | "ℙ".."ℝ" | "ℤ" | "Ω" | "ℨ" | "K".."ℭ" | "ℯ".."ℱ" | "ℳ".."ℹ" | "ℽ".."ℿ" | "ⅅ".."ⅉ" | "Ⅰ".."Ↄ" |
   // "々".."〇" | "〡".."〩" | "〱".."〵" | "〸".."〼" | "ぁ".."ゖ" | "ゝ".."ゟ" | "ァ".."ヿ" | "ㄅ".."ㄬ" | "ㄱ".."ㆎ" | "ㆠ".."ㆷ" |
   // "ㇰ".."ㇿ" | "㐀".."䶵" | "一".."龥" | "ꀀ".."ꒌ" | "가".."힣" | "豈".."鶴" | "侮".."頻" | "ﬀ".."ﬆ" | "ﬓ".."ﬗ" | "יִ" | "ײַ".."ﬨ"
   // |
   // "שׁ".."זּ" | "טּ".."לּ" | "מּ" | "נּ".."סּ" | "ףּ".."פּ" | "צּ".."ﮱ" | "ﯓ".."ﴽ" | "ﵐ".."ﶏ" | "ﶒ".."ﷇ" | "ﷰ".."﷼" | "︳".."︴"
   // |
   // "﹍".."﹏" | "﹩" | "ﹰ".."ﹴ" | "ﹶ".."ﻼ" | "＄" | "Ａ".."Ｚ" | "＿" | "ａ".."ｚ" | "･".."ﾾ" | "ￂ".."ￇ" | "ￊ".."ￏ" | "ￒ".."ￗ"
   // |
   // "ￚ".."ￜ" | "￠".."￡" | "￥".."￦" | "?".."?" "?".."?";
   public TerminalRule getJavaLetterRule() {
      return gaLiterals.getJavaLetterRule();
   }

   // terminal fragment JavaLetterOrDigit:
   // " ".."\b" | "".."" | "$" | "0".."9" | "A".."Z" | "_" | "a".."z" | "".."" | "¢".."¥" | "ª" | "­" | "µ" | "º" |
   // "À".."Ö" | "Ø".."ö" | "ø".."ȶ" | "ɐ".."ˁ" | "ˆ".."ˑ" | "ˠ".."ˤ" | "ˮ" | "̀".."͗" | "͝".."ͯ" | "ͺ" | "Ά" | "Έ".."Ί"
   // |
   // "Ό" | "Ύ".."Ρ" | "Σ".."ώ" | "ϐ".."ϵ" | "Ϸ".."ϻ" | "Ѐ".."ҁ" | "҃".."҆" | "Ҋ".."ӎ" | "Ӑ".."ӵ" | "Ӹ".."ӹ" | "Ԁ".."ԏ"
   // |
   // "Ա".."Ֆ" | "ՙ" | "ա".."և" | "֑".."֡" | "֣".."ֹ" | "ֻ".."ֽ" | "ֿ" | "ׁ".."ׂ" | "ׄ" | "א".."ת" | "װ".."ײ" | "؀".."؃"
   // |
   // "ؐ".."ؕ" | "ء".."غ" | "ـ".."٘" | "٠".."٩" | "ٮ".."ۓ" | "ە".."۝" | "۟".."ۨ" | "۪".."ۼ" | "ۿ" | "܏".."݊" | "ݍ".."ݏ"
   // |
   // "ހ".."ޱ" | "ँ".."ह" | "़".."्" | "ॐ".."॔" | "क़".."ॣ" | "०".."९" | "ঁ".."ঃ" | "অ".."ঌ" | "এ".."ঐ" | "ও".."ন" |
   // "প".."র" | "ল" | "শ".."হ" | "়".."ৄ" | "ে".."ৈ" | "ো".."্" | "ৗ" | "ড়".."ঢ়" | "য়".."ৣ" | "০".."৳" | "ਁ".."ਃ" |
   // "ਅ".."ਊ" | "ਏ".."ਐ" | "ਓ".."ਨ" | "ਪ".."ਰ" | "ਲ".."ਲ਼" | "ਵ".."ਸ਼" | "ਸ".."ਹ" | "਼" | "ਾ".."ੂ" | "ੇ".."ੈ" | "ੋ".."੍"
   // |
   // "ਖ਼".."ੜ" | "ਫ਼" | "੦".."ੴ" | "ઁ".."ઃ" | "અ".."ઍ" | "એ".."ઑ" | "ઓ".."ન" | "પ".."ર" | "લ".."ળ" | "વ".."હ" | "઼".."ૅ"
   // |
   // "ે".."ૉ" | "ો".."્" | "ૐ" | "ૠ".."ૣ" | "૦".."૯" | "૱" | "ଁ".."ଃ" | "ଅ".."ଌ" | "ଏ".."ଐ" | "ଓ".."ନ" | "ପ".."ର" |
   // "ଲ".."ଳ" | "ଵ".."ହ" | "଼".."ୃ" | "େ".."ୈ" | "ୋ".."୍" | "ୖ".."ୗ" | "ଡ଼".."ଢ଼" | "ୟ".."ୡ" | "୦".."୯" | "ୱ" | "ஂ".."ஃ"
   // |
   // "அ".."ஊ" | "எ".."ஐ" | "ஒ".."க" | "ங".."ச" | "ஜ" | "ஞ".."ட" | "ண".."த" | "ந".."ப" | "ம".."வ" | "ஷ".."ஹ" | "ா".."ூ"
   // |
   // "ெ".."ை" | "ொ".."்" | "ௗ" | "௧".."௯" | "௹" | "ఁ".."ః" | "అ".."ఌ" | "ఎ".."ఐ" | "ఒ".."న" | "ప".."ళ" | "వ".."హ" |
   // "ా".."ౄ" | "ె".."ై" | "ొ".."్" | "ౕ".."ౖ" | "ౠ".."ౡ" | "౦".."౯" | "ಂ".."ಃ" | "ಅ".."ಌ" | "ಎ".."ಐ" | "ಒ".."ನ" |
   // "ಪ".."ಳ" | "ವ".."ಹ" | "಼".."ೄ" | "ೆ".."ೈ" | "ೊ".."್" | "ೕ".."ೖ" | "ೞ" | "ೠ".."ೡ" | "೦".."೯" | "ം".."ഃ" | "അ".."ഌ"
   // |
   // "എ".."ഐ" | "ഒ".."ന" | "പ".."ഹ" | "ാ".."ൃ" | "െ".."ൈ" | "ൊ".."്" | "ൗ" | "ൠ".."ൡ" | "൦".."൯" | "ං".."ඃ" | "අ".."ඖ"
   // |
   // "ක".."න" | "ඳ".."ර" | "ල" | "ව".."ෆ" | "්" | "ා".."ු" | "ූ" | "ෘ".."ෟ" | "ෲ".."ෳ" | "ก".."ฺ" | "฿".."๎" | "๐".."๙"
   // |
   // "ກ".."ຂ" | "ຄ" | "ງ".."ຈ" | "ຊ" | "ຍ" | "ດ".."ທ" | "ນ".."ຟ" | "ມ".."ຣ" | "ລ" | "ວ" | "ສ".."ຫ" | "ອ".."ູ" |
   // "ົ".."ຽ" |
   // "ເ".."ໄ" | "ໆ" | "່".."ໍ" | "໐".."໙" | "ໜ".."ໝ" | "ༀ" | "༘".."༙" | "༠".."༩" | "༵" | "༷" | "༹" | "༾".."ཇ" |
   // "ཉ".."ཪ" |
   // "ཱ".."྄" | "྆".."ྋ" | "ྐ".."ྗ" | "ྙ".."ྼ" | "࿆" | "က".."အ" | "ဣ".."ဧ" | "ဩ".."ဪ" | "ာ".."ဲ" | "ံ".."္" | "၀".."၉"
   // |
   // "ၐ".."ၙ" | "Ⴀ".."Ⴥ" | "ა".."ჸ" | "ᄀ".."ᅙ" | "ᅟ".."ᆢ" | "ᆨ".."ᇹ" | "ሀ".."ሆ" | "ለ".."ቆ" | "ቈ" | "ቊ".."ቍ" | "ቐ".."ቖ"
   // |
   // "ቘ" | "ቚ".."ቝ" | "በ".."ኆ" | "ኈ" | "ኊ".."ኍ" | "ነ".."ኮ" | "ኰ" | "ኲ".."ኵ" | "ኸ".."ኾ" | "ዀ" | "ዂ".."ዅ" | "ወ".."ዎ" |
   // "ዐ".."ዖ" | "ዘ".."ዮ" | "ደ".."ጎ" | "ጐ" | "ጒ".."ጕ" | "ጘ".."ጞ" | "ጠ".."ፆ" | "ፈ".."ፚ" | "፩".."፱" | "Ꭰ".."Ᏼ" | "ᐁ".."ᙬ"
   // |
   // "ᙯ".."ᙶ" | "ᚁ".."ᚚ" | "ᚠ".."ᛪ" | "ᛮ".."ᛰ" | "ᜀ".."ᜌ" | "ᜎ".."᜔" | "ᜠ".."᜴" | "ᝀ".."ᝓ" | "ᝠ".."ᝬ" | "ᝮ".."ᝰ" |
   // "ᝲ".."ᝳ" | "ក".."៓" | "ៗ" | "៛".."៝" | "០".."៩" | "᠋".."᠍" | "᠐".."᠙" | "ᠠ".."ᡷ" | "ᢀ".."ᢩ" | "ᤀ".."ᤜ" | "ᤠ".."ᤫ"
   // |
   // "ᤰ".."᤻" | "᥆".."ᥭ" | "ᥰ".."ᥴ" | "ᴀ".."ᵫ" | "Ḁ".."ẛ" | "Ạ".."ỹ" | "ἀ".."ἕ" | "Ἐ".."Ἕ" | "ἠ".."ὅ" | "Ὀ".."Ὅ" |
   // "ὐ".."ὗ" | "Ὑ" | "Ὓ" | "Ὕ" | "Ὗ".."ώ" | "ᾀ".."ᾴ" | "ᾶ".."ᾼ" | "ι" | "ῂ".."ῄ" | "ῆ".."ῌ" | "ῐ".."ΐ" | "ῖ".."Ί" |
   // "ῠ".."Ῥ" | "ῲ".."ῴ" | "ῶ".."ῼ" | "‌".."‏" | "‪".."‮" | "‿".."⁀" | "⁔" | "⁠".."⁣" | "⁪".."⁯" | "ⁱ" | "ⁿ" | "₠".."₱"
   // |
   // "⃐".."⃜" | "⃡" | "⃥".."⃪" | "ℂ" | "ℇ" | "ℊ".."ℓ" | "ℕ" | "ℙ".."ℝ" | "ℤ" | "Ω" | "ℨ" | "K".."ℭ" | "ℯ".."ℱ" |
   // "ℳ".."ℹ"
   // | "ℽ".."ℿ" | "ⅅ".."ⅉ" | "Ⅰ".."Ↄ" | "々".."〇" | "〡".."〯" | "〱".."〵" | "〸".."〼" | "ぁ".."ゖ" | "゙".."゚" | "ゝ".."ゟ" |
   // "ァ".."ヿ" | "ㄅ".."ㄬ" | "ㄱ".."ㆎ" | "ㆠ".."ㆷ" | "ㇰ".."ㇿ" | "㐀".."䶵" | "一".."龥" | "ꀀ".."ꒌ" | "가".."힣" | "豈".."鶴" |
   // "侮".."頻" | "ﬀ".."ﬆ" | "ﬓ".."ﬗ" | "יִ".."ﬨ" | "שׁ".."זּ" | "טּ".."לּ" | "מּ" | "נּ".."סּ" | "ףּ".."פּ" | "צּ".."ﮱ" | "ﯓ".."ﴽ"
   // |
   // "ﵐ".."ﶏ" | "ﶒ".."ﷇ" | "ﷰ".."﷼" | "︀".."️" | "︠".."︣" | "︳".."︴" | "﹍".."﹏" | "﹩" | "ﹰ".."ﹴ" | "ﹶ".."ﻼ" | "﻿" | "＄"
   // |
   // "０".."９" | "Ａ".."Ｚ" | "＿" | "ａ".."ｚ" | "･".."ﾾ" | "ￂ".."ￇ" | "ￊ".."ￏ" | "ￒ".."ￗ" | "ￚ".."ￜ" | "￠".."￡" | "￥".."￦"
   // |
   // "￹".."￻" | "?".."?" "?".."?";
   public TerminalRule getJavaLetterOrDigitRule() {
      return gaLiterals.getJavaLetterOrDigitRule();
   }

   // terminal ML_COMMENT:
   // "/ *"->"* /";
   public TerminalRule getML_COMMENTRule() {
      return gaLiterals.getML_COMMENTRule();
   }

   // terminal SL_COMMENT:
   // "//" !("\n" | "\r")* ("\r"? "\n")?;
   public TerminalRule getSL_COMMENTRule() {
      return gaLiterals.getSL_COMMENTRule();
   }

   // terminal WS:
   // (" " | "\t" | "\r" | "\n")+;
   public TerminalRule getWSRule() {
      return gaLiterals.getWSRule();
   }
}
