/*
 * generated by Xtext
 */

package org.sourcepit.java.type.ui.contentassist;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;

/**
 * Represents a generated, default implementation of superclass
 * {@link org.sourcepit.java.literals.ui.contentassist.LiteralsProposalProvider}.
 * Methods are dynamically dispatched on the first parameter, i.e., you can override them
 * with a more concrete subtype.
 */
@SuppressWarnings("all")
public class AbstractTypeProposalProvider extends org.sourcepit.java.literals.ui.contentassist.LiteralsProposalProvider {

   public void completeModel_Type(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completePrimitiveType_Annotations(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completePrimitiveType_TypeName(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) ((Alternatives) assignment.getTerminal()).getElements().get(0)), context, acceptor);
      completeRuleCall(((RuleCall) ((Alternatives) assignment.getTerminal()).getElements().get(1)), context, acceptor);
   }

   public void completeClassOrInterfaceType_ClassOrInterfaceTypeSegments(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeClassOrInterfaceTypeSegment_Annotations(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeClassOrInterfaceTypeSegment_Name(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeClassOrInterfaceTypeSegment_TypeArguments(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeClassType_Annotations(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeClassType_Name(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeClassType_TypeArguments(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeClassType_ClassOrInterfaceType(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeClassType_lf_classOrInterfaceType_Annotations(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeClassType_lf_classOrInterfaceType_Name(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeClassType_lf_classOrInterfaceType_TypeArguments(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeClassType_lfno_classOrInterfaceType_Annotations(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeClassType_lfno_classOrInterfaceType_Name(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeClassType_lfno_classOrInterfaceType_TypeArguments(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeTypeVariable_Annotations(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeTypeVariable_Name(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeArrayType_Type(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) ((Alternatives) assignment.getTerminal()).getElements().get(0)), context, acceptor);
      completeRuleCall(((RuleCall) ((Alternatives) assignment.getTerminal()).getElements().get(1)), context, acceptor);
      completeRuleCall(((RuleCall) ((Alternatives) assignment.getTerminal()).getElements().get(2)), context, acceptor);
   }

   public void completeArrayType_Dims(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeDims_Dims(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeDim_Annotations(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeTypeParameter_TypeParameterModifiers(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeTypeParameter_Name(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeTypeParameter_TypeBound(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeTypeBound_TypeVariable(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeTypeBound_ClassOrInterfaceType(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeTypeBound_AdditionalBound(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeTypeArgumentList_TypeArguments(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeWildcard_Annotations(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeWildcard_WildcardBounds(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeCompilationUnit_Package(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeCompilationUnit_Imports(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeCompilationUnit_Types(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completePackageDeclaration_Modifiers(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completePackageDeclaration_Name(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeSingleTypeImportDeclaration_Name(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeTypeImportOnDemandDeclaration_Name(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeSingleStaticImportDeclaration_Name(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeStaticImportOnDemandDeclaration_Name(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeNormalClassDeclaration_Modifiers(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeNormalClassDeclaration_Name(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeNormalClassDeclaration_TypeParameters(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeNormalClassDeclaration_Superclass(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeNormalClassDeclaration_Superinterfaces(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeNormalClassDeclaration_ClassBody(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeJavaClassModifier_Modifier(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeTypeParameterList_TypeParameters(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeInterfaceTypeList_InterfaceTypes(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeClassBody_Declarations(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeFieldDeclaration_FieldModifiers(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeFieldDeclaration_UnannType(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeFieldDeclaration_VariableDeclaratorList(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeJavaFieldModifier_Modifier(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeVariableDeclaratorList_VariableDeclarators(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeVariableDeclarator_Id(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeVariableDeclarator_Initializer(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeVariableDeclaratorId_Id(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeVariableDeclaratorId_Dims(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeUnannPrimitiveType_Name(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) ((Alternatives) assignment.getTerminal()).getElements().get(0)), context, acceptor);
      completeRuleCall(((RuleCall) ((Alternatives) assignment.getTerminal()).getElements().get(1)), context, acceptor);
   }

   public void completeUnannClassType_ClassTypeSegment(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeClassTypeSegment_Name(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeClassTypeSegment_TypeArguments(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeClassTypeSegmentWithAnnotations_Annotations(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeClassTypeSegmentWithAnnotations_Name(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeClassTypeSegmentWithAnnotations_TypeArguments(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeUnannTypeVariable_Name(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeUnannArrayType_Dims(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeMethodDeclaration_MethodModifiers(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeMethodDeclaration_MethodHeader(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeMethodDeclaration_MethodBody(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeJavaMethodModifier_Modifier(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeMethodHeader_Result(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeMethodHeader_MethodDeclarator(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeMethodHeader_Throws_(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeMethodHeader_TypeParameters(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeMethodHeader_Annotations(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeVoidType_Name(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void completeMethodDeclarator_Name(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeMethodDeclarator_Parameters(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeMethodDeclarator_Dims_(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeFormalParameterList_Parameters(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeFormalParameters_Parameters(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeFormalParameter_Modifiers(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeFormalParameter_Type(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeFormalParameter_Name(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeJavaVariableModifier_Modifier(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeLastFormalParameter_Modifiers(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeLastFormalParameter_Type(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeLastFormalParameter_Annotations(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeLastFormalParameter_Varargs(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void completeLastFormalParameter_Name(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeReceiverParameter_Annotations(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeReceiverParameter_Type(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeReceiverParameter_Qualifier(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeReceiverParameter_Name(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void completeExceptionTypeList_ExceptionTypes(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeConstructorDeclaration_ConstructorModifiers(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeConstructorDeclaration_ConstructorDeclarator(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeConstructorDeclaration_Throws_(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeJavaConstructorModifier_Modifier(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeConstructorDeclarator_TypeParameters(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeConstructorDeclarator_SimpleTypeName(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeConstructorDeclarator_FormalParameterList(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeEnumDeclaration_Modifiers(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeEnumDeclaration_Name(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeEnumDeclaration_Superinterfaces(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeEnumDeclaration_EnumBody(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeEnumBody_EnumConstantList(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeEnumBody_EnumBodyDeclarations(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeEnumConstantList_EnumConstants(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeEnumConstant_EnumConstantModifiers(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeEnumConstant_Name(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeEnumConstant_ArgumentList(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeEnumConstant_ClassBody(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeEnumBodyDeclarations_ClassBodyDeclarations(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeNormalInterfaceDeclaration_InterfaceModifiers(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeNormalInterfaceDeclaration_Name(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeNormalInterfaceDeclaration_TypeParameters(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeNormalInterfaceDeclaration_ExtendsInterfaces(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeNormalInterfaceDeclaration_InterfaceBody(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeJavaInterfaceModifier_Modifier(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeInterfaceBody_InterfaceMemberDeclarations(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeConstantDeclaration_ConstantModifiers(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeConstantDeclaration_UnannType(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeConstantDeclaration_VariableDeclaratorList(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeJavaConstantModifier_Modifier(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeInterfaceMethodDeclaration_InterfaceMethodModifiers(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeInterfaceMethodDeclaration_MethodHeader(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeInterfaceMethodDeclaration_MethodBody(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeJavaInterfaceMethodModifiers_Modifiers(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeAnnotationTypeDeclaration_InterfaceModifiers(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeAnnotationTypeDeclaration_Name(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeAnnotationTypeDeclaration_AnnotationTypeBody(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeAnnotationTypeBody_AnnotationTypeMemberDeclarations(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeAnnotationTypeElementDeclaration_AnnotationTypeElementModifiers(EObject model,
      Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeAnnotationTypeElementDeclaration_UnannType(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeAnnotationTypeElementDeclaration_Name(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeAnnotationTypeElementDeclaration_Dims(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeAnnotationTypeElementDeclaration_DefaultValue(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeJavaAnnotationTypeElementModifiers_Modifier(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeNormalAnnotation_TypeName(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeNormalAnnotation_ElementValuePairList(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeElementValuePairList_ElementValuePairs(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeElementValuePair_Name(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeElementValuePair_ElementValue(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeElementValueArrayInitializer_ElementValueList(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeElementValueList_ElementValues(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeMarkerAnnotation_TypeName(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeSingleElementAnnotation_TypeName(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeSingleElementAnnotation_ElementValue(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeArrayInitializer_VariableInitializerList(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeVariableInitializerList_VariableInitializer(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      completeRuleCall(((RuleCall) assignment.getTerminal()), context, acceptor);
   }

   public void completeBlock_Dummy(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void completeBlockStatements_Dummy(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void completeArgumentList_Dummy(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void completePrimary_Dummy(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void completeExpression_Dummy(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void completeConditionalExpression_Dummy(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_Model(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_type(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_primitiveType(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_booleanType(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_numericType(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_integralType(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_floatingPointType(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_referenceType(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_classOrInterfaceType(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_classOrInterfaceTypeSegment(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_classType(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_classType_lf_classOrInterfaceType(EObject model, RuleCall ruleCall,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_classType_lfno_classOrInterfaceType(EObject model, RuleCall ruleCall,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_interfaceType(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_interfaceType_lf_classOrInterfaceType(EObject model, RuleCall ruleCall,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_interfaceType_lfno_classOrInterfaceType(EObject model, RuleCall ruleCall,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_typeVariable(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_arrayType(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_dims(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_dim(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_typeParameter(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_typeParameterModifier(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_typeBound(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_additionalBound(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_typeArguments(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_typeArgumentList(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_typeArgument(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_wildcard(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_wildcardBounds(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_packageName(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_typeName(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_packageOrTypeName(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_expressionName(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_methodName(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_ambiguousName(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_qualifiedName(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_compilationUnit(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_packageDeclaration(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_packageModifier(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_importDeclaration(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_singleTypeImportDeclaration(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_typeImportOnDemandDeclaration(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_singleStaticImportDeclaration(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_staticImportOnDemandDeclaration(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_typeDeclaration(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_classDeclaration(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_normalClassDeclaration(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_classModifier(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_JavaClassModifier(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_ClassModifiers(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_typeParameters(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_typeParameterList(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_superclass(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_superinterfaces(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_interfaceTypeList(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_classBody(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_classBodyDeclaration(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_classMemberDeclaration(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_fieldDeclaration(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_fieldModifier(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_JavaFieldModifier(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_FieldModifiers(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_variableDeclaratorList(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_variableDeclarator(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_variableDeclaratorId(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_variableInitializer(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_unannType(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_unannPrimitiveType(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_unannReferenceType(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_unannClassOrInterfaceType(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_unannClassType(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_ClassTypeSegment(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_ClassTypeSegmentWithAnnotations(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_unannInterfaceType(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_unannTypeVariable(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_unannArrayType(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_methodDeclaration(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_methodModifier(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_JavaMethodModifier(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_methodModifiers(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_methodHeader(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_result(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_voidType(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_methodDeclarator(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_formalParameterList(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_formalParameters(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_formalParameter(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_variableModifier(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_JavaVariableModifier(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_VariableModifiers(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_lastFormalParameter(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_receiverParameter(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_throws_(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_exceptionTypeList(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_exceptionType(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_methodBody(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_instanceInitializer(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_staticInitializer(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_constructorDeclaration(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_constructorModifier(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_JavaConstructorModifier(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_ConstructorModifiers(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_constructorDeclarator(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_simpleTypeName(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_enumDeclaration(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_enumBody(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_enumConstantList(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_enumConstant(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_enumConstantModifier(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_enumBodyDeclarations(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_interfaceDeclaration(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_normalInterfaceDeclaration(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_interfaceModifier(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_JavaInterfaceModifier(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_InterfaceModifiers(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_extendsInterfaces(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_interfaceBody(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_interfaceMemberDeclaration(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_constantDeclaration(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_constantModifier(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_JavaConstantModifier(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_ConstantModifiers(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_interfaceMethodDeclaration(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_interfaceMethodModifier(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_JavaInterfaceMethodModifiers(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_InterfaceMethodModifiers(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_annotationTypeDeclaration(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_annotationTypeBody(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_annotationTypeMemberDeclaration(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_annotationTypeElementDeclaration(EObject model, RuleCall ruleCall,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_annotationTypeElementModifier(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_JavaAnnotationTypeElementModifiers(EObject model, RuleCall ruleCall,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_AnnotationTypeElementModifiers(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_defaultValue(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_annotation(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_normalAnnotation(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_elementValuePairList(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_elementValuePair(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_elementValue(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_elementValueArrayInitializer(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_elementValueList(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_markerAnnotation(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_singleElementAnnotation(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_arrayInitializer(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_variableInitializerList(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_block(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_blockStatements(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_argumentList(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_primary(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_expression(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }

   public void complete_conditionalExpression(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor) {
      // subclasses may override
   }
}
