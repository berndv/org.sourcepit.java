/*
* generated by Xtext
*/
grammar InternalType;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.sourcepit.java.type.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.sourcepit.java.type.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.sourcepit.java.type.services.TypeGrammarAccess;

}

@parser::members {
 
 	private TypeGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(TypeGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getTypeAssignment()); }
(rule__Model__TypeAssignment)
{ after(grammarAccess.getModelAccess().getTypeAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleprimitiveType
entryRuleprimitiveType 
:
{ before(grammarAccess.getPrimitiveTypeRule()); }
	 ruleprimitiveType
{ after(grammarAccess.getPrimitiveTypeRule()); } 
	 EOF 
;

// Rule primitiveType
ruleprimitiveType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimitiveTypeAccess().getGroup()); }
(rule__PrimitiveType__Group__0)
{ after(grammarAccess.getPrimitiveTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulereferenceType
entryRulereferenceType 
:
{ before(grammarAccess.getReferenceTypeRule()); }
	 rulereferenceType
{ after(grammarAccess.getReferenceTypeRule()); } 
	 EOF 
;

// Rule referenceType
rulereferenceType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReferenceTypeAccess().getAlternatives()); }
(rule__ReferenceType__Alternatives)
{ after(grammarAccess.getReferenceTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleclassOrInterfaceType
entryRuleclassOrInterfaceType 
:
{ before(grammarAccess.getClassOrInterfaceTypeRule()); }
	 ruleclassOrInterfaceType
{ after(grammarAccess.getClassOrInterfaceTypeRule()); } 
	 EOF 
;

// Rule classOrInterfaceType
ruleclassOrInterfaceType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClassOrInterfaceTypeAccess().getGroup()); }
(rule__ClassOrInterfaceType__Group__0)
{ after(grammarAccess.getClassOrInterfaceTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleclassOrInterfaceTypeSegment
entryRuleclassOrInterfaceTypeSegment 
:
{ before(grammarAccess.getClassOrInterfaceTypeSegmentRule()); }
	 ruleclassOrInterfaceTypeSegment
{ after(grammarAccess.getClassOrInterfaceTypeSegmentRule()); } 
	 EOF 
;

// Rule classOrInterfaceTypeSegment
ruleclassOrInterfaceTypeSegment
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClassOrInterfaceTypeSegmentAccess().getGroup()); }
(rule__ClassOrInterfaceTypeSegment__Group__0)
{ after(grammarAccess.getClassOrInterfaceTypeSegmentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleclassType
entryRuleclassType 
:
{ before(grammarAccess.getClassTypeRule()); }
	 ruleclassType
{ after(grammarAccess.getClassTypeRule()); } 
	 EOF 
;

// Rule classType
ruleclassType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClassTypeAccess().getAlternatives()); }
(rule__ClassType__Alternatives)
{ after(grammarAccess.getClassTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleclassType_lf_classOrInterfaceType
entryRuleclassType_lf_classOrInterfaceType 
:
{ before(grammarAccess.getClassType_lf_classOrInterfaceTypeRule()); }
	 ruleclassType_lf_classOrInterfaceType
{ after(grammarAccess.getClassType_lf_classOrInterfaceTypeRule()); } 
	 EOF 
;

// Rule classType_lf_classOrInterfaceType
ruleclassType_lf_classOrInterfaceType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClassType_lf_classOrInterfaceTypeAccess().getGroup()); }
(rule__ClassType_lf_classOrInterfaceType__Group__0)
{ after(grammarAccess.getClassType_lf_classOrInterfaceTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleclassType_lfno_classOrInterfaceType
entryRuleclassType_lfno_classOrInterfaceType 
:
{ before(grammarAccess.getClassType_lfno_classOrInterfaceTypeRule()); }
	 ruleclassType_lfno_classOrInterfaceType
{ after(grammarAccess.getClassType_lfno_classOrInterfaceTypeRule()); } 
	 EOF 
;

// Rule classType_lfno_classOrInterfaceType
ruleclassType_lfno_classOrInterfaceType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClassType_lfno_classOrInterfaceTypeAccess().getGroup()); }
(rule__ClassType_lfno_classOrInterfaceType__Group__0)
{ after(grammarAccess.getClassType_lfno_classOrInterfaceTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleinterfaceType
entryRuleinterfaceType 
:
{ before(grammarAccess.getInterfaceTypeRule()); }
	 ruleinterfaceType
{ after(grammarAccess.getInterfaceTypeRule()); } 
	 EOF 
;

// Rule interfaceType
ruleinterfaceType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInterfaceTypeAccess().getClassTypeParserRuleCall()); }
	ruleclassType
{ after(grammarAccess.getInterfaceTypeAccess().getClassTypeParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}







// Entry rule entryRuletypeVariable
entryRuletypeVariable 
:
{ before(grammarAccess.getTypeVariableRule()); }
	 ruletypeVariable
{ after(grammarAccess.getTypeVariableRule()); } 
	 EOF 
;

// Rule typeVariable
ruletypeVariable
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeVariableAccess().getGroup()); }
(rule__TypeVariable__Group__0)
{ after(grammarAccess.getTypeVariableAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulearrayType
entryRulearrayType 
:
{ before(grammarAccess.getArrayTypeRule()); }
	 rulearrayType
{ after(grammarAccess.getArrayTypeRule()); } 
	 EOF 
;

// Rule arrayType
rulearrayType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArrayTypeAccess().getGroup()); }
(rule__ArrayType__Group__0)
{ after(grammarAccess.getArrayTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuledims
entryRuledims 
:
{ before(grammarAccess.getDimsRule()); }
	 ruledims
{ after(grammarAccess.getDimsRule()); } 
	 EOF 
;

// Rule dims
ruledims
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDimsAccess().getGroup()); }
(rule__Dims__Group__0)
{ after(grammarAccess.getDimsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuledim
entryRuledim 
:
{ before(grammarAccess.getDimRule()); }
	 ruledim
{ after(grammarAccess.getDimRule()); } 
	 EOF 
;

// Rule dim
ruledim
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDimAccess().getGroup()); }
(rule__Dim__Group__0)
{ after(grammarAccess.getDimAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuletypeParameter
entryRuletypeParameter 
:
{ before(grammarAccess.getTypeParameterRule()); }
	 ruletypeParameter
{ after(grammarAccess.getTypeParameterRule()); } 
	 EOF 
;

// Rule typeParameter
ruletypeParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeParameterAccess().getGroup()); }
(rule__TypeParameter__Group__0)
{ after(grammarAccess.getTypeParameterAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuletypeParameterModifier
entryRuletypeParameterModifier 
:
{ before(grammarAccess.getTypeParameterModifierRule()); }
	 ruletypeParameterModifier
{ after(grammarAccess.getTypeParameterModifierRule()); } 
	 EOF 
;

// Rule typeParameterModifier
ruletypeParameterModifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeParameterModifierAccess().getAnnotationParserRuleCall()); }
	ruleannotation
{ after(grammarAccess.getTypeParameterModifierAccess().getAnnotationParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuletypeBound
entryRuletypeBound 
:
{ before(grammarAccess.getTypeBoundRule()); }
	 ruletypeBound
{ after(grammarAccess.getTypeBoundRule()); } 
	 EOF 
;

// Rule typeBound
ruletypeBound
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeBoundAccess().getAlternatives()); }
(rule__TypeBound__Alternatives)
{ after(grammarAccess.getTypeBoundAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleadditionalBound
entryRuleadditionalBound 
:
{ before(grammarAccess.getAdditionalBoundRule()); }
	 ruleadditionalBound
{ after(grammarAccess.getAdditionalBoundRule()); } 
	 EOF 
;

// Rule additionalBound
ruleadditionalBound
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdditionalBoundAccess().getGroup()); }
(rule__AdditionalBound__Group__0)
{ after(grammarAccess.getAdditionalBoundAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuletypeArguments
entryRuletypeArguments 
:
{ before(grammarAccess.getTypeArgumentsRule()); }
	 ruletypeArguments
{ after(grammarAccess.getTypeArgumentsRule()); } 
	 EOF 
;

// Rule typeArguments
ruletypeArguments
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeArgumentsAccess().getGroup()); }
(rule__TypeArguments__Group__0)
{ after(grammarAccess.getTypeArgumentsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuletypeArgumentList
entryRuletypeArgumentList 
:
{ before(grammarAccess.getTypeArgumentListRule()); }
	 ruletypeArgumentList
{ after(grammarAccess.getTypeArgumentListRule()); } 
	 EOF 
;

// Rule typeArgumentList
ruletypeArgumentList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeArgumentListAccess().getGroup()); }
(rule__TypeArgumentList__Group__0)
{ after(grammarAccess.getTypeArgumentListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuletypeArgument
entryRuletypeArgument 
:
{ before(grammarAccess.getTypeArgumentRule()); }
	 ruletypeArgument
{ after(grammarAccess.getTypeArgumentRule()); } 
	 EOF 
;

// Rule typeArgument
ruletypeArgument
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeArgumentAccess().getAlternatives()); }
(rule__TypeArgument__Alternatives)
{ after(grammarAccess.getTypeArgumentAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulewildcard
entryRulewildcard 
:
{ before(grammarAccess.getWildcardRule()); }
	 rulewildcard
{ after(grammarAccess.getWildcardRule()); } 
	 EOF 
;

// Rule wildcard
rulewildcard
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWildcardAccess().getGroup()); }
(rule__Wildcard__Group__0)
{ after(grammarAccess.getWildcardAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulewildcardBounds
entryRulewildcardBounds 
:
{ before(grammarAccess.getWildcardBoundsRule()); }
	 rulewildcardBounds
{ after(grammarAccess.getWildcardBoundsRule()); } 
	 EOF 
;

// Rule wildcardBounds
rulewildcardBounds
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWildcardBoundsAccess().getAlternatives()); }
(rule__WildcardBounds__Alternatives)
{ after(grammarAccess.getWildcardBoundsAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulepackageName
entryRulepackageName 
:
{ before(grammarAccess.getPackageNameRule()); }
	 rulepackageName
{ after(grammarAccess.getPackageNameRule()); } 
	 EOF 
;

// Rule packageName
rulepackageName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPackageNameAccess().getQualifiedNameParserRuleCall()); }
	rulequalifiedName
{ after(grammarAccess.getPackageNameAccess().getQualifiedNameParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuletypeName
entryRuletypeName 
:
{ before(grammarAccess.getTypeNameRule()); }
	 ruletypeName
{ after(grammarAccess.getTypeNameRule()); } 
	 EOF 
;

// Rule typeName
ruletypeName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeNameAccess().getQualifiedNameParserRuleCall()); }
	rulequalifiedName
{ after(grammarAccess.getTypeNameAccess().getQualifiedNameParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulepackageOrTypeName
entryRulepackageOrTypeName 
:
{ before(grammarAccess.getPackageOrTypeNameRule()); }
	 rulepackageOrTypeName
{ after(grammarAccess.getPackageOrTypeNameRule()); } 
	 EOF 
;

// Rule packageOrTypeName
rulepackageOrTypeName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPackageOrTypeNameAccess().getQualifiedNameParserRuleCall()); }
	rulequalifiedName
{ after(grammarAccess.getPackageOrTypeNameAccess().getQualifiedNameParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}









// Entry rule entryRulequalifiedName
entryRulequalifiedName 
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 rulequalifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule qualifiedName
rulequalifiedName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
(rule__QualifiedName__Group__0)
{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRulepackageDeclaration
entryRulepackageDeclaration 
:
{ before(grammarAccess.getPackageDeclarationRule()); }
	 rulepackageDeclaration
{ after(grammarAccess.getPackageDeclarationRule()); } 
	 EOF 
;

// Rule packageDeclaration
rulepackageDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPackageDeclarationAccess().getGroup()); }
(rule__PackageDeclaration__Group__0)
{ after(grammarAccess.getPackageDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulepackageModifier
entryRulepackageModifier 
:
{ before(grammarAccess.getPackageModifierRule()); }
	 rulepackageModifier
{ after(grammarAccess.getPackageModifierRule()); } 
	 EOF 
;

// Rule packageModifier
rulepackageModifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPackageModifierAccess().getAnnotationParserRuleCall()); }
	ruleannotation
{ after(grammarAccess.getPackageModifierAccess().getAnnotationParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleimportDeclaration
entryRuleimportDeclaration 
:
{ before(grammarAccess.getImportDeclarationRule()); }
	 ruleimportDeclaration
{ after(grammarAccess.getImportDeclarationRule()); } 
	 EOF 
;

// Rule importDeclaration
ruleimportDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImportDeclarationAccess().getAlternatives()); }
(rule__ImportDeclaration__Alternatives)
{ after(grammarAccess.getImportDeclarationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulesingleTypeImportDeclaration
entryRulesingleTypeImportDeclaration 
:
{ before(grammarAccess.getSingleTypeImportDeclarationRule()); }
	 rulesingleTypeImportDeclaration
{ after(grammarAccess.getSingleTypeImportDeclarationRule()); } 
	 EOF 
;

// Rule singleTypeImportDeclaration
rulesingleTypeImportDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSingleTypeImportDeclarationAccess().getGroup()); }
(rule__SingleTypeImportDeclaration__Group__0)
{ after(grammarAccess.getSingleTypeImportDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuletypeImportOnDemandDeclaration
entryRuletypeImportOnDemandDeclaration 
:
{ before(grammarAccess.getTypeImportOnDemandDeclarationRule()); }
	 ruletypeImportOnDemandDeclaration
{ after(grammarAccess.getTypeImportOnDemandDeclarationRule()); } 
	 EOF 
;

// Rule typeImportOnDemandDeclaration
ruletypeImportOnDemandDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeImportOnDemandDeclarationAccess().getGroup()); }
(rule__TypeImportOnDemandDeclaration__Group__0)
{ after(grammarAccess.getTypeImportOnDemandDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulesingleStaticImportDeclaration
entryRulesingleStaticImportDeclaration 
:
{ before(grammarAccess.getSingleStaticImportDeclarationRule()); }
	 rulesingleStaticImportDeclaration
{ after(grammarAccess.getSingleStaticImportDeclarationRule()); } 
	 EOF 
;

// Rule singleStaticImportDeclaration
rulesingleStaticImportDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSingleStaticImportDeclarationAccess().getGroup()); }
(rule__SingleStaticImportDeclaration__Group__0)
{ after(grammarAccess.getSingleStaticImportDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulestaticImportOnDemandDeclaration
entryRulestaticImportOnDemandDeclaration 
:
{ before(grammarAccess.getStaticImportOnDemandDeclarationRule()); }
	 rulestaticImportOnDemandDeclaration
{ after(grammarAccess.getStaticImportOnDemandDeclarationRule()); } 
	 EOF 
;

// Rule staticImportOnDemandDeclaration
rulestaticImportOnDemandDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStaticImportOnDemandDeclarationAccess().getGroup()); }
(rule__StaticImportOnDemandDeclaration__Group__0)
{ after(grammarAccess.getStaticImportOnDemandDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuletypeDeclaration
entryRuletypeDeclaration 
:
{ before(grammarAccess.getTypeDeclarationRule()); }
	 ruletypeDeclaration
{ after(grammarAccess.getTypeDeclarationRule()); } 
	 EOF 
;

// Rule typeDeclaration
ruletypeDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeDeclarationAccess().getAlternatives()); }
(rule__TypeDeclaration__Alternatives)
{ after(grammarAccess.getTypeDeclarationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleclassDeclaration
entryRuleclassDeclaration 
:
{ before(grammarAccess.getClassDeclarationRule()); }
	 ruleclassDeclaration
{ after(grammarAccess.getClassDeclarationRule()); } 
	 EOF 
;

// Rule classDeclaration
ruleclassDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClassDeclarationAccess().getAlternatives()); }
(rule__ClassDeclaration__Alternatives)
{ after(grammarAccess.getClassDeclarationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulenormalClassDeclaration
entryRulenormalClassDeclaration 
:
{ before(grammarAccess.getNormalClassDeclarationRule()); }
	 rulenormalClassDeclaration
{ after(grammarAccess.getNormalClassDeclarationRule()); } 
	 EOF 
;

// Rule normalClassDeclaration
rulenormalClassDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNormalClassDeclarationAccess().getGroup()); }
(rule__NormalClassDeclaration__Group__0)
{ after(grammarAccess.getNormalClassDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleclassModifier
entryRuleclassModifier 
:
{ before(grammarAccess.getClassModifierRule()); }
	 ruleclassModifier
{ after(grammarAccess.getClassModifierRule()); } 
	 EOF 
;

// Rule classModifier
ruleclassModifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClassModifierAccess().getAlternatives()); }
(rule__ClassModifier__Alternatives)
{ after(grammarAccess.getClassModifierAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleJavaClassModifier
entryRuleJavaClassModifier 
:
{ before(grammarAccess.getJavaClassModifierRule()); }
	 ruleJavaClassModifier
{ after(grammarAccess.getJavaClassModifierRule()); } 
	 EOF 
;

// Rule JavaClassModifier
ruleJavaClassModifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getJavaClassModifierAccess().getModifierAssignment()); }
(rule__JavaClassModifier__ModifierAssignment)
{ after(grammarAccess.getJavaClassModifierAccess().getModifierAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuletypeParameters
entryRuletypeParameters 
:
{ before(grammarAccess.getTypeParametersRule()); }
	 ruletypeParameters
{ after(grammarAccess.getTypeParametersRule()); } 
	 EOF 
;

// Rule typeParameters
ruletypeParameters
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeParametersAccess().getGroup()); }
(rule__TypeParameters__Group__0)
{ after(grammarAccess.getTypeParametersAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuletypeParameterList
entryRuletypeParameterList 
:
{ before(grammarAccess.getTypeParameterListRule()); }
	 ruletypeParameterList
{ after(grammarAccess.getTypeParameterListRule()); } 
	 EOF 
;

// Rule typeParameterList
ruletypeParameterList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeParameterListAccess().getGroup()); }
(rule__TypeParameterList__Group__0)
{ after(grammarAccess.getTypeParameterListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulesuperclass
entryRulesuperclass 
:
{ before(grammarAccess.getSuperclassRule()); }
	 rulesuperclass
{ after(grammarAccess.getSuperclassRule()); } 
	 EOF 
;

// Rule superclass
rulesuperclass
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSuperclassAccess().getGroup()); }
(rule__Superclass__Group__0)
{ after(grammarAccess.getSuperclassAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulesuperinterfaces
entryRulesuperinterfaces 
:
{ before(grammarAccess.getSuperinterfacesRule()); }
	 rulesuperinterfaces
{ after(grammarAccess.getSuperinterfacesRule()); } 
	 EOF 
;

// Rule superinterfaces
rulesuperinterfaces
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSuperinterfacesAccess().getGroup()); }
(rule__Superinterfaces__Group__0)
{ after(grammarAccess.getSuperinterfacesAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleinterfaceTypeList
entryRuleinterfaceTypeList 
:
{ before(grammarAccess.getInterfaceTypeListRule()); }
	 ruleinterfaceTypeList
{ after(grammarAccess.getInterfaceTypeListRule()); } 
	 EOF 
;

// Rule interfaceTypeList
ruleinterfaceTypeList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInterfaceTypeListAccess().getGroup()); }
(rule__InterfaceTypeList__Group__0)
{ after(grammarAccess.getInterfaceTypeListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleclassBody
entryRuleclassBody 
:
{ before(grammarAccess.getClassBodyRule()); }
	 ruleclassBody
{ after(grammarAccess.getClassBodyRule()); } 
	 EOF 
;

// Rule classBody
ruleclassBody
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClassBodyAccess().getGroup()); }
(rule__ClassBody__Group__0)
{ after(grammarAccess.getClassBodyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleclassBodyDeclaration
entryRuleclassBodyDeclaration 
:
{ before(grammarAccess.getClassBodyDeclarationRule()); }
	 ruleclassBodyDeclaration
{ after(grammarAccess.getClassBodyDeclarationRule()); } 
	 EOF 
;

// Rule classBodyDeclaration
ruleclassBodyDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClassBodyDeclarationAccess().getAlternatives()); }
(rule__ClassBodyDeclaration__Alternatives)
{ after(grammarAccess.getClassBodyDeclarationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleclassMemberDeclaration
entryRuleclassMemberDeclaration 
:
{ before(grammarAccess.getClassMemberDeclarationRule()); }
	 ruleclassMemberDeclaration
{ after(grammarAccess.getClassMemberDeclarationRule()); } 
	 EOF 
;

// Rule classMemberDeclaration
ruleclassMemberDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClassMemberDeclarationAccess().getAlternatives()); }
(rule__ClassMemberDeclaration__Alternatives)
{ after(grammarAccess.getClassMemberDeclarationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulefieldDeclaration
entryRulefieldDeclaration 
:
{ before(grammarAccess.getFieldDeclarationRule()); }
	 rulefieldDeclaration
{ after(grammarAccess.getFieldDeclarationRule()); } 
	 EOF 
;

// Rule fieldDeclaration
rulefieldDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFieldDeclarationAccess().getGroup()); }
(rule__FieldDeclaration__Group__0)
{ after(grammarAccess.getFieldDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulefieldModifier
entryRulefieldModifier 
:
{ before(grammarAccess.getFieldModifierRule()); }
	 rulefieldModifier
{ after(grammarAccess.getFieldModifierRule()); } 
	 EOF 
;

// Rule fieldModifier
rulefieldModifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFieldModifierAccess().getAlternatives()); }
(rule__FieldModifier__Alternatives)
{ after(grammarAccess.getFieldModifierAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleJavaFieldModifier
entryRuleJavaFieldModifier 
:
{ before(grammarAccess.getJavaFieldModifierRule()); }
	 ruleJavaFieldModifier
{ after(grammarAccess.getJavaFieldModifierRule()); } 
	 EOF 
;

// Rule JavaFieldModifier
ruleJavaFieldModifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getJavaFieldModifierAccess().getModifierAssignment()); }
(rule__JavaFieldModifier__ModifierAssignment)
{ after(grammarAccess.getJavaFieldModifierAccess().getModifierAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulevariableDeclaratorList
entryRulevariableDeclaratorList 
:
{ before(grammarAccess.getVariableDeclaratorListRule()); }
	 rulevariableDeclaratorList
{ after(grammarAccess.getVariableDeclaratorListRule()); } 
	 EOF 
;

// Rule variableDeclaratorList
rulevariableDeclaratorList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableDeclaratorListAccess().getGroup()); }
(rule__VariableDeclaratorList__Group__0)
{ after(grammarAccess.getVariableDeclaratorListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulevariableDeclarator
entryRulevariableDeclarator 
:
{ before(grammarAccess.getVariableDeclaratorRule()); }
	 rulevariableDeclarator
{ after(grammarAccess.getVariableDeclaratorRule()); } 
	 EOF 
;

// Rule variableDeclarator
rulevariableDeclarator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableDeclaratorAccess().getGroup()); }
(rule__VariableDeclarator__Group__0)
{ after(grammarAccess.getVariableDeclaratorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulevariableDeclaratorId
entryRulevariableDeclaratorId 
:
{ before(grammarAccess.getVariableDeclaratorIdRule()); }
	 rulevariableDeclaratorId
{ after(grammarAccess.getVariableDeclaratorIdRule()); } 
	 EOF 
;

// Rule variableDeclaratorId
rulevariableDeclaratorId
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableDeclaratorIdAccess().getGroup()); }
(rule__VariableDeclaratorId__Group__0)
{ after(grammarAccess.getVariableDeclaratorIdAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulevariableInitializer
entryRulevariableInitializer 
:
{ before(grammarAccess.getVariableInitializerRule()); }
	 rulevariableInitializer
{ after(grammarAccess.getVariableInitializerRule()); } 
	 EOF 
;

// Rule variableInitializer
rulevariableInitializer
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableInitializerAccess().getAlternatives()); }
(rule__VariableInitializer__Alternatives)
{ after(grammarAccess.getVariableInitializerAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleunannType
entryRuleunannType 
:
{ before(grammarAccess.getUnannTypeRule()); }
	 ruleunannType
{ after(grammarAccess.getUnannTypeRule()); } 
	 EOF 
;

// Rule unannType
ruleunannType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnannTypeAccess().getAlternatives()); }
(rule__UnannType__Alternatives)
{ after(grammarAccess.getUnannTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleunannPrimitiveType
entryRuleunannPrimitiveType 
:
{ before(grammarAccess.getUnannPrimitiveTypeRule()); }
	 ruleunannPrimitiveType
{ after(grammarAccess.getUnannPrimitiveTypeRule()); } 
	 EOF 
;

// Rule unannPrimitiveType
ruleunannPrimitiveType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnannPrimitiveTypeAccess().getNameAssignment()); }
(rule__UnannPrimitiveType__NameAssignment)
{ after(grammarAccess.getUnannPrimitiveTypeAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleunannReferenceType
entryRuleunannReferenceType 
:
{ before(grammarAccess.getUnannReferenceTypeRule()); }
	 ruleunannReferenceType
{ after(grammarAccess.getUnannReferenceTypeRule()); } 
	 EOF 
;

// Rule unannReferenceType
ruleunannReferenceType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnannReferenceTypeAccess().getAlternatives()); }
(rule__UnannReferenceType__Alternatives)
{ after(grammarAccess.getUnannReferenceTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleunannClassOrInterfaceType
entryRuleunannClassOrInterfaceType 
:
{ before(grammarAccess.getUnannClassOrInterfaceTypeRule()); }
	 ruleunannClassOrInterfaceType
{ after(grammarAccess.getUnannClassOrInterfaceTypeRule()); } 
	 EOF 
;

// Rule unannClassOrInterfaceType
ruleunannClassOrInterfaceType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnannClassOrInterfaceTypeAccess().getAlternatives()); }
(rule__UnannClassOrInterfaceType__Alternatives)
{ after(grammarAccess.getUnannClassOrInterfaceTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleunannClassType
entryRuleunannClassType 
:
{ before(grammarAccess.getUnannClassTypeRule()); }
	 ruleunannClassType
{ after(grammarAccess.getUnannClassTypeRule()); } 
	 EOF 
;

// Rule unannClassType
ruleunannClassType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnannClassTypeAccess().getGroup()); }
(rule__UnannClassType__Group__0)
{ after(grammarAccess.getUnannClassTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleClassTypeSegment
entryRuleClassTypeSegment 
:
{ before(grammarAccess.getClassTypeSegmentRule()); }
	 ruleClassTypeSegment
{ after(grammarAccess.getClassTypeSegmentRule()); } 
	 EOF 
;

// Rule ClassTypeSegment
ruleClassTypeSegment
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClassTypeSegmentAccess().getGroup()); }
(rule__ClassTypeSegment__Group__0)
{ after(grammarAccess.getClassTypeSegmentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleClassTypeSegmentWithAnnotations
entryRuleClassTypeSegmentWithAnnotations 
:
{ before(grammarAccess.getClassTypeSegmentWithAnnotationsRule()); }
	 ruleClassTypeSegmentWithAnnotations
{ after(grammarAccess.getClassTypeSegmentWithAnnotationsRule()); } 
	 EOF 
;

// Rule ClassTypeSegmentWithAnnotations
ruleClassTypeSegmentWithAnnotations
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClassTypeSegmentWithAnnotationsAccess().getGroup()); }
(rule__ClassTypeSegmentWithAnnotations__Group__0)
{ after(grammarAccess.getClassTypeSegmentWithAnnotationsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleunannInterfaceType
entryRuleunannInterfaceType 
:
{ before(grammarAccess.getUnannInterfaceTypeRule()); }
	 ruleunannInterfaceType
{ after(grammarAccess.getUnannInterfaceTypeRule()); } 
	 EOF 
;

// Rule unannInterfaceType
ruleunannInterfaceType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnannInterfaceTypeAccess().getUnannClassTypeParserRuleCall()); }
	ruleunannClassType
{ after(grammarAccess.getUnannInterfaceTypeAccess().getUnannClassTypeParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleunannTypeVariable
entryRuleunannTypeVariable 
:
{ before(grammarAccess.getUnannTypeVariableRule()); }
	 ruleunannTypeVariable
{ after(grammarAccess.getUnannTypeVariableRule()); } 
	 EOF 
;

// Rule unannTypeVariable
ruleunannTypeVariable
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnannTypeVariableAccess().getNameAssignment()); }
(rule__UnannTypeVariable__NameAssignment)
{ after(grammarAccess.getUnannTypeVariableAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleunannArrayType
entryRuleunannArrayType 
:
{ before(grammarAccess.getUnannArrayTypeRule()); }
	 ruleunannArrayType
{ after(grammarAccess.getUnannArrayTypeRule()); } 
	 EOF 
;

// Rule unannArrayType
ruleunannArrayType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnannArrayTypeAccess().getGroup()); }
(rule__UnannArrayType__Group__0)
{ after(grammarAccess.getUnannArrayTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulemethodDeclaration
entryRulemethodDeclaration 
:
{ before(grammarAccess.getMethodDeclarationRule()); }
	 rulemethodDeclaration
{ after(grammarAccess.getMethodDeclarationRule()); } 
	 EOF 
;

// Rule methodDeclaration
rulemethodDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMethodDeclarationAccess().getGroup()); }
(rule__MethodDeclaration__Group__0)
{ after(grammarAccess.getMethodDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulemethodModifier
entryRulemethodModifier 
:
{ before(grammarAccess.getMethodModifierRule()); }
	 rulemethodModifier
{ after(grammarAccess.getMethodModifierRule()); } 
	 EOF 
;

// Rule methodModifier
rulemethodModifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMethodModifierAccess().getAlternatives()); }
(rule__MethodModifier__Alternatives)
{ after(grammarAccess.getMethodModifierAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleJavaMethodModifier
entryRuleJavaMethodModifier 
:
{ before(grammarAccess.getJavaMethodModifierRule()); }
	 ruleJavaMethodModifier
{ after(grammarAccess.getJavaMethodModifierRule()); } 
	 EOF 
;

// Rule JavaMethodModifier
ruleJavaMethodModifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getJavaMethodModifierAccess().getModifierAssignment()); }
(rule__JavaMethodModifier__ModifierAssignment)
{ after(grammarAccess.getJavaMethodModifierAccess().getModifierAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulemethodHeader
entryRulemethodHeader 
:
{ before(grammarAccess.getMethodHeaderRule()); }
	 rulemethodHeader
{ after(grammarAccess.getMethodHeaderRule()); } 
	 EOF 
;

// Rule methodHeader
rulemethodHeader
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMethodHeaderAccess().getAlternatives()); }
(rule__MethodHeader__Alternatives)
{ after(grammarAccess.getMethodHeaderAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleresult
entryRuleresult 
:
{ before(grammarAccess.getResultRule()); }
	 ruleresult
{ after(grammarAccess.getResultRule()); } 
	 EOF 
;

// Rule result
ruleresult
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getResultAccess().getAlternatives()); }
(rule__Result__Alternatives)
{ after(grammarAccess.getResultAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulevoidType
entryRulevoidType 
:
{ before(grammarAccess.getVoidTypeRule()); }
	 rulevoidType
{ after(grammarAccess.getVoidTypeRule()); } 
	 EOF 
;

// Rule voidType
rulevoidType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVoidTypeAccess().getNameAssignment()); }
(rule__VoidType__NameAssignment)
{ after(grammarAccess.getVoidTypeAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulemethodDeclarator
entryRulemethodDeclarator 
:
{ before(grammarAccess.getMethodDeclaratorRule()); }
	 rulemethodDeclarator
{ after(grammarAccess.getMethodDeclaratorRule()); } 
	 EOF 
;

// Rule methodDeclarator
rulemethodDeclarator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMethodDeclaratorAccess().getGroup()); }
(rule__MethodDeclarator__Group__0)
{ after(grammarAccess.getMethodDeclaratorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleformalParameterList
entryRuleformalParameterList 
:
{ before(grammarAccess.getFormalParameterListRule()); }
	 ruleformalParameterList
{ after(grammarAccess.getFormalParameterListRule()); } 
	 EOF 
;

// Rule formalParameterList
ruleformalParameterList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFormalParameterListAccess().getAlternatives()); }
(rule__FormalParameterList__Alternatives)
{ after(grammarAccess.getFormalParameterListAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleformalParameters
entryRuleformalParameters 
:
{ before(grammarAccess.getFormalParametersRule()); }
	 ruleformalParameters
{ after(grammarAccess.getFormalParametersRule()); } 
	 EOF 
;

// Rule formalParameters
ruleformalParameters
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFormalParametersAccess().getAlternatives()); }
(rule__FormalParameters__Alternatives)
{ after(grammarAccess.getFormalParametersAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleformalParameter
entryRuleformalParameter 
:
{ before(grammarAccess.getFormalParameterRule()); }
	 ruleformalParameter
{ after(grammarAccess.getFormalParameterRule()); } 
	 EOF 
;

// Rule formalParameter
ruleformalParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFormalParameterAccess().getGroup()); }
(rule__FormalParameter__Group__0)
{ after(grammarAccess.getFormalParameterAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulevariableModifier
entryRulevariableModifier 
:
{ before(grammarAccess.getVariableModifierRule()); }
	 rulevariableModifier
{ after(grammarAccess.getVariableModifierRule()); } 
	 EOF 
;

// Rule variableModifier
rulevariableModifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableModifierAccess().getAlternatives()); }
(rule__VariableModifier__Alternatives)
{ after(grammarAccess.getVariableModifierAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleJavaVariableModifier
entryRuleJavaVariableModifier 
:
{ before(grammarAccess.getJavaVariableModifierRule()); }
	 ruleJavaVariableModifier
{ after(grammarAccess.getJavaVariableModifierRule()); } 
	 EOF 
;

// Rule JavaVariableModifier
ruleJavaVariableModifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getJavaVariableModifierAccess().getModifierAssignment()); }
(rule__JavaVariableModifier__ModifierAssignment)
{ after(grammarAccess.getJavaVariableModifierAccess().getModifierAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulelastFormalParameter
entryRulelastFormalParameter 
:
{ before(grammarAccess.getLastFormalParameterRule()); }
	 rulelastFormalParameter
{ after(grammarAccess.getLastFormalParameterRule()); } 
	 EOF 
;

// Rule lastFormalParameter
rulelastFormalParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLastFormalParameterAccess().getAlternatives()); }
(rule__LastFormalParameter__Alternatives)
{ after(grammarAccess.getLastFormalParameterAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulereceiverParameter
entryRulereceiverParameter 
:
{ before(grammarAccess.getReceiverParameterRule()); }
	 rulereceiverParameter
{ after(grammarAccess.getReceiverParameterRule()); } 
	 EOF 
;

// Rule receiverParameter
rulereceiverParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReceiverParameterAccess().getGroup()); }
(rule__ReceiverParameter__Group__0)
{ after(grammarAccess.getReceiverParameterAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulethrows_
entryRulethrows_ 
:
{ before(grammarAccess.getThrows_Rule()); }
	 rulethrows_
{ after(grammarAccess.getThrows_Rule()); } 
	 EOF 
;

// Rule throws_
rulethrows_
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getThrows_Access().getGroup()); }
(rule__Throws___Group__0)
{ after(grammarAccess.getThrows_Access().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleexceptionTypeList
entryRuleexceptionTypeList 
:
{ before(grammarAccess.getExceptionTypeListRule()); }
	 ruleexceptionTypeList
{ after(grammarAccess.getExceptionTypeListRule()); } 
	 EOF 
;

// Rule exceptionTypeList
ruleexceptionTypeList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExceptionTypeListAccess().getGroup()); }
(rule__ExceptionTypeList__Group__0)
{ after(grammarAccess.getExceptionTypeListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleexceptionType
entryRuleexceptionType 
:
{ before(grammarAccess.getExceptionTypeRule()); }
	 ruleexceptionType
{ after(grammarAccess.getExceptionTypeRule()); } 
	 EOF 
;

// Rule exceptionType
ruleexceptionType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExceptionTypeAccess().getAlternatives()); }
(rule__ExceptionType__Alternatives)
{ after(grammarAccess.getExceptionTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulemethodBody
entryRulemethodBody 
:
{ before(grammarAccess.getMethodBodyRule()); }
	 rulemethodBody
{ after(grammarAccess.getMethodBodyRule()); } 
	 EOF 
;

// Rule methodBody
rulemethodBody
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMethodBodyAccess().getAlternatives()); }
(rule__MethodBody__Alternatives)
{ after(grammarAccess.getMethodBodyAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleinstanceInitializer
entryRuleinstanceInitializer 
:
{ before(grammarAccess.getInstanceInitializerRule()); }
	 ruleinstanceInitializer
{ after(grammarAccess.getInstanceInitializerRule()); } 
	 EOF 
;

// Rule instanceInitializer
ruleinstanceInitializer
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInstanceInitializerAccess().getBlockParserRuleCall()); }
	ruleblock
{ after(grammarAccess.getInstanceInitializerAccess().getBlockParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulestaticInitializer
entryRulestaticInitializer 
:
{ before(grammarAccess.getStaticInitializerRule()); }
	 rulestaticInitializer
{ after(grammarAccess.getStaticInitializerRule()); } 
	 EOF 
;

// Rule staticInitializer
rulestaticInitializer
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStaticInitializerAccess().getGroup()); }
(rule__StaticInitializer__Group__0)
{ after(grammarAccess.getStaticInitializerAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleconstructorDeclaration
entryRuleconstructorDeclaration 
:
{ before(grammarAccess.getConstructorDeclarationRule()); }
	 ruleconstructorDeclaration
{ after(grammarAccess.getConstructorDeclarationRule()); } 
	 EOF 
;

// Rule constructorDeclaration
ruleconstructorDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstructorDeclarationAccess().getGroup()); }
(rule__ConstructorDeclaration__Group__0)
{ after(grammarAccess.getConstructorDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleconstructorModifier
entryRuleconstructorModifier 
:
{ before(grammarAccess.getConstructorModifierRule()); }
	 ruleconstructorModifier
{ after(grammarAccess.getConstructorModifierRule()); } 
	 EOF 
;

// Rule constructorModifier
ruleconstructorModifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstructorModifierAccess().getAlternatives()); }
(rule__ConstructorModifier__Alternatives)
{ after(grammarAccess.getConstructorModifierAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleJavaConstructorModifier
entryRuleJavaConstructorModifier 
:
{ before(grammarAccess.getJavaConstructorModifierRule()); }
	 ruleJavaConstructorModifier
{ after(grammarAccess.getJavaConstructorModifierRule()); } 
	 EOF 
;

// Rule JavaConstructorModifier
ruleJavaConstructorModifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getJavaConstructorModifierAccess().getModifierAssignment()); }
(rule__JavaConstructorModifier__ModifierAssignment)
{ after(grammarAccess.getJavaConstructorModifierAccess().getModifierAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleconstructorDeclarator
entryRuleconstructorDeclarator 
:
{ before(grammarAccess.getConstructorDeclaratorRule()); }
	 ruleconstructorDeclarator
{ after(grammarAccess.getConstructorDeclaratorRule()); } 
	 EOF 
;

// Rule constructorDeclarator
ruleconstructorDeclarator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstructorDeclaratorAccess().getGroup()); }
(rule__ConstructorDeclarator__Group__0)
{ after(grammarAccess.getConstructorDeclaratorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulesimpleTypeName
entryRulesimpleTypeName 
:
{ before(grammarAccess.getSimpleTypeNameRule()); }
	 rulesimpleTypeName
{ after(grammarAccess.getSimpleTypeNameRule()); } 
	 EOF 
;

// Rule simpleTypeName
rulesimpleTypeName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSimpleTypeNameAccess().getIdentifierTerminalRuleCall()); }
	RULE_IDENTIFIER
{ after(grammarAccess.getSimpleTypeNameAccess().getIdentifierTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleenumDeclaration
entryRuleenumDeclaration 
:
{ before(grammarAccess.getEnumDeclarationRule()); }
	 ruleenumDeclaration
{ after(grammarAccess.getEnumDeclarationRule()); } 
	 EOF 
;

// Rule enumDeclaration
ruleenumDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumDeclarationAccess().getGroup()); }
(rule__EnumDeclaration__Group__0)
{ after(grammarAccess.getEnumDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleenumBody
entryRuleenumBody 
:
{ before(grammarAccess.getEnumBodyRule()); }
	 ruleenumBody
{ after(grammarAccess.getEnumBodyRule()); } 
	 EOF 
;

// Rule enumBody
ruleenumBody
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumBodyAccess().getGroup()); }
(rule__EnumBody__Group__0)
{ after(grammarAccess.getEnumBodyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleenumConstantList
entryRuleenumConstantList 
:
{ before(grammarAccess.getEnumConstantListRule()); }
	 ruleenumConstantList
{ after(grammarAccess.getEnumConstantListRule()); } 
	 EOF 
;

// Rule enumConstantList
ruleenumConstantList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumConstantListAccess().getGroup()); }
(rule__EnumConstantList__Group__0)
{ after(grammarAccess.getEnumConstantListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleenumConstant
entryRuleenumConstant 
:
{ before(grammarAccess.getEnumConstantRule()); }
	 ruleenumConstant
{ after(grammarAccess.getEnumConstantRule()); } 
	 EOF 
;

// Rule enumConstant
ruleenumConstant
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumConstantAccess().getGroup()); }
(rule__EnumConstant__Group__0)
{ after(grammarAccess.getEnumConstantAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleenumConstantModifier
entryRuleenumConstantModifier 
:
{ before(grammarAccess.getEnumConstantModifierRule()); }
	 ruleenumConstantModifier
{ after(grammarAccess.getEnumConstantModifierRule()); } 
	 EOF 
;

// Rule enumConstantModifier
ruleenumConstantModifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumConstantModifierAccess().getAnnotationParserRuleCall()); }
	ruleannotation
{ after(grammarAccess.getEnumConstantModifierAccess().getAnnotationParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleenumBodyDeclarations
entryRuleenumBodyDeclarations 
:
{ before(grammarAccess.getEnumBodyDeclarationsRule()); }
	 ruleenumBodyDeclarations
{ after(grammarAccess.getEnumBodyDeclarationsRule()); } 
	 EOF 
;

// Rule enumBodyDeclarations
ruleenumBodyDeclarations
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumBodyDeclarationsAccess().getGroup()); }
(rule__EnumBodyDeclarations__Group__0)
{ after(grammarAccess.getEnumBodyDeclarationsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleinterfaceDeclaration
entryRuleinterfaceDeclaration 
:
{ before(grammarAccess.getInterfaceDeclarationRule()); }
	 ruleinterfaceDeclaration
{ after(grammarAccess.getInterfaceDeclarationRule()); } 
	 EOF 
;

// Rule interfaceDeclaration
ruleinterfaceDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInterfaceDeclarationAccess().getAlternatives()); }
(rule__InterfaceDeclaration__Alternatives)
{ after(grammarAccess.getInterfaceDeclarationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulenormalInterfaceDeclaration
entryRulenormalInterfaceDeclaration 
:
{ before(grammarAccess.getNormalInterfaceDeclarationRule()); }
	 rulenormalInterfaceDeclaration
{ after(grammarAccess.getNormalInterfaceDeclarationRule()); } 
	 EOF 
;

// Rule normalInterfaceDeclaration
rulenormalInterfaceDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNormalInterfaceDeclarationAccess().getGroup()); }
(rule__NormalInterfaceDeclaration__Group__0)
{ after(grammarAccess.getNormalInterfaceDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleinterfaceModifier
entryRuleinterfaceModifier 
:
{ before(grammarAccess.getInterfaceModifierRule()); }
	 ruleinterfaceModifier
{ after(grammarAccess.getInterfaceModifierRule()); } 
	 EOF 
;

// Rule interfaceModifier
ruleinterfaceModifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInterfaceModifierAccess().getAlternatives()); }
(rule__InterfaceModifier__Alternatives)
{ after(grammarAccess.getInterfaceModifierAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleJavaInterfaceModifier
entryRuleJavaInterfaceModifier 
:
{ before(grammarAccess.getJavaInterfaceModifierRule()); }
	 ruleJavaInterfaceModifier
{ after(grammarAccess.getJavaInterfaceModifierRule()); } 
	 EOF 
;

// Rule JavaInterfaceModifier
ruleJavaInterfaceModifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getJavaInterfaceModifierAccess().getModifierAssignment()); }
(rule__JavaInterfaceModifier__ModifierAssignment)
{ after(grammarAccess.getJavaInterfaceModifierAccess().getModifierAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleextendsInterfaces
entryRuleextendsInterfaces 
:
{ before(grammarAccess.getExtendsInterfacesRule()); }
	 ruleextendsInterfaces
{ after(grammarAccess.getExtendsInterfacesRule()); } 
	 EOF 
;

// Rule extendsInterfaces
ruleextendsInterfaces
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExtendsInterfacesAccess().getGroup()); }
(rule__ExtendsInterfaces__Group__0)
{ after(grammarAccess.getExtendsInterfacesAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleinterfaceBody
entryRuleinterfaceBody 
:
{ before(grammarAccess.getInterfaceBodyRule()); }
	 ruleinterfaceBody
{ after(grammarAccess.getInterfaceBodyRule()); } 
	 EOF 
;

// Rule interfaceBody
ruleinterfaceBody
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInterfaceBodyAccess().getGroup()); }
(rule__InterfaceBody__Group__0)
{ after(grammarAccess.getInterfaceBodyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleinterfaceMemberDeclaration
entryRuleinterfaceMemberDeclaration 
:
{ before(grammarAccess.getInterfaceMemberDeclarationRule()); }
	 ruleinterfaceMemberDeclaration
{ after(grammarAccess.getInterfaceMemberDeclarationRule()); } 
	 EOF 
;

// Rule interfaceMemberDeclaration
ruleinterfaceMemberDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInterfaceMemberDeclarationAccess().getAlternatives()); }
(rule__InterfaceMemberDeclaration__Alternatives)
{ after(grammarAccess.getInterfaceMemberDeclarationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleconstantDeclaration
entryRuleconstantDeclaration 
:
{ before(grammarAccess.getConstantDeclarationRule()); }
	 ruleconstantDeclaration
{ after(grammarAccess.getConstantDeclarationRule()); } 
	 EOF 
;

// Rule constantDeclaration
ruleconstantDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstantDeclarationAccess().getGroup()); }
(rule__ConstantDeclaration__Group__0)
{ after(grammarAccess.getConstantDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleconstantModifier
entryRuleconstantModifier 
:
{ before(grammarAccess.getConstantModifierRule()); }
	 ruleconstantModifier
{ after(grammarAccess.getConstantModifierRule()); } 
	 EOF 
;

// Rule constantModifier
ruleconstantModifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstantModifierAccess().getAlternatives()); }
(rule__ConstantModifier__Alternatives)
{ after(grammarAccess.getConstantModifierAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleJavaConstantModifier
entryRuleJavaConstantModifier 
:
{ before(grammarAccess.getJavaConstantModifierRule()); }
	 ruleJavaConstantModifier
{ after(grammarAccess.getJavaConstantModifierRule()); } 
	 EOF 
;

// Rule JavaConstantModifier
ruleJavaConstantModifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getJavaConstantModifierAccess().getModifierAssignment()); }
(rule__JavaConstantModifier__ModifierAssignment)
{ after(grammarAccess.getJavaConstantModifierAccess().getModifierAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleinterfaceMethodDeclaration
entryRuleinterfaceMethodDeclaration 
:
{ before(grammarAccess.getInterfaceMethodDeclarationRule()); }
	 ruleinterfaceMethodDeclaration
{ after(grammarAccess.getInterfaceMethodDeclarationRule()); } 
	 EOF 
;

// Rule interfaceMethodDeclaration
ruleinterfaceMethodDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInterfaceMethodDeclarationAccess().getGroup()); }
(rule__InterfaceMethodDeclaration__Group__0)
{ after(grammarAccess.getInterfaceMethodDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleinterfaceMethodModifier
entryRuleinterfaceMethodModifier 
:
{ before(grammarAccess.getInterfaceMethodModifierRule()); }
	 ruleinterfaceMethodModifier
{ after(grammarAccess.getInterfaceMethodModifierRule()); } 
	 EOF 
;

// Rule interfaceMethodModifier
ruleinterfaceMethodModifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInterfaceMethodModifierAccess().getAlternatives()); }
(rule__InterfaceMethodModifier__Alternatives)
{ after(grammarAccess.getInterfaceMethodModifierAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleJavaInterfaceMethodModifiers
entryRuleJavaInterfaceMethodModifiers 
:
{ before(grammarAccess.getJavaInterfaceMethodModifiersRule()); }
	 ruleJavaInterfaceMethodModifiers
{ after(grammarAccess.getJavaInterfaceMethodModifiersRule()); } 
	 EOF 
;

// Rule JavaInterfaceMethodModifiers
ruleJavaInterfaceMethodModifiers
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getJavaInterfaceMethodModifiersAccess().getModifiersAssignment()); }
(rule__JavaInterfaceMethodModifiers__ModifiersAssignment)
{ after(grammarAccess.getJavaInterfaceMethodModifiersAccess().getModifiersAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleannotationTypeDeclaration
entryRuleannotationTypeDeclaration 
:
{ before(grammarAccess.getAnnotationTypeDeclarationRule()); }
	 ruleannotationTypeDeclaration
{ after(grammarAccess.getAnnotationTypeDeclarationRule()); } 
	 EOF 
;

// Rule annotationTypeDeclaration
ruleannotationTypeDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAnnotationTypeDeclarationAccess().getGroup()); }
(rule__AnnotationTypeDeclaration__Group__0)
{ after(grammarAccess.getAnnotationTypeDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleannotationTypeBody
entryRuleannotationTypeBody 
:
{ before(grammarAccess.getAnnotationTypeBodyRule()); }
	 ruleannotationTypeBody
{ after(grammarAccess.getAnnotationTypeBodyRule()); } 
	 EOF 
;

// Rule annotationTypeBody
ruleannotationTypeBody
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAnnotationTypeBodyAccess().getGroup()); }
(rule__AnnotationTypeBody__Group__0)
{ after(grammarAccess.getAnnotationTypeBodyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleannotationTypeMemberDeclaration
entryRuleannotationTypeMemberDeclaration 
:
{ before(grammarAccess.getAnnotationTypeMemberDeclarationRule()); }
	 ruleannotationTypeMemberDeclaration
{ after(grammarAccess.getAnnotationTypeMemberDeclarationRule()); } 
	 EOF 
;

// Rule annotationTypeMemberDeclaration
ruleannotationTypeMemberDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAnnotationTypeMemberDeclarationAccess().getAlternatives()); }
(rule__AnnotationTypeMemberDeclaration__Alternatives)
{ after(grammarAccess.getAnnotationTypeMemberDeclarationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleannotationTypeElementDeclaration
entryRuleannotationTypeElementDeclaration 
:
{ before(grammarAccess.getAnnotationTypeElementDeclarationRule()); }
	 ruleannotationTypeElementDeclaration
{ after(grammarAccess.getAnnotationTypeElementDeclarationRule()); } 
	 EOF 
;

// Rule annotationTypeElementDeclaration
ruleannotationTypeElementDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAnnotationTypeElementDeclarationAccess().getGroup()); }
(rule__AnnotationTypeElementDeclaration__Group__0)
{ after(grammarAccess.getAnnotationTypeElementDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleannotationTypeElementModifier
entryRuleannotationTypeElementModifier 
:
{ before(grammarAccess.getAnnotationTypeElementModifierRule()); }
	 ruleannotationTypeElementModifier
{ after(grammarAccess.getAnnotationTypeElementModifierRule()); } 
	 EOF 
;

// Rule annotationTypeElementModifier
ruleannotationTypeElementModifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAnnotationTypeElementModifierAccess().getAlternatives()); }
(rule__AnnotationTypeElementModifier__Alternatives)
{ after(grammarAccess.getAnnotationTypeElementModifierAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleJavaAnnotationTypeElementModifiers
entryRuleJavaAnnotationTypeElementModifiers 
:
{ before(grammarAccess.getJavaAnnotationTypeElementModifiersRule()); }
	 ruleJavaAnnotationTypeElementModifiers
{ after(grammarAccess.getJavaAnnotationTypeElementModifiersRule()); } 
	 EOF 
;

// Rule JavaAnnotationTypeElementModifiers
ruleJavaAnnotationTypeElementModifiers
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getJavaAnnotationTypeElementModifiersAccess().getModifierAssignment()); }
(rule__JavaAnnotationTypeElementModifiers__ModifierAssignment)
{ after(grammarAccess.getJavaAnnotationTypeElementModifiersAccess().getModifierAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuledefaultValue
entryRuledefaultValue 
:
{ before(grammarAccess.getDefaultValueRule()); }
	 ruledefaultValue
{ after(grammarAccess.getDefaultValueRule()); } 
	 EOF 
;

// Rule defaultValue
ruledefaultValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDefaultValueAccess().getGroup()); }
(rule__DefaultValue__Group__0)
{ after(grammarAccess.getDefaultValueAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleannotation
entryRuleannotation 
:
{ before(grammarAccess.getAnnotationRule()); }
	 ruleannotation
{ after(grammarAccess.getAnnotationRule()); } 
	 EOF 
;

// Rule annotation
ruleannotation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAnnotationAccess().getAlternatives()); }
(rule__Annotation__Alternatives)
{ after(grammarAccess.getAnnotationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulenormalAnnotation
entryRulenormalAnnotation 
:
{ before(grammarAccess.getNormalAnnotationRule()); }
	 rulenormalAnnotation
{ after(grammarAccess.getNormalAnnotationRule()); } 
	 EOF 
;

// Rule normalAnnotation
rulenormalAnnotation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNormalAnnotationAccess().getGroup()); }
(rule__NormalAnnotation__Group__0)
{ after(grammarAccess.getNormalAnnotationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleelementValuePairList
entryRuleelementValuePairList 
:
{ before(grammarAccess.getElementValuePairListRule()); }
	 ruleelementValuePairList
{ after(grammarAccess.getElementValuePairListRule()); } 
	 EOF 
;

// Rule elementValuePairList
ruleelementValuePairList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getElementValuePairListAccess().getGroup()); }
(rule__ElementValuePairList__Group__0)
{ after(grammarAccess.getElementValuePairListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleelementValuePair
entryRuleelementValuePair 
:
{ before(grammarAccess.getElementValuePairRule()); }
	 ruleelementValuePair
{ after(grammarAccess.getElementValuePairRule()); } 
	 EOF 
;

// Rule elementValuePair
ruleelementValuePair
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getElementValuePairAccess().getGroup()); }
(rule__ElementValuePair__Group__0)
{ after(grammarAccess.getElementValuePairAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleelementValue
entryRuleelementValue 
:
{ before(grammarAccess.getElementValueRule()); }
	 ruleelementValue
{ after(grammarAccess.getElementValueRule()); } 
	 EOF 
;

// Rule elementValue
ruleelementValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getElementValueAccess().getAlternatives()); }
(rule__ElementValue__Alternatives)
{ after(grammarAccess.getElementValueAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleelementValueArrayInitializer
entryRuleelementValueArrayInitializer 
:
{ before(grammarAccess.getElementValueArrayInitializerRule()); }
	 ruleelementValueArrayInitializer
{ after(grammarAccess.getElementValueArrayInitializerRule()); } 
	 EOF 
;

// Rule elementValueArrayInitializer
ruleelementValueArrayInitializer
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getElementValueArrayInitializerAccess().getGroup()); }
(rule__ElementValueArrayInitializer__Group__0)
{ after(grammarAccess.getElementValueArrayInitializerAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleelementValueList
entryRuleelementValueList 
:
{ before(grammarAccess.getElementValueListRule()); }
	 ruleelementValueList
{ after(grammarAccess.getElementValueListRule()); } 
	 EOF 
;

// Rule elementValueList
ruleelementValueList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getElementValueListAccess().getGroup()); }
(rule__ElementValueList__Group__0)
{ after(grammarAccess.getElementValueListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulemarkerAnnotation
entryRulemarkerAnnotation 
:
{ before(grammarAccess.getMarkerAnnotationRule()); }
	 rulemarkerAnnotation
{ after(grammarAccess.getMarkerAnnotationRule()); } 
	 EOF 
;

// Rule markerAnnotation
rulemarkerAnnotation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMarkerAnnotationAccess().getGroup()); }
(rule__MarkerAnnotation__Group__0)
{ after(grammarAccess.getMarkerAnnotationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulesingleElementAnnotation
entryRulesingleElementAnnotation 
:
{ before(grammarAccess.getSingleElementAnnotationRule()); }
	 rulesingleElementAnnotation
{ after(grammarAccess.getSingleElementAnnotationRule()); } 
	 EOF 
;

// Rule singleElementAnnotation
rulesingleElementAnnotation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSingleElementAnnotationAccess().getGroup()); }
(rule__SingleElementAnnotation__Group__0)
{ after(grammarAccess.getSingleElementAnnotationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulearrayInitializer
entryRulearrayInitializer 
:
{ before(grammarAccess.getArrayInitializerRule()); }
	 rulearrayInitializer
{ after(grammarAccess.getArrayInitializerRule()); } 
	 EOF 
;

// Rule arrayInitializer
rulearrayInitializer
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArrayInitializerAccess().getGroup()); }
(rule__ArrayInitializer__Group__0)
{ after(grammarAccess.getArrayInitializerAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulevariableInitializerList
entryRulevariableInitializerList 
:
{ before(grammarAccess.getVariableInitializerListRule()); }
	 rulevariableInitializerList
{ after(grammarAccess.getVariableInitializerListRule()); } 
	 EOF 
;

// Rule variableInitializerList
rulevariableInitializerList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableInitializerListAccess().getGroup()); }
(rule__VariableInitializerList__Group__0)
{ after(grammarAccess.getVariableInitializerListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleblock
entryRuleblock 
:
{ before(grammarAccess.getBlockRule()); }
	 ruleblock
{ after(grammarAccess.getBlockRule()); } 
	 EOF 
;

// Rule block
ruleblock
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBlockAccess().getDummyAssignment()); }
(rule__Block__DummyAssignment)
{ after(grammarAccess.getBlockAccess().getDummyAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleargumentList
entryRuleargumentList 
:
{ before(grammarAccess.getArgumentListRule()); }
	 ruleargumentList
{ after(grammarAccess.getArgumentListRule()); } 
	 EOF 
;

// Rule argumentList
ruleargumentList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArgumentListAccess().getDummyAssignment()); }
(rule__ArgumentList__DummyAssignment)
{ after(grammarAccess.getArgumentListAccess().getDummyAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleexpression
entryRuleexpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleexpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule expression
ruleexpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getDummyAssignment()); }
(rule__Expression__DummyAssignment)
{ after(grammarAccess.getExpressionAccess().getDummyAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleconditionalExpression
entryRuleconditionalExpression 
:
{ before(grammarAccess.getConditionalExpressionRule()); }
	 ruleconditionalExpression
{ after(grammarAccess.getConditionalExpressionRule()); } 
	 EOF 
;

// Rule conditionalExpression
ruleconditionalExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConditionalExpressionAccess().getDummyAssignment()); }
(rule__ConditionalExpression__DummyAssignment)
{ after(grammarAccess.getConditionalExpressionAccess().getDummyAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleliteral
entryRuleliteral 
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleliteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule literal
ruleliteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
(rule__Literal__Alternatives)
{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntegerLiteral
entryRuleIntegerLiteral 
:
{ before(grammarAccess.getIntegerLiteralRule()); }
	 ruleIntegerLiteral
{ after(grammarAccess.getIntegerLiteralRule()); } 
	 EOF 
;

// Rule IntegerLiteral
ruleIntegerLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntegerLiteralAccess().getValueAssignment()); }
(rule__IntegerLiteral__ValueAssignment)
{ after(grammarAccess.getIntegerLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFloatingPointLiteral
entryRuleFloatingPointLiteral 
:
{ before(grammarAccess.getFloatingPointLiteralRule()); }
	 ruleFloatingPointLiteral
{ after(grammarAccess.getFloatingPointLiteralRule()); } 
	 EOF 
;

// Rule FloatingPointLiteral
ruleFloatingPointLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFloatingPointLiteralAccess().getValueAssignment()); }
(rule__FloatingPointLiteral__ValueAssignment)
{ after(grammarAccess.getFloatingPointLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral 
:
{ before(grammarAccess.getBooleanLiteralRule()); }
	 ruleBooleanLiteral
{ after(grammarAccess.getBooleanLiteralRule()); } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanLiteralAccess().getValueAssignment()); }
(rule__BooleanLiteral__ValueAssignment)
{ after(grammarAccess.getBooleanLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCharacterLiteral
entryRuleCharacterLiteral 
:
{ before(grammarAccess.getCharacterLiteralRule()); }
	 ruleCharacterLiteral
{ after(grammarAccess.getCharacterLiteralRule()); } 
	 EOF 
;

// Rule CharacterLiteral
ruleCharacterLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCharacterLiteralAccess().getValueAssignment()); }
(rule__CharacterLiteral__ValueAssignment)
{ after(grammarAccess.getCharacterLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringLiteral
entryRuleStringLiteral 
:
{ before(grammarAccess.getStringLiteralRule()); }
	 ruleStringLiteral
{ after(grammarAccess.getStringLiteralRule()); } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringLiteralAccess().getValueAssignment()); }
(rule__StringLiteral__ValueAssignment)
{ after(grammarAccess.getStringLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNullLiteral
entryRuleNullLiteral 
:
{ before(grammarAccess.getNullLiteralRule()); }
	 ruleNullLiteral
{ after(grammarAccess.getNullLiteralRule()); } 
	 EOF 
;

// Rule NullLiteral
ruleNullLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNullLiteralAccess().getValueAssignment()); }
(rule__NullLiteral__ValueAssignment)
{ after(grammarAccess.getNullLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule ClassModifiers
ruleClassModifiers
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassModifiersAccess().getAlternatives()); }
(rule__ClassModifiers__Alternatives)
{ after(grammarAccess.getClassModifiersAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule FieldModifiers
ruleFieldModifiers
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldModifiersAccess().getAlternatives()); }
(rule__FieldModifiers__Alternatives)
{ after(grammarAccess.getFieldModifiersAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule methodModifiers
rulemethodModifiers
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodModifiersAccess().getAlternatives()); }
(rule__MethodModifiers__Alternatives)
{ after(grammarAccess.getMethodModifiersAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule VariableModifiers
ruleVariableModifiers
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableModifiersAccess().getPUBLICEnumLiteralDeclaration()); }
(	'final' 
)
{ after(grammarAccess.getVariableModifiersAccess().getPUBLICEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule ConstructorModifiers
ruleConstructorModifiers
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorModifiersAccess().getAlternatives()); }
(rule__ConstructorModifiers__Alternatives)
{ after(grammarAccess.getConstructorModifiersAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule InterfaceModifiers
ruleInterfaceModifiers
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceModifiersAccess().getAlternatives()); }
(rule__InterfaceModifiers__Alternatives)
{ after(grammarAccess.getInterfaceModifiersAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule ConstantModifiers
ruleConstantModifiers
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantModifiersAccess().getAlternatives()); }
(rule__ConstantModifiers__Alternatives)
{ after(grammarAccess.getConstantModifiersAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule InterfaceMethodModifiers
ruleInterfaceMethodModifiers
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceMethodModifiersAccess().getAlternatives()); }
(rule__InterfaceMethodModifiers__Alternatives)
{ after(grammarAccess.getInterfaceMethodModifiersAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule AnnotationTypeElementModifiers
ruleAnnotationTypeElementModifiers
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationTypeElementModifiersAccess().getAlternatives()); }
(rule__AnnotationTypeElementModifiers__Alternatives)
{ after(grammarAccess.getAnnotationTypeElementModifiersAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__PrimitiveType__TypeNameAlternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveTypeAccess().getTypeNameNumericTypeTerminalRuleCall_1_0_0()); }
	RULE_NUMERICTYPE
{ after(grammarAccess.getPrimitiveTypeAccess().getTypeNameNumericTypeTerminalRuleCall_1_0_0()); }
)

    |(
{ before(grammarAccess.getPrimitiveTypeAccess().getTypeNameBooleanTypeTerminalRuleCall_1_0_1()); }
	RULE_BOOLEANTYPE
{ after(grammarAccess.getPrimitiveTypeAccess().getTypeNameBooleanTypeTerminalRuleCall_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceTypeAccess().getClassOrInterfaceTypeParserRuleCall_0()); }
	ruleclassOrInterfaceType
{ after(grammarAccess.getReferenceTypeAccess().getClassOrInterfaceTypeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getReferenceTypeAccess().getTypeVariableParserRuleCall_1()); }
	ruletypeVariable
{ after(grammarAccess.getReferenceTypeAccess().getTypeVariableParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getReferenceTypeAccess().getArrayTypeParserRuleCall_2()); }
	rulearrayType
{ after(grammarAccess.getReferenceTypeAccess().getArrayTypeParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClassType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassTypeAccess().getGroup_0()); }
(rule__ClassType__Group_0__0)
{ after(grammarAccess.getClassTypeAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getClassTypeAccess().getGroup_1()); }
(rule__ClassType__Group_1__0)
{ after(grammarAccess.getClassTypeAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayType__TypeAlternatives_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayTypeAccess().getTypePrimitiveTypeParserRuleCall_0_0_0()); }
	ruleprimitiveType
{ after(grammarAccess.getArrayTypeAccess().getTypePrimitiveTypeParserRuleCall_0_0_0()); }
)

    |(
{ before(grammarAccess.getArrayTypeAccess().getTypeClassOrInterfaceTypeParserRuleCall_0_0_1()); }
	ruleclassOrInterfaceType
{ after(grammarAccess.getArrayTypeAccess().getTypeClassOrInterfaceTypeParserRuleCall_0_0_1()); }
)

    |(
{ before(grammarAccess.getArrayTypeAccess().getTypeTypeVariableParserRuleCall_0_0_2()); }
	ruletypeVariable
{ after(grammarAccess.getArrayTypeAccess().getTypeTypeVariableParserRuleCall_0_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeBound__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeBoundAccess().getGroup_0()); }
(rule__TypeBound__Group_0__0)
{ after(grammarAccess.getTypeBoundAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getTypeBoundAccess().getGroup_1()); }
(rule__TypeBound__Group_1__0)
{ after(grammarAccess.getTypeBoundAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeArgument__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeArgumentAccess().getReferenceTypeParserRuleCall_0()); }
	rulereferenceType
{ after(grammarAccess.getTypeArgumentAccess().getReferenceTypeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTypeArgumentAccess().getWildcardParserRuleCall_1()); }
	rulewildcard
{ after(grammarAccess.getTypeArgumentAccess().getWildcardParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WildcardBounds__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWildcardBoundsAccess().getGroup_0()); }
(rule__WildcardBounds__Group_0__0)
{ after(grammarAccess.getWildcardBoundsAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getWildcardBoundsAccess().getGroup_1()); }
(rule__WildcardBounds__Group_1__0)
{ after(grammarAccess.getWildcardBoundsAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDeclaration__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportDeclarationAccess().getSingleTypeImportDeclarationParserRuleCall_0()); }
	rulesingleTypeImportDeclaration
{ after(grammarAccess.getImportDeclarationAccess().getSingleTypeImportDeclarationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getImportDeclarationAccess().getTypeImportOnDemandDeclarationParserRuleCall_1()); }
	ruletypeImportOnDemandDeclaration
{ after(grammarAccess.getImportDeclarationAccess().getTypeImportOnDemandDeclarationParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getImportDeclarationAccess().getSingleStaticImportDeclarationParserRuleCall_2()); }
	rulesingleStaticImportDeclaration
{ after(grammarAccess.getImportDeclarationAccess().getSingleStaticImportDeclarationParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getImportDeclarationAccess().getStaticImportOnDemandDeclarationParserRuleCall_3()); }
	rulestaticImportOnDemandDeclaration
{ after(grammarAccess.getImportDeclarationAccess().getStaticImportOnDemandDeclarationParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclaration__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclarationAccess().getClassDeclarationParserRuleCall_0()); }
	ruleclassDeclaration
{ after(grammarAccess.getTypeDeclarationAccess().getClassDeclarationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTypeDeclarationAccess().getInterfaceDeclarationParserRuleCall_1()); }
	ruleinterfaceDeclaration
{ after(grammarAccess.getTypeDeclarationAccess().getInterfaceDeclarationParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getTypeDeclarationAccess().getGroup_2()); }
(rule__TypeDeclaration__Group_2__0)
{ after(grammarAccess.getTypeDeclarationAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDeclaration__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassDeclarationAccess().getNormalClassDeclarationParserRuleCall_0()); }
	rulenormalClassDeclaration
{ after(grammarAccess.getClassDeclarationAccess().getNormalClassDeclarationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getClassDeclarationAccess().getEnumDeclarationParserRuleCall_1()); }
	ruleenumDeclaration
{ after(grammarAccess.getClassDeclarationAccess().getEnumDeclarationParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClassModifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassModifierAccess().getAnnotationParserRuleCall_0()); }
	ruleannotation
{ after(grammarAccess.getClassModifierAccess().getAnnotationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getClassModifierAccess().getJavaClassModifierParserRuleCall_1()); }
	ruleJavaClassModifier
{ after(grammarAccess.getClassModifierAccess().getJavaClassModifierParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClassBodyDeclaration__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassBodyDeclarationAccess().getClassMemberDeclarationParserRuleCall_0()); }
	ruleclassMemberDeclaration
{ after(grammarAccess.getClassBodyDeclarationAccess().getClassMemberDeclarationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getClassBodyDeclarationAccess().getInstanceInitializerParserRuleCall_1()); }
	ruleinstanceInitializer
{ after(grammarAccess.getClassBodyDeclarationAccess().getInstanceInitializerParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getClassBodyDeclarationAccess().getStaticInitializerParserRuleCall_2()); }
	rulestaticInitializer
{ after(grammarAccess.getClassBodyDeclarationAccess().getStaticInitializerParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getClassBodyDeclarationAccess().getConstructorDeclarationParserRuleCall_3()); }
	ruleconstructorDeclaration
{ after(grammarAccess.getClassBodyDeclarationAccess().getConstructorDeclarationParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClassMemberDeclaration__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassMemberDeclarationAccess().getFieldDeclarationParserRuleCall_0()); }
	rulefieldDeclaration
{ after(grammarAccess.getClassMemberDeclarationAccess().getFieldDeclarationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getClassMemberDeclarationAccess().getMethodDeclarationParserRuleCall_1()); }
	rulemethodDeclaration
{ after(grammarAccess.getClassMemberDeclarationAccess().getMethodDeclarationParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getClassMemberDeclarationAccess().getClassDeclarationParserRuleCall_2()); }
	ruleclassDeclaration
{ after(grammarAccess.getClassMemberDeclarationAccess().getClassDeclarationParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getClassMemberDeclarationAccess().getInterfaceDeclarationParserRuleCall_3()); }
	ruleinterfaceDeclaration
{ after(grammarAccess.getClassMemberDeclarationAccess().getInterfaceDeclarationParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getClassMemberDeclarationAccess().getGroup_4()); }
(rule__ClassMemberDeclaration__Group_4__0)
{ after(grammarAccess.getClassMemberDeclarationAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FieldModifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldModifierAccess().getAnnotationParserRuleCall_0()); }
	ruleannotation
{ after(grammarAccess.getFieldModifierAccess().getAnnotationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getFieldModifierAccess().getJavaFieldModifierParserRuleCall_1()); }
	ruleJavaFieldModifier
{ after(grammarAccess.getFieldModifierAccess().getJavaFieldModifierParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableInitializer__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableInitializerAccess().getExpressionParserRuleCall_0()); }
	ruleexpression
{ after(grammarAccess.getVariableInitializerAccess().getExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getVariableInitializerAccess().getArrayInitializerParserRuleCall_1()); }
	rulearrayInitializer
{ after(grammarAccess.getVariableInitializerAccess().getArrayInitializerParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnannType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnannTypeAccess().getUnannPrimitiveTypeParserRuleCall_0()); }
	ruleunannPrimitiveType
{ after(grammarAccess.getUnannTypeAccess().getUnannPrimitiveTypeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getUnannTypeAccess().getUnannReferenceTypeParserRuleCall_1()); }
	ruleunannReferenceType
{ after(grammarAccess.getUnannTypeAccess().getUnannReferenceTypeParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnannPrimitiveType__NameAlternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnannPrimitiveTypeAccess().getNameNumericTypeTerminalRuleCall_0_0()); }
	RULE_NUMERICTYPE
{ after(grammarAccess.getUnannPrimitiveTypeAccess().getNameNumericTypeTerminalRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getUnannPrimitiveTypeAccess().getNameBooleanTypeTerminalRuleCall_0_1()); }
	RULE_BOOLEANTYPE
{ after(grammarAccess.getUnannPrimitiveTypeAccess().getNameBooleanTypeTerminalRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnannReferenceType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnannReferenceTypeAccess().getUnannClassOrInterfaceTypeParserRuleCall_0()); }
	ruleunannClassOrInterfaceType
{ after(grammarAccess.getUnannReferenceTypeAccess().getUnannClassOrInterfaceTypeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getUnannReferenceTypeAccess().getUnannTypeVariableParserRuleCall_1()); }
	ruleunannTypeVariable
{ after(grammarAccess.getUnannReferenceTypeAccess().getUnannTypeVariableParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getUnannReferenceTypeAccess().getUnannArrayTypeParserRuleCall_2()); }
	ruleunannArrayType
{ after(grammarAccess.getUnannReferenceTypeAccess().getUnannArrayTypeParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnannClassOrInterfaceType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnannClassOrInterfaceTypeAccess().getUnannClassTypeParserRuleCall_0()); }
	ruleunannClassType
{ after(grammarAccess.getUnannClassOrInterfaceTypeAccess().getUnannClassTypeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getUnannClassOrInterfaceTypeAccess().getUnannInterfaceTypeParserRuleCall_1()); }
	ruleunannInterfaceType
{ after(grammarAccess.getUnannClassOrInterfaceTypeAccess().getUnannInterfaceTypeParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnannArrayType__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnannArrayTypeAccess().getUnannPrimitiveTypeParserRuleCall_0_0()); }
	ruleunannPrimitiveType
{ after(grammarAccess.getUnannArrayTypeAccess().getUnannPrimitiveTypeParserRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getUnannArrayTypeAccess().getUnannClassOrInterfaceTypeParserRuleCall_0_1()); }
	ruleunannClassOrInterfaceType
{ after(grammarAccess.getUnannArrayTypeAccess().getUnannClassOrInterfaceTypeParserRuleCall_0_1()); }
)

    |(
{ before(grammarAccess.getUnannArrayTypeAccess().getUnannTypeVariableParserRuleCall_0_2()); }
	ruleunannTypeVariable
{ after(grammarAccess.getUnannArrayTypeAccess().getUnannTypeVariableParserRuleCall_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodModifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodModifierAccess().getAnnotationParserRuleCall_0()); }
	ruleannotation
{ after(grammarAccess.getMethodModifierAccess().getAnnotationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getMethodModifierAccess().getJavaMethodModifierParserRuleCall_1()); }
	ruleJavaMethodModifier
{ after(grammarAccess.getMethodModifierAccess().getJavaMethodModifierParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodHeader__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodHeaderAccess().getGroup_0()); }
(rule__MethodHeader__Group_0__0)
{ after(grammarAccess.getMethodHeaderAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getMethodHeaderAccess().getGroup_1()); }
(rule__MethodHeader__Group_1__0)
{ after(grammarAccess.getMethodHeaderAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Result__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getResultAccess().getUnannTypeParserRuleCall_0()); }
	ruleunannType
{ after(grammarAccess.getResultAccess().getUnannTypeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getResultAccess().getVoidTypeParserRuleCall_1()); }
	rulevoidType
{ after(grammarAccess.getResultAccess().getVoidTypeParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameterList__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormalParameterListAccess().getGroup_0()); }
(rule__FormalParameterList__Group_0__0)
{ after(grammarAccess.getFormalParameterListAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getFormalParameterListAccess().getParametersAssignment_1()); }
(rule__FormalParameterList__ParametersAssignment_1)
{ after(grammarAccess.getFormalParameterListAccess().getParametersAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameters__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormalParametersAccess().getGroup_0()); }
(rule__FormalParameters__Group_0__0)
{ after(grammarAccess.getFormalParametersAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getFormalParametersAccess().getGroup_1()); }
(rule__FormalParameters__Group_1__0)
{ after(grammarAccess.getFormalParametersAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableModifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableModifierAccess().getAnnotationParserRuleCall_0()); }
	ruleannotation
{ after(grammarAccess.getVariableModifierAccess().getAnnotationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getVariableModifierAccess().getJavaVariableModifierParserRuleCall_1()); }
	ruleJavaVariableModifier
{ after(grammarAccess.getVariableModifierAccess().getJavaVariableModifierParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LastFormalParameter__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLastFormalParameterAccess().getGroup_0()); }
(rule__LastFormalParameter__Group_0__0)
{ after(grammarAccess.getLastFormalParameterAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getLastFormalParameterAccess().getFormalParameterParserRuleCall_1()); }
	ruleformalParameter
{ after(grammarAccess.getLastFormalParameterAccess().getFormalParameterParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExceptionType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExceptionTypeAccess().getClassTypeParserRuleCall_0()); }
	ruleclassType
{ after(grammarAccess.getExceptionTypeAccess().getClassTypeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getExceptionTypeAccess().getTypeVariableParserRuleCall_1()); }
	ruletypeVariable
{ after(grammarAccess.getExceptionTypeAccess().getTypeVariableParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodBody__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodBodyAccess().getBlockParserRuleCall_0()); }
	ruleblock
{ after(grammarAccess.getMethodBodyAccess().getBlockParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getMethodBodyAccess().getGroup_1()); }
(rule__MethodBody__Group_1__0)
{ after(grammarAccess.getMethodBodyAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorModifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorModifierAccess().getAnnotationParserRuleCall_0()); }
	ruleannotation
{ after(grammarAccess.getConstructorModifierAccess().getAnnotationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getConstructorModifierAccess().getJavaConstructorModifierParserRuleCall_1()); }
	ruleJavaConstructorModifier
{ after(grammarAccess.getConstructorModifierAccess().getJavaConstructorModifierParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceDeclaration__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceDeclarationAccess().getNormalInterfaceDeclarationParserRuleCall_0()); }
	rulenormalInterfaceDeclaration
{ after(grammarAccess.getInterfaceDeclarationAccess().getNormalInterfaceDeclarationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getInterfaceDeclarationAccess().getAnnotationTypeDeclarationParserRuleCall_1()); }
	ruleannotationTypeDeclaration
{ after(grammarAccess.getInterfaceDeclarationAccess().getAnnotationTypeDeclarationParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceModifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceModifierAccess().getAnnotationParserRuleCall_0()); }
	ruleannotation
{ after(grammarAccess.getInterfaceModifierAccess().getAnnotationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getInterfaceModifierAccess().getJavaInterfaceModifierParserRuleCall_1()); }
	ruleJavaInterfaceModifier
{ after(grammarAccess.getInterfaceModifierAccess().getJavaInterfaceModifierParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceMemberDeclaration__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceMemberDeclarationAccess().getConstantDeclarationParserRuleCall_0()); }
	ruleconstantDeclaration
{ after(grammarAccess.getInterfaceMemberDeclarationAccess().getConstantDeclarationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getInterfaceMemberDeclarationAccess().getInterfaceMethodDeclarationParserRuleCall_1()); }
	ruleinterfaceMethodDeclaration
{ after(grammarAccess.getInterfaceMemberDeclarationAccess().getInterfaceMethodDeclarationParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getInterfaceMemberDeclarationAccess().getClassDeclarationParserRuleCall_2()); }
	ruleclassDeclaration
{ after(grammarAccess.getInterfaceMemberDeclarationAccess().getClassDeclarationParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getInterfaceMemberDeclarationAccess().getInterfaceDeclarationParserRuleCall_3()); }
	ruleinterfaceDeclaration
{ after(grammarAccess.getInterfaceMemberDeclarationAccess().getInterfaceDeclarationParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getInterfaceMemberDeclarationAccess().getGroup_4()); }
(rule__InterfaceMemberDeclaration__Group_4__0)
{ after(grammarAccess.getInterfaceMemberDeclarationAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantModifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantModifierAccess().getAnnotationParserRuleCall_0()); }
	ruleannotation
{ after(grammarAccess.getConstantModifierAccess().getAnnotationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getConstantModifierAccess().getJavaConstantModifierParserRuleCall_1()); }
	ruleJavaConstantModifier
{ after(grammarAccess.getConstantModifierAccess().getJavaConstantModifierParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceMethodModifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceMethodModifierAccess().getAnnotationParserRuleCall_0()); }
	ruleannotation
{ after(grammarAccess.getInterfaceMethodModifierAccess().getAnnotationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getInterfaceMethodModifierAccess().getJavaInterfaceMethodModifiersParserRuleCall_1()); }
	ruleJavaInterfaceMethodModifiers
{ after(grammarAccess.getInterfaceMethodModifierAccess().getJavaInterfaceMethodModifiersParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationTypeMemberDeclaration__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationTypeMemberDeclarationAccess().getAnnotationTypeElementDeclarationParserRuleCall_0()); }
	ruleannotationTypeElementDeclaration
{ after(grammarAccess.getAnnotationTypeMemberDeclarationAccess().getAnnotationTypeElementDeclarationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAnnotationTypeMemberDeclarationAccess().getConstantDeclarationParserRuleCall_1()); }
	ruleconstantDeclaration
{ after(grammarAccess.getAnnotationTypeMemberDeclarationAccess().getConstantDeclarationParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getAnnotationTypeMemberDeclarationAccess().getClassDeclarationParserRuleCall_2()); }
	ruleclassDeclaration
{ after(grammarAccess.getAnnotationTypeMemberDeclarationAccess().getClassDeclarationParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getAnnotationTypeMemberDeclarationAccess().getInterfaceDeclarationParserRuleCall_3()); }
	ruleinterfaceDeclaration
{ after(grammarAccess.getAnnotationTypeMemberDeclarationAccess().getInterfaceDeclarationParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getAnnotationTypeMemberDeclarationAccess().getGroup_4()); }
(rule__AnnotationTypeMemberDeclaration__Group_4__0)
{ after(grammarAccess.getAnnotationTypeMemberDeclarationAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationTypeElementModifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationTypeElementModifierAccess().getAnnotationParserRuleCall_0()); }
	ruleannotation
{ after(grammarAccess.getAnnotationTypeElementModifierAccess().getAnnotationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAnnotationTypeElementModifierAccess().getJavaAnnotationTypeElementModifiersParserRuleCall_1()); }
	ruleJavaAnnotationTypeElementModifiers
{ after(grammarAccess.getAnnotationTypeElementModifierAccess().getJavaAnnotationTypeElementModifiersParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getNormalAnnotationParserRuleCall_0()); }
	rulenormalAnnotation
{ after(grammarAccess.getAnnotationAccess().getNormalAnnotationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAnnotationAccess().getMarkerAnnotationParserRuleCall_1()); }
	rulemarkerAnnotation
{ after(grammarAccess.getAnnotationAccess().getMarkerAnnotationParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getAnnotationAccess().getSingleElementAnnotationParserRuleCall_2()); }
	rulesingleElementAnnotation
{ after(grammarAccess.getAnnotationAccess().getSingleElementAnnotationParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ElementValue__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementValueAccess().getConditionalExpressionParserRuleCall_0()); }
	ruleconditionalExpression
{ after(grammarAccess.getElementValueAccess().getConditionalExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getElementValueAccess().getElementValueArrayInitializerParserRuleCall_1()); }
	ruleelementValueArrayInitializer
{ after(grammarAccess.getElementValueAccess().getElementValueArrayInitializerParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getElementValueAccess().getAnnotationParserRuleCall_2()); }
	ruleannotation
{ after(grammarAccess.getElementValueAccess().getAnnotationParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getIntegerLiteralParserRuleCall_0()); }
	ruleIntegerLiteral
{ after(grammarAccess.getLiteralAccess().getIntegerLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getFloatingPointLiteralParserRuleCall_1()); }
	ruleFloatingPointLiteral
{ after(grammarAccess.getLiteralAccess().getFloatingPointLiteralParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_2()); }
	ruleBooleanLiteral
{ after(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getCharacterLiteralParserRuleCall_3()); }
	ruleCharacterLiteral
{ after(grammarAccess.getLiteralAccess().getCharacterLiteralParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_4()); }
	ruleStringLiteral
{ after(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getNullLiteralParserRuleCall_5()); }
	ruleNullLiteral
{ after(grammarAccess.getLiteralAccess().getNullLiteralParserRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerLiteral__ValueAlternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerLiteralAccess().getValueDecimalIntegerLiteralTerminalRuleCall_0_0()); }
	RULE_DECIMALINTEGERLITERAL
{ after(grammarAccess.getIntegerLiteralAccess().getValueDecimalIntegerLiteralTerminalRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getIntegerLiteralAccess().getValueHexIntegerLiteralTerminalRuleCall_0_1()); }
	RULE_HEXINTEGERLITERAL
{ after(grammarAccess.getIntegerLiteralAccess().getValueHexIntegerLiteralTerminalRuleCall_0_1()); }
)

    |(
{ before(grammarAccess.getIntegerLiteralAccess().getValueOctalIntegerLiteralTerminalRuleCall_0_2()); }
	RULE_OCTALINTEGERLITERAL
{ after(grammarAccess.getIntegerLiteralAccess().getValueOctalIntegerLiteralTerminalRuleCall_0_2()); }
)

    |(
{ before(grammarAccess.getIntegerLiteralAccess().getValueBinaryIntegerLiteralTerminalRuleCall_0_3()); }
	RULE_BINARYINTEGERLITERAL
{ after(grammarAccess.getIntegerLiteralAccess().getValueBinaryIntegerLiteralTerminalRuleCall_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FloatingPointLiteral__ValueAlternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatingPointLiteralAccess().getValueDecimalFloatingPointLiteralTerminalRuleCall_0_0()); }
	RULE_DECIMALFLOATINGPOINTLITERAL
{ after(grammarAccess.getFloatingPointLiteralAccess().getValueDecimalFloatingPointLiteralTerminalRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getFloatingPointLiteralAccess().getValueHexadecimalFloatingPointLiteralTerminalRuleCall_0_1()); }
	RULE_HEXADECIMALFLOATINGPOINTLITERAL
{ after(grammarAccess.getFloatingPointLiteralAccess().getValueHexadecimalFloatingPointLiteralTerminalRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__ValueAlternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanLiteralAccess().getValueTRUETerminalRuleCall_0_0()); }
	RULE_TRUE
{ after(grammarAccess.getBooleanLiteralAccess().getValueTRUETerminalRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getBooleanLiteralAccess().getValueFALSETerminalRuleCall_0_1()); }
	RULE_FALSE
{ after(grammarAccess.getBooleanLiteralAccess().getValueFALSETerminalRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClassModifiers__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassModifiersAccess().getPUBLICEnumLiteralDeclaration_0()); }
(	'public' 
)
{ after(grammarAccess.getClassModifiersAccess().getPUBLICEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getClassModifiersAccess().getPROTECTEDEnumLiteralDeclaration_1()); }
(	'protected' 
)
{ after(grammarAccess.getClassModifiersAccess().getPROTECTEDEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getClassModifiersAccess().getPRIVATEEnumLiteralDeclaration_2()); }
(	'private' 
)
{ after(grammarAccess.getClassModifiersAccess().getPRIVATEEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getClassModifiersAccess().getABSTRACTEnumLiteralDeclaration_3()); }
(	'abstract' 
)
{ after(grammarAccess.getClassModifiersAccess().getABSTRACTEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getClassModifiersAccess().getSTATICEnumLiteralDeclaration_4()); }
(	'static' 
)
{ after(grammarAccess.getClassModifiersAccess().getSTATICEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getClassModifiersAccess().getFINALEnumLiteralDeclaration_5()); }
(	'final' 
)
{ after(grammarAccess.getClassModifiersAccess().getFINALEnumLiteralDeclaration_5()); }
)

    |(
{ before(grammarAccess.getClassModifiersAccess().getSTRICTFPEnumLiteralDeclaration_6()); }
(	'strictfp' 
)
{ after(grammarAccess.getClassModifiersAccess().getSTRICTFPEnumLiteralDeclaration_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FieldModifiers__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldModifiersAccess().getPUBLICEnumLiteralDeclaration_0()); }
(	'public' 
)
{ after(grammarAccess.getFieldModifiersAccess().getPUBLICEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getFieldModifiersAccess().getPROTECTEDEnumLiteralDeclaration_1()); }
(	'protected' 
)
{ after(grammarAccess.getFieldModifiersAccess().getPROTECTEDEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getFieldModifiersAccess().getPRIVATEEnumLiteralDeclaration_2()); }
(	'private' 
)
{ after(grammarAccess.getFieldModifiersAccess().getPRIVATEEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getFieldModifiersAccess().getSTATICEnumLiteralDeclaration_3()); }
(	'static' 
)
{ after(grammarAccess.getFieldModifiersAccess().getSTATICEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getFieldModifiersAccess().getFINALEnumLiteralDeclaration_4()); }
(	'final' 
)
{ after(grammarAccess.getFieldModifiersAccess().getFINALEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getFieldModifiersAccess().getTRANSIENTEnumLiteralDeclaration_5()); }
(	'transient' 
)
{ after(grammarAccess.getFieldModifiersAccess().getTRANSIENTEnumLiteralDeclaration_5()); }
)

    |(
{ before(grammarAccess.getFieldModifiersAccess().getVOLATILEEnumLiteralDeclaration_6()); }
(	'volatile' 
)
{ after(grammarAccess.getFieldModifiersAccess().getVOLATILEEnumLiteralDeclaration_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodModifiers__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodModifiersAccess().getPUBLICEnumLiteralDeclaration_0()); }
(	'public' 
)
{ after(grammarAccess.getMethodModifiersAccess().getPUBLICEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getMethodModifiersAccess().getPROTECTEDEnumLiteralDeclaration_1()); }
(	'protected' 
)
{ after(grammarAccess.getMethodModifiersAccess().getPROTECTEDEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getMethodModifiersAccess().getPRIVATEEnumLiteralDeclaration_2()); }
(	'private' 
)
{ after(grammarAccess.getMethodModifiersAccess().getPRIVATEEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getMethodModifiersAccess().getABSTRACTEnumLiteralDeclaration_3()); }
(	'abstract' 
)
{ after(grammarAccess.getMethodModifiersAccess().getABSTRACTEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getMethodModifiersAccess().getSTATICEnumLiteralDeclaration_4()); }
(	'static' 
)
{ after(grammarAccess.getMethodModifiersAccess().getSTATICEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getMethodModifiersAccess().getFINALEnumLiteralDeclaration_5()); }
(	'final' 
)
{ after(grammarAccess.getMethodModifiersAccess().getFINALEnumLiteralDeclaration_5()); }
)

    |(
{ before(grammarAccess.getMethodModifiersAccess().getSYNCHRONIZEDEnumLiteralDeclaration_6()); }
(	'synchronized' 
)
{ after(grammarAccess.getMethodModifiersAccess().getSYNCHRONIZEDEnumLiteralDeclaration_6()); }
)

    |(
{ before(grammarAccess.getMethodModifiersAccess().getNATIVEEnumLiteralDeclaration_7()); }
(	'native' 
)
{ after(grammarAccess.getMethodModifiersAccess().getNATIVEEnumLiteralDeclaration_7()); }
)

    |(
{ before(grammarAccess.getMethodModifiersAccess().getSTRICTFPEnumLiteralDeclaration_8()); }
(	'strictfp' 
)
{ after(grammarAccess.getMethodModifiersAccess().getSTRICTFPEnumLiteralDeclaration_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorModifiers__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorModifiersAccess().getPUBLICEnumLiteralDeclaration_0()); }
(	'public' 
)
{ after(grammarAccess.getConstructorModifiersAccess().getPUBLICEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getConstructorModifiersAccess().getPROTECTEDEnumLiteralDeclaration_1()); }
(	'protected' 
)
{ after(grammarAccess.getConstructorModifiersAccess().getPROTECTEDEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getConstructorModifiersAccess().getPRIVATEEnumLiteralDeclaration_2()); }
(	'private' 
)
{ after(grammarAccess.getConstructorModifiersAccess().getPRIVATEEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceModifiers__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceModifiersAccess().getPUBLICEnumLiteralDeclaration_0()); }
(	'public' 
)
{ after(grammarAccess.getInterfaceModifiersAccess().getPUBLICEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getInterfaceModifiersAccess().getPROTECTEDEnumLiteralDeclaration_1()); }
(	'protected' 
)
{ after(grammarAccess.getInterfaceModifiersAccess().getPROTECTEDEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getInterfaceModifiersAccess().getPRIVATEEnumLiteralDeclaration_2()); }
(	'private' 
)
{ after(grammarAccess.getInterfaceModifiersAccess().getPRIVATEEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getInterfaceModifiersAccess().getABSTRACTEnumLiteralDeclaration_3()); }
(	'abstract' 
)
{ after(grammarAccess.getInterfaceModifiersAccess().getABSTRACTEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getInterfaceModifiersAccess().getSTATICEnumLiteralDeclaration_4()); }
(	'static' 
)
{ after(grammarAccess.getInterfaceModifiersAccess().getSTATICEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getInterfaceModifiersAccess().getSTRICTFPEnumLiteralDeclaration_5()); }
(	'strictfp' 
)
{ after(grammarAccess.getInterfaceModifiersAccess().getSTRICTFPEnumLiteralDeclaration_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantModifiers__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantModifiersAccess().getPUBLICEnumLiteralDeclaration_0()); }
(	'public' 
)
{ after(grammarAccess.getConstantModifiersAccess().getPUBLICEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getConstantModifiersAccess().getSTATICEnumLiteralDeclaration_1()); }
(	'static' 
)
{ after(grammarAccess.getConstantModifiersAccess().getSTATICEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getConstantModifiersAccess().getFINALEnumLiteralDeclaration_2()); }
(	'final' 
)
{ after(grammarAccess.getConstantModifiersAccess().getFINALEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceMethodModifiers__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceMethodModifiersAccess().getPUBLICEnumLiteralDeclaration_0()); }
(	'public' 
)
{ after(grammarAccess.getInterfaceMethodModifiersAccess().getPUBLICEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getInterfaceMethodModifiersAccess().getABSTRACTEnumLiteralDeclaration_1()); }
(	'abstract' 
)
{ after(grammarAccess.getInterfaceMethodModifiersAccess().getABSTRACTEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getInterfaceMethodModifiersAccess().getDEFAULTEnumLiteralDeclaration_2()); }
(	'default' 
)
{ after(grammarAccess.getInterfaceMethodModifiersAccess().getDEFAULTEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getInterfaceMethodModifiersAccess().getSTATICEnumLiteralDeclaration_3()); }
(	'static' 
)
{ after(grammarAccess.getInterfaceMethodModifiersAccess().getSTATICEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getInterfaceMethodModifiersAccess().getSTRICTFPEnumLiteralDeclaration_4()); }
(	'strictfp' 
)
{ after(grammarAccess.getInterfaceMethodModifiersAccess().getSTRICTFPEnumLiteralDeclaration_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationTypeElementModifiers__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationTypeElementModifiersAccess().getPUBLICEnumLiteralDeclaration_0()); }
(	'public' 
)
{ after(grammarAccess.getAnnotationTypeElementModifiersAccess().getPUBLICEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getAnnotationTypeElementModifiersAccess().getSTATICEnumLiteralDeclaration_1()); }
(	'abstract' 
)
{ after(grammarAccess.getAnnotationTypeElementModifiersAccess().getSTATICEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__PrimitiveType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimitiveType__Group__0__Impl
	rule__PrimitiveType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveTypeAccess().getAnnotationsAssignment_0()); }
(rule__PrimitiveType__AnnotationsAssignment_0)*
{ after(grammarAccess.getPrimitiveTypeAccess().getAnnotationsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimitiveType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimitiveType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveTypeAccess().getTypeNameAssignment_1()); }
(rule__PrimitiveType__TypeNameAssignment_1)
{ after(grammarAccess.getPrimitiveTypeAccess().getTypeNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ClassOrInterfaceType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassOrInterfaceType__Group__0__Impl
	rule__ClassOrInterfaceType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassOrInterfaceType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassOrInterfaceTypeAccess().getClassOrInterfaceTypeSegmentsAssignment_0()); }
(rule__ClassOrInterfaceType__ClassOrInterfaceTypeSegmentsAssignment_0)
{ after(grammarAccess.getClassOrInterfaceTypeAccess().getClassOrInterfaceTypeSegmentsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClassOrInterfaceType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassOrInterfaceType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassOrInterfaceType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassOrInterfaceTypeAccess().getGroup_1()); }
(rule__ClassOrInterfaceType__Group_1__0)*
{ after(grammarAccess.getClassOrInterfaceTypeAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ClassOrInterfaceType__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassOrInterfaceType__Group_1__0__Impl
	rule__ClassOrInterfaceType__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassOrInterfaceType__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassOrInterfaceTypeAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getClassOrInterfaceTypeAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClassOrInterfaceType__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassOrInterfaceType__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassOrInterfaceType__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassOrInterfaceTypeAccess().getClassOrInterfaceTypeSegmentsAssignment_1_1()); }
(rule__ClassOrInterfaceType__ClassOrInterfaceTypeSegmentsAssignment_1_1)?
{ after(grammarAccess.getClassOrInterfaceTypeAccess().getClassOrInterfaceTypeSegmentsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ClassOrInterfaceTypeSegment__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassOrInterfaceTypeSegment__Group__0__Impl
	rule__ClassOrInterfaceTypeSegment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassOrInterfaceTypeSegment__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassOrInterfaceTypeSegmentAccess().getAnnotationsAssignment_0()); }
(rule__ClassOrInterfaceTypeSegment__AnnotationsAssignment_0)*
{ after(grammarAccess.getClassOrInterfaceTypeSegmentAccess().getAnnotationsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClassOrInterfaceTypeSegment__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassOrInterfaceTypeSegment__Group__1__Impl
	rule__ClassOrInterfaceTypeSegment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassOrInterfaceTypeSegment__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassOrInterfaceTypeSegmentAccess().getNameAssignment_1()); }
(rule__ClassOrInterfaceTypeSegment__NameAssignment_1)
{ after(grammarAccess.getClassOrInterfaceTypeSegmentAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClassOrInterfaceTypeSegment__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassOrInterfaceTypeSegment__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassOrInterfaceTypeSegment__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassOrInterfaceTypeSegmentAccess().getTypeArgumentsAssignment_2()); }
(rule__ClassOrInterfaceTypeSegment__TypeArgumentsAssignment_2)?
{ after(grammarAccess.getClassOrInterfaceTypeSegmentAccess().getTypeArgumentsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ClassType__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassType__Group_0__0__Impl
	rule__ClassType__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassType__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassTypeAccess().getAnnotationsAssignment_0_0()); }
(rule__ClassType__AnnotationsAssignment_0_0)*
{ after(grammarAccess.getClassTypeAccess().getAnnotationsAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClassType__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassType__Group_0__1__Impl
	rule__ClassType__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassType__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassTypeAccess().getNameAssignment_0_1()); }
(rule__ClassType__NameAssignment_0_1)
{ after(grammarAccess.getClassTypeAccess().getNameAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClassType__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassType__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassType__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassTypeAccess().getTypeArgumentsAssignment_0_2()); }
(rule__ClassType__TypeArgumentsAssignment_0_2)?
{ after(grammarAccess.getClassTypeAccess().getTypeArgumentsAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ClassType__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassType__Group_1__0__Impl
	rule__ClassType__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassType__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassTypeAccess().getClassOrInterfaceTypeAssignment_1_0()); }
(rule__ClassType__ClassOrInterfaceTypeAssignment_1_0)
{ after(grammarAccess.getClassTypeAccess().getClassOrInterfaceTypeAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClassType__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassType__Group_1__1__Impl
	rule__ClassType__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassType__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassTypeAccess().getFullStopKeyword_1_1()); }

	'.' 

{ after(grammarAccess.getClassTypeAccess().getFullStopKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClassType__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassType__Group_1__2__Impl
	rule__ClassType__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassType__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassTypeAccess().getAnnotationsAssignment_1_2()); }
(rule__ClassType__AnnotationsAssignment_1_2)*
{ after(grammarAccess.getClassTypeAccess().getAnnotationsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClassType__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassType__Group_1__3__Impl
	rule__ClassType__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassType__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassTypeAccess().getNameAssignment_1_3()); }
(rule__ClassType__NameAssignment_1_3)
{ after(grammarAccess.getClassTypeAccess().getNameAssignment_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClassType__Group_1__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassType__Group_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassType__Group_1__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassTypeAccess().getTypeArgumentsAssignment_1_4()); }
(rule__ClassType__TypeArgumentsAssignment_1_4)?
{ after(grammarAccess.getClassTypeAccess().getTypeArgumentsAssignment_1_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ClassType_lf_classOrInterfaceType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassType_lf_classOrInterfaceType__Group__0__Impl
	rule__ClassType_lf_classOrInterfaceType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassType_lf_classOrInterfaceType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassType_lf_classOrInterfaceTypeAccess().getFullStopKeyword_0()); }

	'.' 

{ after(grammarAccess.getClassType_lf_classOrInterfaceTypeAccess().getFullStopKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClassType_lf_classOrInterfaceType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassType_lf_classOrInterfaceType__Group__1__Impl
	rule__ClassType_lf_classOrInterfaceType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassType_lf_classOrInterfaceType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassType_lf_classOrInterfaceTypeAccess().getAnnotationsAssignment_1()); }
(rule__ClassType_lf_classOrInterfaceType__AnnotationsAssignment_1)*
{ after(grammarAccess.getClassType_lf_classOrInterfaceTypeAccess().getAnnotationsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClassType_lf_classOrInterfaceType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassType_lf_classOrInterfaceType__Group__2__Impl
	rule__ClassType_lf_classOrInterfaceType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassType_lf_classOrInterfaceType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassType_lf_classOrInterfaceTypeAccess().getNameAssignment_2()); }
(rule__ClassType_lf_classOrInterfaceType__NameAssignment_2)
{ after(grammarAccess.getClassType_lf_classOrInterfaceTypeAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClassType_lf_classOrInterfaceType__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassType_lf_classOrInterfaceType__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassType_lf_classOrInterfaceType__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassType_lf_classOrInterfaceTypeAccess().getTypeArgumentsAssignment_3()); }
(rule__ClassType_lf_classOrInterfaceType__TypeArgumentsAssignment_3)?
{ after(grammarAccess.getClassType_lf_classOrInterfaceTypeAccess().getTypeArgumentsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ClassType_lfno_classOrInterfaceType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassType_lfno_classOrInterfaceType__Group__0__Impl
	rule__ClassType_lfno_classOrInterfaceType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassType_lfno_classOrInterfaceType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassType_lfno_classOrInterfaceTypeAccess().getAnnotationsAssignment_0()); }
(rule__ClassType_lfno_classOrInterfaceType__AnnotationsAssignment_0)*
{ after(grammarAccess.getClassType_lfno_classOrInterfaceTypeAccess().getAnnotationsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClassType_lfno_classOrInterfaceType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassType_lfno_classOrInterfaceType__Group__1__Impl
	rule__ClassType_lfno_classOrInterfaceType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassType_lfno_classOrInterfaceType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassType_lfno_classOrInterfaceTypeAccess().getNameAssignment_1()); }
(rule__ClassType_lfno_classOrInterfaceType__NameAssignment_1)
{ after(grammarAccess.getClassType_lfno_classOrInterfaceTypeAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClassType_lfno_classOrInterfaceType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassType_lfno_classOrInterfaceType__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassType_lfno_classOrInterfaceType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassType_lfno_classOrInterfaceTypeAccess().getTypeArgumentsAssignment_2()); }
(rule__ClassType_lfno_classOrInterfaceType__TypeArgumentsAssignment_2)?
{ after(grammarAccess.getClassType_lfno_classOrInterfaceTypeAccess().getTypeArgumentsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__TypeVariable__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeVariable__Group__0__Impl
	rule__TypeVariable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeVariable__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeVariableAccess().getAnnotationsAssignment_0()); }
(rule__TypeVariable__AnnotationsAssignment_0)*
{ after(grammarAccess.getTypeVariableAccess().getAnnotationsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeVariable__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeVariable__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeVariable__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeVariableAccess().getNameAssignment_1()); }
(rule__TypeVariable__NameAssignment_1)
{ after(grammarAccess.getTypeVariableAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ArrayType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayType__Group__0__Impl
	rule__ArrayType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayTypeAccess().getTypeAssignment_0()); }
(rule__ArrayType__TypeAssignment_0)
{ after(grammarAccess.getArrayTypeAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayTypeAccess().getDimsAssignment_1()); }
(rule__ArrayType__DimsAssignment_1)
{ after(grammarAccess.getArrayTypeAccess().getDimsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Dims__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Dims__Group__0__Impl
	rule__Dims__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Dims__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDimsAccess().getDimsAssignment_0()); }
(rule__Dims__DimsAssignment_0)
{ after(grammarAccess.getDimsAccess().getDimsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Dims__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Dims__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Dims__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDimsAccess().getDimsAssignment_1()); }
(rule__Dims__DimsAssignment_1)*
{ after(grammarAccess.getDimsAccess().getDimsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Dim__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Dim__Group__0__Impl
	rule__Dim__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Dim__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDimAccess().getDimAction_0()); }
(

)
{ after(grammarAccess.getDimAccess().getDimAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Dim__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Dim__Group__1__Impl
	rule__Dim__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Dim__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDimAccess().getAnnotationsAssignment_1()); }
(rule__Dim__AnnotationsAssignment_1)*
{ after(grammarAccess.getDimAccess().getAnnotationsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Dim__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Dim__Group__2__Impl
	rule__Dim__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Dim__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDimAccess().getLeftSquareBracketKeyword_2()); }

	'[' 

{ after(grammarAccess.getDimAccess().getLeftSquareBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Dim__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Dim__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Dim__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDimAccess().getRightSquareBracketKeyword_3()); }

	']' 

{ after(grammarAccess.getDimAccess().getRightSquareBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__TypeParameter__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeParameter__Group__0__Impl
	rule__TypeParameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameter__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParameterAccess().getTypeParameterModifiersAssignment_0()); }
(rule__TypeParameter__TypeParameterModifiersAssignment_0)*
{ after(grammarAccess.getTypeParameterAccess().getTypeParameterModifiersAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeParameter__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeParameter__Group__1__Impl
	rule__TypeParameter__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameter__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParameterAccess().getNameAssignment_1()); }
(rule__TypeParameter__NameAssignment_1)
{ after(grammarAccess.getTypeParameterAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeParameter__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeParameter__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameter__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParameterAccess().getTypeBoundAssignment_2()); }
(rule__TypeParameter__TypeBoundAssignment_2)?
{ after(grammarAccess.getTypeParameterAccess().getTypeBoundAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__TypeBound__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeBound__Group_0__0__Impl
	rule__TypeBound__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeBound__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeBoundAccess().getExtendsKeyword_0_0()); }

	'extends' 

{ after(grammarAccess.getTypeBoundAccess().getExtendsKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeBound__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeBound__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeBound__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeBoundAccess().getTypeVariableAssignment_0_1()); }
(rule__TypeBound__TypeVariableAssignment_0_1)
{ after(grammarAccess.getTypeBoundAccess().getTypeVariableAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TypeBound__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeBound__Group_1__0__Impl
	rule__TypeBound__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeBound__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeBoundAccess().getExtendsKeyword_1_0()); }

	'extends' 

{ after(grammarAccess.getTypeBoundAccess().getExtendsKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeBound__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeBound__Group_1__1__Impl
	rule__TypeBound__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeBound__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeBoundAccess().getClassOrInterfaceTypeAssignment_1_1()); }
(rule__TypeBound__ClassOrInterfaceTypeAssignment_1_1)
{ after(grammarAccess.getTypeBoundAccess().getClassOrInterfaceTypeAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeBound__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeBound__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeBound__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeBoundAccess().getAdditionalBoundAssignment_1_2()); }
(rule__TypeBound__AdditionalBoundAssignment_1_2)*
{ after(grammarAccess.getTypeBoundAccess().getAdditionalBoundAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AdditionalBound__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditionalBound__Group__0__Impl
	rule__AdditionalBound__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionalBound__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionalBoundAccess().getAmpersandKeyword_0()); }

	'&' 

{ after(grammarAccess.getAdditionalBoundAccess().getAmpersandKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditionalBound__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditionalBound__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionalBound__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionalBoundAccess().getInterfaceTypeParserRuleCall_1()); }
	ruleinterfaceType
{ after(grammarAccess.getAdditionalBoundAccess().getInterfaceTypeParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TypeArguments__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeArguments__Group__0__Impl
	rule__TypeArguments__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeArguments__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeArgumentsAccess().getLessThanSignKeyword_0()); }

	'<' 

{ after(grammarAccess.getTypeArgumentsAccess().getLessThanSignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeArguments__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeArguments__Group__1__Impl
	rule__TypeArguments__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeArguments__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeArgumentsAccess().getTypeArgumentListParserRuleCall_1()); }
	ruletypeArgumentList
{ after(grammarAccess.getTypeArgumentsAccess().getTypeArgumentListParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeArguments__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeArguments__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeArguments__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeArgumentsAccess().getGreaterThanSignKeyword_2()); }

	'>' 

{ after(grammarAccess.getTypeArgumentsAccess().getGreaterThanSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__TypeArgumentList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeArgumentList__Group__0__Impl
	rule__TypeArgumentList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeArgumentList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeArgumentListAccess().getTypeArgumentsAssignment_0()); }
(rule__TypeArgumentList__TypeArgumentsAssignment_0)
{ after(grammarAccess.getTypeArgumentListAccess().getTypeArgumentsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeArgumentList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeArgumentList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeArgumentList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeArgumentListAccess().getGroup_1()); }
(rule__TypeArgumentList__Group_1__0)*
{ after(grammarAccess.getTypeArgumentListAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TypeArgumentList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeArgumentList__Group_1__0__Impl
	rule__TypeArgumentList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeArgumentList__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeArgumentListAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getTypeArgumentListAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeArgumentList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeArgumentList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeArgumentList__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeArgumentListAccess().getTypeArgumentsAssignment_1_1()); }
(rule__TypeArgumentList__TypeArgumentsAssignment_1_1)
{ after(grammarAccess.getTypeArgumentListAccess().getTypeArgumentsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Wildcard__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Wildcard__Group__0__Impl
	rule__Wildcard__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Wildcard__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWildcardAccess().getWildcardAction_0()); }
(

)
{ after(grammarAccess.getWildcardAccess().getWildcardAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Wildcard__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Wildcard__Group__1__Impl
	rule__Wildcard__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Wildcard__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWildcardAccess().getAnnotationsAssignment_1()); }
(rule__Wildcard__AnnotationsAssignment_1)*
{ after(grammarAccess.getWildcardAccess().getAnnotationsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Wildcard__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Wildcard__Group__2__Impl
	rule__Wildcard__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Wildcard__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWildcardAccess().getQuestionMarkKeyword_2()); }

	'?' 

{ after(grammarAccess.getWildcardAccess().getQuestionMarkKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Wildcard__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Wildcard__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Wildcard__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWildcardAccess().getWildcardBoundsAssignment_3()); }
(rule__Wildcard__WildcardBoundsAssignment_3)?
{ after(grammarAccess.getWildcardAccess().getWildcardBoundsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__WildcardBounds__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WildcardBounds__Group_0__0__Impl
	rule__WildcardBounds__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WildcardBounds__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWildcardBoundsAccess().getExtendsKeyword_0_0()); }

	'extends' 

{ after(grammarAccess.getWildcardBoundsAccess().getExtendsKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WildcardBounds__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WildcardBounds__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WildcardBounds__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWildcardBoundsAccess().getReferenceTypeParserRuleCall_0_1()); }
	rulereferenceType
{ after(grammarAccess.getWildcardBoundsAccess().getReferenceTypeParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__WildcardBounds__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WildcardBounds__Group_1__0__Impl
	rule__WildcardBounds__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WildcardBounds__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWildcardBoundsAccess().getSuperKeyword_1_0()); }

	'super' 

{ after(grammarAccess.getWildcardBoundsAccess().getSuperKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WildcardBounds__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WildcardBounds__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WildcardBounds__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWildcardBoundsAccess().getReferenceTypeParserRuleCall_1_1()); }
	rulereferenceType
{ after(grammarAccess.getWildcardBoundsAccess().getReferenceTypeParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIdentifierTerminalRuleCall_0()); }
	RULE_IDENTIFIER
{ after(grammarAccess.getQualifiedNameAccess().getIdentifierTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
(rule__QualifiedName__Group_1__0)*
{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIdentifierTerminalRuleCall_1_1()); }
	RULE_IDENTIFIER
{ after(grammarAccess.getQualifiedNameAccess().getIdentifierTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__PackageDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageDeclaration__Group__0__Impl
	rule__PackageDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDeclarationAccess().getModifiersAssignment_0()); }
(rule__PackageDeclaration__ModifiersAssignment_0)*
{ after(grammarAccess.getPackageDeclarationAccess().getModifiersAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackageDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageDeclaration__Group__1__Impl
	rule__PackageDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDeclarationAccess().getPackageKeyword_1()); }

	'package' 

{ after(grammarAccess.getPackageDeclarationAccess().getPackageKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackageDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageDeclaration__Group__2__Impl
	rule__PackageDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDeclarationAccess().getNameAssignment_2()); }
(rule__PackageDeclaration__NameAssignment_2)
{ after(grammarAccess.getPackageDeclarationAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackageDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDeclarationAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getPackageDeclarationAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__SingleTypeImportDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SingleTypeImportDeclaration__Group__0__Impl
	rule__SingleTypeImportDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleTypeImportDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleTypeImportDeclarationAccess().getImportKeyword_0()); }

	'import' 

{ after(grammarAccess.getSingleTypeImportDeclarationAccess().getImportKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SingleTypeImportDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SingleTypeImportDeclaration__Group__1__Impl
	rule__SingleTypeImportDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleTypeImportDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleTypeImportDeclarationAccess().getNameAssignment_1()); }
(rule__SingleTypeImportDeclaration__NameAssignment_1)
{ after(grammarAccess.getSingleTypeImportDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SingleTypeImportDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SingleTypeImportDeclaration__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleTypeImportDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleTypeImportDeclarationAccess().getSemicolonKeyword_2()); }

	';' 

{ after(grammarAccess.getSingleTypeImportDeclarationAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__TypeImportOnDemandDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeImportOnDemandDeclaration__Group__0__Impl
	rule__TypeImportOnDemandDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeImportOnDemandDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeImportOnDemandDeclarationAccess().getImportKeyword_0()); }

	'import' 

{ after(grammarAccess.getTypeImportOnDemandDeclarationAccess().getImportKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeImportOnDemandDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeImportOnDemandDeclaration__Group__1__Impl
	rule__TypeImportOnDemandDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeImportOnDemandDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeImportOnDemandDeclarationAccess().getNameAssignment_1()); }
(rule__TypeImportOnDemandDeclaration__NameAssignment_1)
{ after(grammarAccess.getTypeImportOnDemandDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeImportOnDemandDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeImportOnDemandDeclaration__Group__2__Impl
	rule__TypeImportOnDemandDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeImportOnDemandDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeImportOnDemandDeclarationAccess().getFullStopKeyword_2()); }

	'.' 

{ after(grammarAccess.getTypeImportOnDemandDeclarationAccess().getFullStopKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeImportOnDemandDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeImportOnDemandDeclaration__Group__3__Impl
	rule__TypeImportOnDemandDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeImportOnDemandDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeImportOnDemandDeclarationAccess().getAsteriskKeyword_3()); }

	'*' 

{ after(grammarAccess.getTypeImportOnDemandDeclarationAccess().getAsteriskKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeImportOnDemandDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeImportOnDemandDeclaration__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeImportOnDemandDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeImportOnDemandDeclarationAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getTypeImportOnDemandDeclarationAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__SingleStaticImportDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SingleStaticImportDeclaration__Group__0__Impl
	rule__SingleStaticImportDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleStaticImportDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleStaticImportDeclarationAccess().getImportKeyword_0()); }

	'import' 

{ after(grammarAccess.getSingleStaticImportDeclarationAccess().getImportKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SingleStaticImportDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SingleStaticImportDeclaration__Group__1__Impl
	rule__SingleStaticImportDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleStaticImportDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleStaticImportDeclarationAccess().getStaticKeyword_1()); }

	'static' 

{ after(grammarAccess.getSingleStaticImportDeclarationAccess().getStaticKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SingleStaticImportDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SingleStaticImportDeclaration__Group__2__Impl
	rule__SingleStaticImportDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleStaticImportDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleStaticImportDeclarationAccess().getNameAssignment_2()); }
(rule__SingleStaticImportDeclaration__NameAssignment_2)
{ after(grammarAccess.getSingleStaticImportDeclarationAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SingleStaticImportDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SingleStaticImportDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleStaticImportDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleStaticImportDeclarationAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getSingleStaticImportDeclarationAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__StaticImportOnDemandDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StaticImportOnDemandDeclaration__Group__0__Impl
	rule__StaticImportOnDemandDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticImportOnDemandDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStaticImportOnDemandDeclarationAccess().getImportKeyword_0()); }

	'import' 

{ after(grammarAccess.getStaticImportOnDemandDeclarationAccess().getImportKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StaticImportOnDemandDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StaticImportOnDemandDeclaration__Group__1__Impl
	rule__StaticImportOnDemandDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticImportOnDemandDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStaticImportOnDemandDeclarationAccess().getStaticKeyword_1()); }

	'static' 

{ after(grammarAccess.getStaticImportOnDemandDeclarationAccess().getStaticKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StaticImportOnDemandDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StaticImportOnDemandDeclaration__Group__2__Impl
	rule__StaticImportOnDemandDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticImportOnDemandDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStaticImportOnDemandDeclarationAccess().getNameAssignment_2()); }
(rule__StaticImportOnDemandDeclaration__NameAssignment_2)
{ after(grammarAccess.getStaticImportOnDemandDeclarationAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StaticImportOnDemandDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StaticImportOnDemandDeclaration__Group__3__Impl
	rule__StaticImportOnDemandDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticImportOnDemandDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStaticImportOnDemandDeclarationAccess().getFullStopKeyword_3()); }

	'.' 

{ after(grammarAccess.getStaticImportOnDemandDeclarationAccess().getFullStopKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StaticImportOnDemandDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StaticImportOnDemandDeclaration__Group__4__Impl
	rule__StaticImportOnDemandDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticImportOnDemandDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStaticImportOnDemandDeclarationAccess().getAsteriskKeyword_4()); }

	'*' 

{ after(grammarAccess.getStaticImportOnDemandDeclarationAccess().getAsteriskKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StaticImportOnDemandDeclaration__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StaticImportOnDemandDeclaration__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticImportOnDemandDeclaration__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStaticImportOnDemandDeclarationAccess().getSemicolonKeyword_5()); }

	';' 

{ after(grammarAccess.getStaticImportOnDemandDeclarationAccess().getSemicolonKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__TypeDeclaration__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDeclaration__Group_2__0__Impl
	rule__TypeDeclaration__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclaration__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclarationAccess().getEmptyTypeDeclarationAction_2_0()); }
(

)
{ after(grammarAccess.getTypeDeclarationAccess().getEmptyTypeDeclarationAction_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDeclaration__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDeclaration__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclaration__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclarationAccess().getSemicolonKeyword_2_1()); }

	';' 

{ after(grammarAccess.getTypeDeclarationAccess().getSemicolonKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NormalClassDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NormalClassDeclaration__Group__0__Impl
	rule__NormalClassDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalClassDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalClassDeclarationAccess().getModifiersAssignment_0()); }
(rule__NormalClassDeclaration__ModifiersAssignment_0)*
{ after(grammarAccess.getNormalClassDeclarationAccess().getModifiersAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NormalClassDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NormalClassDeclaration__Group__1__Impl
	rule__NormalClassDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalClassDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalClassDeclarationAccess().getClassKeyword_1()); }

	'class' 

{ after(grammarAccess.getNormalClassDeclarationAccess().getClassKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NormalClassDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NormalClassDeclaration__Group__2__Impl
	rule__NormalClassDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalClassDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalClassDeclarationAccess().getNameAssignment_2()); }
(rule__NormalClassDeclaration__NameAssignment_2)
{ after(grammarAccess.getNormalClassDeclarationAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NormalClassDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NormalClassDeclaration__Group__3__Impl
	rule__NormalClassDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalClassDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalClassDeclarationAccess().getTypeParametersAssignment_3()); }
(rule__NormalClassDeclaration__TypeParametersAssignment_3)?
{ after(grammarAccess.getNormalClassDeclarationAccess().getTypeParametersAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NormalClassDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NormalClassDeclaration__Group__4__Impl
	rule__NormalClassDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalClassDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalClassDeclarationAccess().getSuperclassAssignment_4()); }
(rule__NormalClassDeclaration__SuperclassAssignment_4)?
{ after(grammarAccess.getNormalClassDeclarationAccess().getSuperclassAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NormalClassDeclaration__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NormalClassDeclaration__Group__5__Impl
	rule__NormalClassDeclaration__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalClassDeclaration__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalClassDeclarationAccess().getSuperinterfacesAssignment_5()); }
(rule__NormalClassDeclaration__SuperinterfacesAssignment_5)?
{ after(grammarAccess.getNormalClassDeclarationAccess().getSuperinterfacesAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NormalClassDeclaration__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NormalClassDeclaration__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalClassDeclaration__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalClassDeclarationAccess().getClassBodyAssignment_6()); }
(rule__NormalClassDeclaration__ClassBodyAssignment_6)
{ after(grammarAccess.getNormalClassDeclarationAccess().getClassBodyAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__TypeParameters__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeParameters__Group__0__Impl
	rule__TypeParameters__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameters__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParametersAccess().getLessThanSignKeyword_0()); }

	'<' 

{ after(grammarAccess.getTypeParametersAccess().getLessThanSignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeParameters__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeParameters__Group__1__Impl
	rule__TypeParameters__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameters__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParametersAccess().getTypeParameterListParserRuleCall_1()); }
	ruletypeParameterList
{ after(grammarAccess.getTypeParametersAccess().getTypeParameterListParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeParameters__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeParameters__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameters__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParametersAccess().getGreaterThanSignKeyword_2()); }

	'>' 

{ after(grammarAccess.getTypeParametersAccess().getGreaterThanSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__TypeParameterList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeParameterList__Group__0__Impl
	rule__TypeParameterList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameterList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParameterListAccess().getTypeParametersAssignment_0()); }
(rule__TypeParameterList__TypeParametersAssignment_0)
{ after(grammarAccess.getTypeParameterListAccess().getTypeParametersAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeParameterList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeParameterList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameterList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParameterListAccess().getGroup_1()); }
(rule__TypeParameterList__Group_1__0)*
{ after(grammarAccess.getTypeParameterListAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TypeParameterList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeParameterList__Group_1__0__Impl
	rule__TypeParameterList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameterList__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParameterListAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getTypeParameterListAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeParameterList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeParameterList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameterList__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParameterListAccess().getTypeParametersAssignment_1_1()); }
(rule__TypeParameterList__TypeParametersAssignment_1_1)
{ after(grammarAccess.getTypeParameterListAccess().getTypeParametersAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Superclass__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Superclass__Group__0__Impl
	rule__Superclass__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Superclass__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSuperclassAccess().getExtendsKeyword_0()); }

	'extends' 

{ after(grammarAccess.getSuperclassAccess().getExtendsKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Superclass__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Superclass__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Superclass__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSuperclassAccess().getClassTypeParserRuleCall_1()); }
	ruleclassType
{ after(grammarAccess.getSuperclassAccess().getClassTypeParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Superinterfaces__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Superinterfaces__Group__0__Impl
	rule__Superinterfaces__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Superinterfaces__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSuperinterfacesAccess().getImplementsKeyword_0()); }

	'implements' 

{ after(grammarAccess.getSuperinterfacesAccess().getImplementsKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Superinterfaces__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Superinterfaces__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Superinterfaces__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSuperinterfacesAccess().getInterfaceTypeListParserRuleCall_1()); }
	ruleinterfaceTypeList
{ after(grammarAccess.getSuperinterfacesAccess().getInterfaceTypeListParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InterfaceTypeList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceTypeList__Group__0__Impl
	rule__InterfaceTypeList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceTypeList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceTypeListAccess().getInterfaceTypesAssignment_0()); }
(rule__InterfaceTypeList__InterfaceTypesAssignment_0)
{ after(grammarAccess.getInterfaceTypeListAccess().getInterfaceTypesAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceTypeList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceTypeList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceTypeList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceTypeListAccess().getGroup_1()); }
(rule__InterfaceTypeList__Group_1__0)*
{ after(grammarAccess.getInterfaceTypeListAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InterfaceTypeList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceTypeList__Group_1__0__Impl
	rule__InterfaceTypeList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceTypeList__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceTypeListAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getInterfaceTypeListAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceTypeList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceTypeList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceTypeList__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceTypeListAccess().getInterfaceTypesAssignment_1_1()); }
(rule__InterfaceTypeList__InterfaceTypesAssignment_1_1)
{ after(grammarAccess.getInterfaceTypeListAccess().getInterfaceTypesAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ClassBody__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassBody__Group__0__Impl
	rule__ClassBody__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassBody__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassBodyAccess().getClassBodyAction_0()); }
(

)
{ after(grammarAccess.getClassBodyAccess().getClassBodyAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClassBody__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassBody__Group__1__Impl
	rule__ClassBody__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassBody__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassBodyAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getClassBodyAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClassBody__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassBody__Group__2__Impl
	rule__ClassBody__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassBody__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassBodyAccess().getDeclarationsAssignment_2()); }
(rule__ClassBody__DeclarationsAssignment_2)*
{ after(grammarAccess.getClassBodyAccess().getDeclarationsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClassBody__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassBody__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassBody__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassBodyAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getClassBodyAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ClassMemberDeclaration__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassMemberDeclaration__Group_4__0__Impl
	rule__ClassMemberDeclaration__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassMemberDeclaration__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassMemberDeclarationAccess().getEmptyClassMemberDeclarationAction_4_0()); }
(

)
{ after(grammarAccess.getClassMemberDeclarationAccess().getEmptyClassMemberDeclarationAction_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClassMemberDeclaration__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassMemberDeclaration__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassMemberDeclaration__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassMemberDeclarationAccess().getSemicolonKeyword_4_1()); }

	';' 

{ after(grammarAccess.getClassMemberDeclarationAccess().getSemicolonKeyword_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FieldDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FieldDeclaration__Group__0__Impl
	rule__FieldDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldDeclarationAccess().getFieldModifiersAssignment_0()); }
(rule__FieldDeclaration__FieldModifiersAssignment_0)*
{ after(grammarAccess.getFieldDeclarationAccess().getFieldModifiersAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FieldDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FieldDeclaration__Group__1__Impl
	rule__FieldDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldDeclarationAccess().getUnannTypeAssignment_1()); }
(rule__FieldDeclaration__UnannTypeAssignment_1)
{ after(grammarAccess.getFieldDeclarationAccess().getUnannTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FieldDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FieldDeclaration__Group__2__Impl
	rule__FieldDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldDeclarationAccess().getVariableDeclaratorListAssignment_2()); }
(rule__FieldDeclaration__VariableDeclaratorListAssignment_2)
{ after(grammarAccess.getFieldDeclarationAccess().getVariableDeclaratorListAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FieldDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FieldDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldDeclarationAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getFieldDeclarationAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__VariableDeclaratorList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaratorList__Group__0__Impl
	rule__VariableDeclaratorList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaratorList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclaratorListAccess().getVariableDeclaratorsAssignment_0()); }
(rule__VariableDeclaratorList__VariableDeclaratorsAssignment_0)
{ after(grammarAccess.getVariableDeclaratorListAccess().getVariableDeclaratorsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaratorList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaratorList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaratorList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclaratorListAccess().getGroup_1()); }
(rule__VariableDeclaratorList__Group_1__0)*
{ after(grammarAccess.getVariableDeclaratorListAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VariableDeclaratorList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaratorList__Group_1__0__Impl
	rule__VariableDeclaratorList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaratorList__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclaratorListAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getVariableDeclaratorListAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaratorList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaratorList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaratorList__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclaratorListAccess().getVariableDeclaratorsAssignment_1_1()); }
(rule__VariableDeclaratorList__VariableDeclaratorsAssignment_1_1)
{ after(grammarAccess.getVariableDeclaratorListAccess().getVariableDeclaratorsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VariableDeclarator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclarator__Group__0__Impl
	rule__VariableDeclarator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclarator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclaratorAccess().getIdAssignment_0()); }
(rule__VariableDeclarator__IdAssignment_0)
{ after(grammarAccess.getVariableDeclaratorAccess().getIdAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclarator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclarator__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclarator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclaratorAccess().getGroup_1()); }
(rule__VariableDeclarator__Group_1__0)?
{ after(grammarAccess.getVariableDeclaratorAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VariableDeclarator__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclarator__Group_1__0__Impl
	rule__VariableDeclarator__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclarator__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclaratorAccess().getEqualsSignKeyword_1_0()); }

	'=' 

{ after(grammarAccess.getVariableDeclaratorAccess().getEqualsSignKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclarator__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclarator__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclarator__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclaratorAccess().getInitializerAssignment_1_1()); }
(rule__VariableDeclarator__InitializerAssignment_1_1)
{ after(grammarAccess.getVariableDeclaratorAccess().getInitializerAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VariableDeclaratorId__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaratorId__Group__0__Impl
	rule__VariableDeclaratorId__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaratorId__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclaratorIdAccess().getIdAssignment_0()); }
(rule__VariableDeclaratorId__IdAssignment_0)
{ after(grammarAccess.getVariableDeclaratorIdAccess().getIdAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaratorId__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaratorId__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaratorId__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclaratorIdAccess().getDimsAssignment_1()); }
(rule__VariableDeclaratorId__DimsAssignment_1)?
{ after(grammarAccess.getVariableDeclaratorIdAccess().getDimsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnannClassType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnannClassType__Group__0__Impl
	rule__UnannClassType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnannClassType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnannClassTypeAccess().getClassTypeSegmentAssignment_0()); }
(rule__UnannClassType__ClassTypeSegmentAssignment_0)
{ after(grammarAccess.getUnannClassTypeAccess().getClassTypeSegmentAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnannClassType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnannClassType__Group__1__Impl
	rule__UnannClassType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnannClassType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnannClassTypeAccess().getGroup_1()); }
(rule__UnannClassType__Group_1__0)*
{ after(grammarAccess.getUnannClassTypeAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnannClassType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnannClassType__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnannClassType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnannClassTypeAccess().getGroup_2()); }
(rule__UnannClassType__Group_2__0)?
{ after(grammarAccess.getUnannClassTypeAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__UnannClassType__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnannClassType__Group_1__0__Impl
	rule__UnannClassType__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnannClassType__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnannClassTypeAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getUnannClassTypeAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnannClassType__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnannClassType__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnannClassType__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnannClassTypeAccess().getClassTypeSegmentAssignment_1_1()); }
(rule__UnannClassType__ClassTypeSegmentAssignment_1_1)
{ after(grammarAccess.getUnannClassTypeAccess().getClassTypeSegmentAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnannClassType__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnannClassType__Group_2__0__Impl
	rule__UnannClassType__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnannClassType__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnannClassTypeAccess().getFullStopKeyword_2_0()); }

	'.' 

{ after(grammarAccess.getUnannClassTypeAccess().getFullStopKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnannClassType__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnannClassType__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnannClassType__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnannClassTypeAccess().getClassTypeSegmentAssignment_2_1()); }
(rule__UnannClassType__ClassTypeSegmentAssignment_2_1)
{ after(grammarAccess.getUnannClassTypeAccess().getClassTypeSegmentAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ClassTypeSegment__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassTypeSegment__Group__0__Impl
	rule__ClassTypeSegment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassTypeSegment__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassTypeSegmentAccess().getNameAssignment_0()); }
(rule__ClassTypeSegment__NameAssignment_0)
{ after(grammarAccess.getClassTypeSegmentAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClassTypeSegment__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassTypeSegment__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassTypeSegment__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassTypeSegmentAccess().getTypeArgumentsAssignment_1()); }
(rule__ClassTypeSegment__TypeArgumentsAssignment_1)?
{ after(grammarAccess.getClassTypeSegmentAccess().getTypeArgumentsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ClassTypeSegmentWithAnnotations__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassTypeSegmentWithAnnotations__Group__0__Impl
	rule__ClassTypeSegmentWithAnnotations__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassTypeSegmentWithAnnotations__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassTypeSegmentWithAnnotationsAccess().getAnnotationsAssignment_0()); }
(rule__ClassTypeSegmentWithAnnotations__AnnotationsAssignment_0)*
{ after(grammarAccess.getClassTypeSegmentWithAnnotationsAccess().getAnnotationsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClassTypeSegmentWithAnnotations__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassTypeSegmentWithAnnotations__Group__1__Impl
	rule__ClassTypeSegmentWithAnnotations__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassTypeSegmentWithAnnotations__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassTypeSegmentWithAnnotationsAccess().getNameAssignment_1()); }
(rule__ClassTypeSegmentWithAnnotations__NameAssignment_1)
{ after(grammarAccess.getClassTypeSegmentWithAnnotationsAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClassTypeSegmentWithAnnotations__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassTypeSegmentWithAnnotations__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassTypeSegmentWithAnnotations__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassTypeSegmentWithAnnotationsAccess().getTypeArgumentsAssignment_2()); }
(rule__ClassTypeSegmentWithAnnotations__TypeArgumentsAssignment_2)?
{ after(grammarAccess.getClassTypeSegmentWithAnnotationsAccess().getTypeArgumentsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__UnannArrayType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnannArrayType__Group__0__Impl
	rule__UnannArrayType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnannArrayType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnannArrayTypeAccess().getAlternatives_0()); }
(rule__UnannArrayType__Alternatives_0)
{ after(grammarAccess.getUnannArrayTypeAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnannArrayType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnannArrayType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnannArrayType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnannArrayTypeAccess().getDimsAssignment_1()); }
(rule__UnannArrayType__DimsAssignment_1)
{ after(grammarAccess.getUnannArrayTypeAccess().getDimsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MethodDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodDeclaration__Group__0__Impl
	rule__MethodDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodDeclarationAccess().getMethodModifiersAssignment_0()); }
(rule__MethodDeclaration__MethodModifiersAssignment_0)*
{ after(grammarAccess.getMethodDeclarationAccess().getMethodModifiersAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodDeclaration__Group__1__Impl
	rule__MethodDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodDeclarationAccess().getMethodHeaderAssignment_1()); }
(rule__MethodDeclaration__MethodHeaderAssignment_1)
{ after(grammarAccess.getMethodDeclarationAccess().getMethodHeaderAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodDeclaration__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodDeclarationAccess().getMethodBodyAssignment_2()); }
(rule__MethodDeclaration__MethodBodyAssignment_2)
{ after(grammarAccess.getMethodDeclarationAccess().getMethodBodyAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MethodHeader__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodHeader__Group_0__0__Impl
	rule__MethodHeader__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodHeader__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodHeaderAccess().getResultAssignment_0_0()); }
(rule__MethodHeader__ResultAssignment_0_0)
{ after(grammarAccess.getMethodHeaderAccess().getResultAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodHeader__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodHeader__Group_0__1__Impl
	rule__MethodHeader__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodHeader__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodHeaderAccess().getMethodDeclaratorAssignment_0_1()); }
(rule__MethodHeader__MethodDeclaratorAssignment_0_1)
{ after(grammarAccess.getMethodHeaderAccess().getMethodDeclaratorAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodHeader__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodHeader__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodHeader__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodHeaderAccess().getThrows_Assignment_0_2()); }
(rule__MethodHeader__Throws_Assignment_0_2)?
{ after(grammarAccess.getMethodHeaderAccess().getThrows_Assignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MethodHeader__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodHeader__Group_1__0__Impl
	rule__MethodHeader__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodHeader__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodHeaderAccess().getTypeParametersAssignment_1_0()); }
(rule__MethodHeader__TypeParametersAssignment_1_0)
{ after(grammarAccess.getMethodHeaderAccess().getTypeParametersAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodHeader__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodHeader__Group_1__1__Impl
	rule__MethodHeader__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodHeader__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodHeaderAccess().getAnnotationsAssignment_1_1()); }
(rule__MethodHeader__AnnotationsAssignment_1_1)*
{ after(grammarAccess.getMethodHeaderAccess().getAnnotationsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodHeader__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodHeader__Group_1__2__Impl
	rule__MethodHeader__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodHeader__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodHeaderAccess().getResultAssignment_1_2()); }
(rule__MethodHeader__ResultAssignment_1_2)
{ after(grammarAccess.getMethodHeaderAccess().getResultAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodHeader__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodHeader__Group_1__3__Impl
	rule__MethodHeader__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodHeader__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodHeaderAccess().getMethodDeclaratorAssignment_1_3()); }
(rule__MethodHeader__MethodDeclaratorAssignment_1_3)
{ after(grammarAccess.getMethodHeaderAccess().getMethodDeclaratorAssignment_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodHeader__Group_1__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodHeader__Group_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodHeader__Group_1__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodHeaderAccess().getThrows_Assignment_1_4()); }
(rule__MethodHeader__Throws_Assignment_1_4)?
{ after(grammarAccess.getMethodHeaderAccess().getThrows_Assignment_1_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__MethodDeclarator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodDeclarator__Group__0__Impl
	rule__MethodDeclarator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDeclarator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodDeclaratorAccess().getNameAssignment_0()); }
(rule__MethodDeclarator__NameAssignment_0)
{ after(grammarAccess.getMethodDeclaratorAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodDeclarator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodDeclarator__Group__1__Impl
	rule__MethodDeclarator__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDeclarator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodDeclaratorAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getMethodDeclaratorAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodDeclarator__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodDeclarator__Group__2__Impl
	rule__MethodDeclarator__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDeclarator__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodDeclaratorAccess().getParametersAssignment_2()); }
(rule__MethodDeclarator__ParametersAssignment_2)?
{ after(grammarAccess.getMethodDeclaratorAccess().getParametersAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodDeclarator__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodDeclarator__Group__3__Impl
	rule__MethodDeclarator__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDeclarator__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodDeclaratorAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getMethodDeclaratorAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodDeclarator__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodDeclarator__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDeclarator__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodDeclaratorAccess().getDims_Assignment_4()); }
(rule__MethodDeclarator__Dims_Assignment_4)?
{ after(grammarAccess.getMethodDeclaratorAccess().getDims_Assignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__FormalParameterList__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FormalParameterList__Group_0__0__Impl
	rule__FormalParameterList__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameterList__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormalParameterListAccess().getParametersAssignment_0_0()); }
(rule__FormalParameterList__ParametersAssignment_0_0)
{ after(grammarAccess.getFormalParameterListAccess().getParametersAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FormalParameterList__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FormalParameterList__Group_0__1__Impl
	rule__FormalParameterList__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameterList__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormalParameterListAccess().getCommaKeyword_0_1()); }

	',' 

{ after(grammarAccess.getFormalParameterListAccess().getCommaKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FormalParameterList__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FormalParameterList__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameterList__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormalParameterListAccess().getParametersAssignment_0_2()); }
(rule__FormalParameterList__ParametersAssignment_0_2)
{ after(grammarAccess.getFormalParameterListAccess().getParametersAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FormalParameters__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FormalParameters__Group_0__0__Impl
	rule__FormalParameters__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameters__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormalParametersAccess().getParametersAssignment_0_0()); }
(rule__FormalParameters__ParametersAssignment_0_0)
{ after(grammarAccess.getFormalParametersAccess().getParametersAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FormalParameters__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FormalParameters__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameters__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormalParametersAccess().getGroup_0_1()); }
(rule__FormalParameters__Group_0_1__0)*
{ after(grammarAccess.getFormalParametersAccess().getGroup_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FormalParameters__Group_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FormalParameters__Group_0_1__0__Impl
	rule__FormalParameters__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameters__Group_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormalParametersAccess().getCommaKeyword_0_1_0()); }

	',' 

{ after(grammarAccess.getFormalParametersAccess().getCommaKeyword_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FormalParameters__Group_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FormalParameters__Group_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameters__Group_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormalParametersAccess().getParametersAssignment_0_1_1()); }
(rule__FormalParameters__ParametersAssignment_0_1_1)
{ after(grammarAccess.getFormalParametersAccess().getParametersAssignment_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FormalParameters__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FormalParameters__Group_1__0__Impl
	rule__FormalParameters__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameters__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormalParametersAccess().getParametersAssignment_1_0()); }
(rule__FormalParameters__ParametersAssignment_1_0)
{ after(grammarAccess.getFormalParametersAccess().getParametersAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FormalParameters__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FormalParameters__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameters__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormalParametersAccess().getGroup_1_1()); }
(rule__FormalParameters__Group_1_1__0)*
{ after(grammarAccess.getFormalParametersAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FormalParameters__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FormalParameters__Group_1_1__0__Impl
	rule__FormalParameters__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameters__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormalParametersAccess().getCommaKeyword_1_1_0()); }

	',' 

{ after(grammarAccess.getFormalParametersAccess().getCommaKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FormalParameters__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FormalParameters__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameters__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormalParametersAccess().getParametersAssignment_1_1_1()); }
(rule__FormalParameters__ParametersAssignment_1_1_1)
{ after(grammarAccess.getFormalParametersAccess().getParametersAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FormalParameter__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FormalParameter__Group__0__Impl
	rule__FormalParameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameter__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormalParameterAccess().getModifiersAssignment_0()); }
(rule__FormalParameter__ModifiersAssignment_0)*
{ after(grammarAccess.getFormalParameterAccess().getModifiersAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FormalParameter__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FormalParameter__Group__1__Impl
	rule__FormalParameter__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameter__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormalParameterAccess().getTypeAssignment_1()); }
(rule__FormalParameter__TypeAssignment_1)
{ after(grammarAccess.getFormalParameterAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FormalParameter__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FormalParameter__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameter__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormalParameterAccess().getNameAssignment_2()); }
(rule__FormalParameter__NameAssignment_2)
{ after(grammarAccess.getFormalParameterAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__LastFormalParameter__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LastFormalParameter__Group_0__0__Impl
	rule__LastFormalParameter__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LastFormalParameter__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLastFormalParameterAccess().getModifiersAssignment_0_0()); }
(rule__LastFormalParameter__ModifiersAssignment_0_0)*
{ after(grammarAccess.getLastFormalParameterAccess().getModifiersAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LastFormalParameter__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LastFormalParameter__Group_0__1__Impl
	rule__LastFormalParameter__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LastFormalParameter__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLastFormalParameterAccess().getTypeAssignment_0_1()); }
(rule__LastFormalParameter__TypeAssignment_0_1)
{ after(grammarAccess.getLastFormalParameterAccess().getTypeAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LastFormalParameter__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LastFormalParameter__Group_0__2__Impl
	rule__LastFormalParameter__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LastFormalParameter__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLastFormalParameterAccess().getAnnotationsAssignment_0_2()); }
(rule__LastFormalParameter__AnnotationsAssignment_0_2)*
{ after(grammarAccess.getLastFormalParameterAccess().getAnnotationsAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LastFormalParameter__Group_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LastFormalParameter__Group_0__3__Impl
	rule__LastFormalParameter__Group_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LastFormalParameter__Group_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLastFormalParameterAccess().getVarargsAssignment_0_3()); }
(rule__LastFormalParameter__VarargsAssignment_0_3)
{ after(grammarAccess.getLastFormalParameterAccess().getVarargsAssignment_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LastFormalParameter__Group_0__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LastFormalParameter__Group_0__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LastFormalParameter__Group_0__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLastFormalParameterAccess().getNameAssignment_0_4()); }
(rule__LastFormalParameter__NameAssignment_0_4)
{ after(grammarAccess.getLastFormalParameterAccess().getNameAssignment_0_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ReceiverParameter__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReceiverParameter__Group__0__Impl
	rule__ReceiverParameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReceiverParameter__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReceiverParameterAccess().getAnnotationsAssignment_0()); }
(rule__ReceiverParameter__AnnotationsAssignment_0)*
{ after(grammarAccess.getReceiverParameterAccess().getAnnotationsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReceiverParameter__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReceiverParameter__Group__1__Impl
	rule__ReceiverParameter__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ReceiverParameter__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReceiverParameterAccess().getTypeAssignment_1()); }
(rule__ReceiverParameter__TypeAssignment_1)
{ after(grammarAccess.getReceiverParameterAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReceiverParameter__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReceiverParameter__Group__2__Impl
	rule__ReceiverParameter__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ReceiverParameter__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReceiverParameterAccess().getGroup_2()); }
(rule__ReceiverParameter__Group_2__0)?
{ after(grammarAccess.getReceiverParameterAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReceiverParameter__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReceiverParameter__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReceiverParameter__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReceiverParameterAccess().getNameAssignment_3()); }
(rule__ReceiverParameter__NameAssignment_3)
{ after(grammarAccess.getReceiverParameterAccess().getNameAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ReceiverParameter__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReceiverParameter__Group_2__0__Impl
	rule__ReceiverParameter__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReceiverParameter__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReceiverParameterAccess().getQualifierAssignment_2_0()); }
(rule__ReceiverParameter__QualifierAssignment_2_0)
{ after(grammarAccess.getReceiverParameterAccess().getQualifierAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReceiverParameter__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReceiverParameter__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReceiverParameter__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReceiverParameterAccess().getFullStopKeyword_2_1()); }

	'.' 

{ after(grammarAccess.getReceiverParameterAccess().getFullStopKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Throws___Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Throws___Group__0__Impl
	rule__Throws___Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Throws___Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getThrows_Access().getThrowsKeyword_0()); }

	'throws' 

{ after(grammarAccess.getThrows_Access().getThrowsKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Throws___Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Throws___Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Throws___Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getThrows_Access().getExceptionTypeListParserRuleCall_1()); }
	ruleexceptionTypeList
{ after(grammarAccess.getThrows_Access().getExceptionTypeListParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExceptionTypeList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExceptionTypeList__Group__0__Impl
	rule__ExceptionTypeList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExceptionTypeList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExceptionTypeListAccess().getExceptionTypesAssignment_0()); }
(rule__ExceptionTypeList__ExceptionTypesAssignment_0)
{ after(grammarAccess.getExceptionTypeListAccess().getExceptionTypesAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExceptionTypeList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExceptionTypeList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExceptionTypeList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExceptionTypeListAccess().getGroup_1()); }
(rule__ExceptionTypeList__Group_1__0)*
{ after(grammarAccess.getExceptionTypeListAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExceptionTypeList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExceptionTypeList__Group_1__0__Impl
	rule__ExceptionTypeList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExceptionTypeList__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExceptionTypeListAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getExceptionTypeListAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExceptionTypeList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExceptionTypeList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExceptionTypeList__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExceptionTypeListAccess().getExceptionTypesAssignment_1_1()); }
(rule__ExceptionTypeList__ExceptionTypesAssignment_1_1)
{ after(grammarAccess.getExceptionTypeListAccess().getExceptionTypesAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MethodBody__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodBody__Group_1__0__Impl
	rule__MethodBody__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodBody__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodBodyAccess().getMethodBodyAction_1_0()); }
(

)
{ after(grammarAccess.getMethodBodyAccess().getMethodBodyAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodBody__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodBody__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodBody__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodBodyAccess().getSemicolonKeyword_1_1()); }

	';' 

{ after(grammarAccess.getMethodBodyAccess().getSemicolonKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StaticInitializer__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StaticInitializer__Group__0__Impl
	rule__StaticInitializer__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticInitializer__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStaticInitializerAccess().getStaticKeyword_0()); }

	'static' 

{ after(grammarAccess.getStaticInitializerAccess().getStaticKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StaticInitializer__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StaticInitializer__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticInitializer__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStaticInitializerAccess().getBlockParserRuleCall_1()); }
	ruleblock
{ after(grammarAccess.getStaticInitializerAccess().getBlockParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConstructorDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstructorDeclaration__Group__0__Impl
	rule__ConstructorDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorDeclarationAccess().getConstructorModifiersAssignment_0()); }
(rule__ConstructorDeclaration__ConstructorModifiersAssignment_0)*
{ after(grammarAccess.getConstructorDeclarationAccess().getConstructorModifiersAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstructorDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstructorDeclaration__Group__1__Impl
	rule__ConstructorDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorDeclarationAccess().getConstructorDeclaratorAssignment_1()); }
(rule__ConstructorDeclaration__ConstructorDeclaratorAssignment_1)
{ after(grammarAccess.getConstructorDeclarationAccess().getConstructorDeclaratorAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstructorDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstructorDeclaration__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorDeclarationAccess().getThrows_Assignment_2()); }
(rule__ConstructorDeclaration__Throws_Assignment_2)?
{ after(grammarAccess.getConstructorDeclarationAccess().getThrows_Assignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ConstructorDeclarator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstructorDeclarator__Group__0__Impl
	rule__ConstructorDeclarator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorDeclarator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorDeclaratorAccess().getTypeParametersAssignment_0()); }
(rule__ConstructorDeclarator__TypeParametersAssignment_0)?
{ after(grammarAccess.getConstructorDeclaratorAccess().getTypeParametersAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstructorDeclarator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstructorDeclarator__Group__1__Impl
	rule__ConstructorDeclarator__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorDeclarator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorDeclaratorAccess().getSimpleTypeNameAssignment_1()); }
(rule__ConstructorDeclarator__SimpleTypeNameAssignment_1)
{ after(grammarAccess.getConstructorDeclaratorAccess().getSimpleTypeNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstructorDeclarator__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstructorDeclarator__Group__2__Impl
	rule__ConstructorDeclarator__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorDeclarator__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorDeclaratorAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getConstructorDeclaratorAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstructorDeclarator__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstructorDeclarator__Group__3__Impl
	rule__ConstructorDeclarator__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorDeclarator__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorDeclaratorAccess().getFormalParameterListAssignment_3()); }
(rule__ConstructorDeclarator__FormalParameterListAssignment_3)?
{ after(grammarAccess.getConstructorDeclaratorAccess().getFormalParameterListAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstructorDeclarator__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstructorDeclarator__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorDeclarator__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorDeclaratorAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getConstructorDeclaratorAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__EnumDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumDeclaration__Group__0__Impl
	rule__EnumDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumDeclarationAccess().getModifiersAssignment_0()); }
(rule__EnumDeclaration__ModifiersAssignment_0)*
{ after(grammarAccess.getEnumDeclarationAccess().getModifiersAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumDeclaration__Group__1__Impl
	rule__EnumDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumDeclarationAccess().getEnumKeyword_1()); }

	'enum' 

{ after(grammarAccess.getEnumDeclarationAccess().getEnumKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumDeclaration__Group__2__Impl
	rule__EnumDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumDeclarationAccess().getNameAssignment_2()); }
(rule__EnumDeclaration__NameAssignment_2)
{ after(grammarAccess.getEnumDeclarationAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumDeclaration__Group__3__Impl
	rule__EnumDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumDeclarationAccess().getSuperinterfacesAssignment_3()); }
(rule__EnumDeclaration__SuperinterfacesAssignment_3)?
{ after(grammarAccess.getEnumDeclarationAccess().getSuperinterfacesAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumDeclaration__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumDeclarationAccess().getEnumBodyAssignment_4()); }
(rule__EnumDeclaration__EnumBodyAssignment_4)
{ after(grammarAccess.getEnumDeclarationAccess().getEnumBodyAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__EnumBody__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumBody__Group__0__Impl
	rule__EnumBody__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumBody__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumBodyAccess().getEnumBodyAction_0()); }
(

)
{ after(grammarAccess.getEnumBodyAccess().getEnumBodyAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumBody__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumBody__Group__1__Impl
	rule__EnumBody__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumBody__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumBodyAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getEnumBodyAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumBody__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumBody__Group__2__Impl
	rule__EnumBody__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumBody__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumBodyAccess().getEnumConstantListAssignment_2()); }
(rule__EnumBody__EnumConstantListAssignment_2)?
{ after(grammarAccess.getEnumBodyAccess().getEnumConstantListAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumBody__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumBody__Group__3__Impl
	rule__EnumBody__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumBody__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumBodyAccess().getCommaKeyword_3()); }
(
	',' 
)?
{ after(grammarAccess.getEnumBodyAccess().getCommaKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumBody__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumBody__Group__4__Impl
	rule__EnumBody__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumBody__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumBodyAccess().getEnumBodyDeclarationsAssignment_4()); }
(rule__EnumBody__EnumBodyDeclarationsAssignment_4)?
{ after(grammarAccess.getEnumBodyAccess().getEnumBodyDeclarationsAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumBody__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumBody__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumBody__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumBodyAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getEnumBodyAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__EnumConstantList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumConstantList__Group__0__Impl
	rule__EnumConstantList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumConstantList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumConstantListAccess().getEnumConstantsAssignment_0()); }
(rule__EnumConstantList__EnumConstantsAssignment_0)
{ after(grammarAccess.getEnumConstantListAccess().getEnumConstantsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumConstantList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumConstantList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumConstantList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumConstantListAccess().getGroup_1()); }
(rule__EnumConstantList__Group_1__0)*
{ after(grammarAccess.getEnumConstantListAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EnumConstantList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumConstantList__Group_1__0__Impl
	rule__EnumConstantList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumConstantList__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumConstantListAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getEnumConstantListAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumConstantList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumConstantList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumConstantList__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumConstantListAccess().getEnumConstantsAssignment_1_1()); }
(rule__EnumConstantList__EnumConstantsAssignment_1_1)
{ after(grammarAccess.getEnumConstantListAccess().getEnumConstantsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EnumConstant__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumConstant__Group__0__Impl
	rule__EnumConstant__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumConstant__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumConstantAccess().getEnumConstantModifiersAssignment_0()); }
(rule__EnumConstant__EnumConstantModifiersAssignment_0)*
{ after(grammarAccess.getEnumConstantAccess().getEnumConstantModifiersAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumConstant__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumConstant__Group__1__Impl
	rule__EnumConstant__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumConstant__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumConstantAccess().getNameAssignment_1()); }
(rule__EnumConstant__NameAssignment_1)
{ after(grammarAccess.getEnumConstantAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumConstant__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumConstant__Group__2__Impl
	rule__EnumConstant__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumConstant__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumConstantAccess().getGroup_2()); }
(rule__EnumConstant__Group_2__0)?
{ after(grammarAccess.getEnumConstantAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumConstant__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumConstant__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumConstant__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumConstantAccess().getClassBodyAssignment_3()); }
(rule__EnumConstant__ClassBodyAssignment_3)?
{ after(grammarAccess.getEnumConstantAccess().getClassBodyAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__EnumConstant__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumConstant__Group_2__0__Impl
	rule__EnumConstant__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumConstant__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumConstantAccess().getLeftParenthesisKeyword_2_0()); }

	'(' 

{ after(grammarAccess.getEnumConstantAccess().getLeftParenthesisKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumConstant__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumConstant__Group_2__1__Impl
	rule__EnumConstant__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumConstant__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumConstantAccess().getArgumentListAssignment_2_1()); }
(rule__EnumConstant__ArgumentListAssignment_2_1)?
{ after(grammarAccess.getEnumConstantAccess().getArgumentListAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumConstant__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumConstant__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumConstant__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumConstantAccess().getRightParenthesisKeyword_2_2()); }

	')' 

{ after(grammarAccess.getEnumConstantAccess().getRightParenthesisKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__EnumBodyDeclarations__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumBodyDeclarations__Group__0__Impl
	rule__EnumBodyDeclarations__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumBodyDeclarations__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumBodyDeclarationsAccess().getEnumBodyDeclarationsAction_0()); }
(

)
{ after(grammarAccess.getEnumBodyDeclarationsAccess().getEnumBodyDeclarationsAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumBodyDeclarations__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumBodyDeclarations__Group__1__Impl
	rule__EnumBodyDeclarations__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumBodyDeclarations__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumBodyDeclarationsAccess().getSemicolonKeyword_1()); }

	';' 

{ after(grammarAccess.getEnumBodyDeclarationsAccess().getSemicolonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumBodyDeclarations__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumBodyDeclarations__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumBodyDeclarations__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumBodyDeclarationsAccess().getClassBodyDeclarationsAssignment_2()); }
(rule__EnumBodyDeclarations__ClassBodyDeclarationsAssignment_2)*
{ after(grammarAccess.getEnumBodyDeclarationsAccess().getClassBodyDeclarationsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NormalInterfaceDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NormalInterfaceDeclaration__Group__0__Impl
	rule__NormalInterfaceDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalInterfaceDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalInterfaceDeclarationAccess().getInterfaceModifiersAssignment_0()); }
(rule__NormalInterfaceDeclaration__InterfaceModifiersAssignment_0)*
{ after(grammarAccess.getNormalInterfaceDeclarationAccess().getInterfaceModifiersAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NormalInterfaceDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NormalInterfaceDeclaration__Group__1__Impl
	rule__NormalInterfaceDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalInterfaceDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalInterfaceDeclarationAccess().getInterfaceKeyword_1()); }

	'interface' 

{ after(grammarAccess.getNormalInterfaceDeclarationAccess().getInterfaceKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NormalInterfaceDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NormalInterfaceDeclaration__Group__2__Impl
	rule__NormalInterfaceDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalInterfaceDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalInterfaceDeclarationAccess().getNameAssignment_2()); }
(rule__NormalInterfaceDeclaration__NameAssignment_2)
{ after(grammarAccess.getNormalInterfaceDeclarationAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NormalInterfaceDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NormalInterfaceDeclaration__Group__3__Impl
	rule__NormalInterfaceDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalInterfaceDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalInterfaceDeclarationAccess().getTypeParametersAssignment_3()); }
(rule__NormalInterfaceDeclaration__TypeParametersAssignment_3)?
{ after(grammarAccess.getNormalInterfaceDeclarationAccess().getTypeParametersAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NormalInterfaceDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NormalInterfaceDeclaration__Group__4__Impl
	rule__NormalInterfaceDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalInterfaceDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalInterfaceDeclarationAccess().getExtendsInterfacesAssignment_4()); }
(rule__NormalInterfaceDeclaration__ExtendsInterfacesAssignment_4)?
{ after(grammarAccess.getNormalInterfaceDeclarationAccess().getExtendsInterfacesAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NormalInterfaceDeclaration__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NormalInterfaceDeclaration__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalInterfaceDeclaration__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalInterfaceDeclarationAccess().getInterfaceBodyAssignment_5()); }
(rule__NormalInterfaceDeclaration__InterfaceBodyAssignment_5)
{ after(grammarAccess.getNormalInterfaceDeclarationAccess().getInterfaceBodyAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__ExtendsInterfaces__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExtendsInterfaces__Group__0__Impl
	rule__ExtendsInterfaces__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtendsInterfaces__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExtendsInterfacesAccess().getExtendsKeyword_0()); }

	'extends' 

{ after(grammarAccess.getExtendsInterfacesAccess().getExtendsKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExtendsInterfaces__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExtendsInterfaces__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtendsInterfaces__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExtendsInterfacesAccess().getInterfaceTypeListParserRuleCall_1()); }
	ruleinterfaceTypeList
{ after(grammarAccess.getExtendsInterfacesAccess().getInterfaceTypeListParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InterfaceBody__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceBody__Group__0__Impl
	rule__InterfaceBody__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceBody__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceBodyAccess().getInterfaceBodyAction_0()); }
(

)
{ after(grammarAccess.getInterfaceBodyAccess().getInterfaceBodyAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceBody__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceBody__Group__1__Impl
	rule__InterfaceBody__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceBody__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceBodyAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getInterfaceBodyAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceBody__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceBody__Group__2__Impl
	rule__InterfaceBody__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceBody__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceBodyAccess().getInterfaceMemberDeclarationsAssignment_2()); }
(rule__InterfaceBody__InterfaceMemberDeclarationsAssignment_2)*
{ after(grammarAccess.getInterfaceBodyAccess().getInterfaceMemberDeclarationsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceBody__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceBody__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceBody__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceBodyAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getInterfaceBodyAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__InterfaceMemberDeclaration__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceMemberDeclaration__Group_4__0__Impl
	rule__InterfaceMemberDeclaration__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceMemberDeclaration__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceMemberDeclarationAccess().getInterfaceMemberDeclarationAction_4_0()); }
(

)
{ after(grammarAccess.getInterfaceMemberDeclarationAccess().getInterfaceMemberDeclarationAction_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceMemberDeclaration__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceMemberDeclaration__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceMemberDeclaration__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceMemberDeclarationAccess().getSemicolonKeyword_4_1()); }

	';' 

{ after(grammarAccess.getInterfaceMemberDeclarationAccess().getSemicolonKeyword_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConstantDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstantDeclaration__Group__0__Impl
	rule__ConstantDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDeclarationAccess().getConstantModifiersAssignment_0()); }
(rule__ConstantDeclaration__ConstantModifiersAssignment_0)*
{ after(grammarAccess.getConstantDeclarationAccess().getConstantModifiersAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstantDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstantDeclaration__Group__1__Impl
	rule__ConstantDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDeclarationAccess().getUnannTypeAssignment_1()); }
(rule__ConstantDeclaration__UnannTypeAssignment_1)
{ after(grammarAccess.getConstantDeclarationAccess().getUnannTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstantDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstantDeclaration__Group__2__Impl
	rule__ConstantDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDeclarationAccess().getVariableDeclaratorListAssignment_2()); }
(rule__ConstantDeclaration__VariableDeclaratorListAssignment_2)
{ after(grammarAccess.getConstantDeclarationAccess().getVariableDeclaratorListAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstantDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstantDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDeclarationAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getConstantDeclarationAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__InterfaceMethodDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceMethodDeclaration__Group__0__Impl
	rule__InterfaceMethodDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceMethodDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceMethodDeclarationAccess().getInterfaceMethodModifiersAssignment_0()); }
(rule__InterfaceMethodDeclaration__InterfaceMethodModifiersAssignment_0)*
{ after(grammarAccess.getInterfaceMethodDeclarationAccess().getInterfaceMethodModifiersAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceMethodDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceMethodDeclaration__Group__1__Impl
	rule__InterfaceMethodDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceMethodDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceMethodDeclarationAccess().getMethodHeaderAssignment_1()); }
(rule__InterfaceMethodDeclaration__MethodHeaderAssignment_1)
{ after(grammarAccess.getInterfaceMethodDeclarationAccess().getMethodHeaderAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceMethodDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceMethodDeclaration__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceMethodDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceMethodDeclarationAccess().getMethodBodyAssignment_2()); }
(rule__InterfaceMethodDeclaration__MethodBodyAssignment_2)
{ after(grammarAccess.getInterfaceMethodDeclarationAccess().getMethodBodyAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AnnotationTypeDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnnotationTypeDeclaration__Group__0__Impl
	rule__AnnotationTypeDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationTypeDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationTypeDeclarationAccess().getInterfaceModifiersAssignment_0()); }
(rule__AnnotationTypeDeclaration__InterfaceModifiersAssignment_0)*
{ after(grammarAccess.getAnnotationTypeDeclarationAccess().getInterfaceModifiersAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AnnotationTypeDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnnotationTypeDeclaration__Group__1__Impl
	rule__AnnotationTypeDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationTypeDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationTypeDeclarationAccess().getCommercialAtKeyword_1()); }

	'@' 

{ after(grammarAccess.getAnnotationTypeDeclarationAccess().getCommercialAtKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AnnotationTypeDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnnotationTypeDeclaration__Group__2__Impl
	rule__AnnotationTypeDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationTypeDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationTypeDeclarationAccess().getInterfaceKeyword_2()); }

	'interface' 

{ after(grammarAccess.getAnnotationTypeDeclarationAccess().getInterfaceKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AnnotationTypeDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnnotationTypeDeclaration__Group__3__Impl
	rule__AnnotationTypeDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationTypeDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationTypeDeclarationAccess().getNameAssignment_3()); }
(rule__AnnotationTypeDeclaration__NameAssignment_3)
{ after(grammarAccess.getAnnotationTypeDeclarationAccess().getNameAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AnnotationTypeDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnnotationTypeDeclaration__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationTypeDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationTypeDeclarationAccess().getAnnotationTypeBodyAssignment_4()); }
(rule__AnnotationTypeDeclaration__AnnotationTypeBodyAssignment_4)
{ after(grammarAccess.getAnnotationTypeDeclarationAccess().getAnnotationTypeBodyAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__AnnotationTypeBody__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnnotationTypeBody__Group__0__Impl
	rule__AnnotationTypeBody__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationTypeBody__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationTypeBodyAccess().getAnnotationTypeBodyAction_0()); }
(

)
{ after(grammarAccess.getAnnotationTypeBodyAccess().getAnnotationTypeBodyAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AnnotationTypeBody__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnnotationTypeBody__Group__1__Impl
	rule__AnnotationTypeBody__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationTypeBody__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationTypeBodyAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getAnnotationTypeBodyAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AnnotationTypeBody__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnnotationTypeBody__Group__2__Impl
	rule__AnnotationTypeBody__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationTypeBody__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationTypeBodyAccess().getAnnotationTypeMemberDeclarationsAssignment_2()); }
(rule__AnnotationTypeBody__AnnotationTypeMemberDeclarationsAssignment_2)*
{ after(grammarAccess.getAnnotationTypeBodyAccess().getAnnotationTypeMemberDeclarationsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AnnotationTypeBody__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnnotationTypeBody__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationTypeBody__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationTypeBodyAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getAnnotationTypeBodyAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__AnnotationTypeMemberDeclaration__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnnotationTypeMemberDeclaration__Group_4__0__Impl
	rule__AnnotationTypeMemberDeclaration__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationTypeMemberDeclaration__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationTypeMemberDeclarationAccess().getAnnotationTypeMemberDeclarationAction_4_0()); }
(

)
{ after(grammarAccess.getAnnotationTypeMemberDeclarationAccess().getAnnotationTypeMemberDeclarationAction_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AnnotationTypeMemberDeclaration__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnnotationTypeMemberDeclaration__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationTypeMemberDeclaration__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationTypeMemberDeclarationAccess().getSemicolonKeyword_4_1()); }

	';' 

{ after(grammarAccess.getAnnotationTypeMemberDeclarationAccess().getSemicolonKeyword_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AnnotationTypeElementDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnnotationTypeElementDeclaration__Group__0__Impl
	rule__AnnotationTypeElementDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationTypeElementDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationTypeElementDeclarationAccess().getAnnotationTypeElementModifiersAssignment_0()); }
(rule__AnnotationTypeElementDeclaration__AnnotationTypeElementModifiersAssignment_0)*
{ after(grammarAccess.getAnnotationTypeElementDeclarationAccess().getAnnotationTypeElementModifiersAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AnnotationTypeElementDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnnotationTypeElementDeclaration__Group__1__Impl
	rule__AnnotationTypeElementDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationTypeElementDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationTypeElementDeclarationAccess().getUnannTypeAssignment_1()); }
(rule__AnnotationTypeElementDeclaration__UnannTypeAssignment_1)
{ after(grammarAccess.getAnnotationTypeElementDeclarationAccess().getUnannTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AnnotationTypeElementDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnnotationTypeElementDeclaration__Group__2__Impl
	rule__AnnotationTypeElementDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationTypeElementDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationTypeElementDeclarationAccess().getNameAssignment_2()); }
(rule__AnnotationTypeElementDeclaration__NameAssignment_2)
{ after(grammarAccess.getAnnotationTypeElementDeclarationAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AnnotationTypeElementDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnnotationTypeElementDeclaration__Group__3__Impl
	rule__AnnotationTypeElementDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationTypeElementDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationTypeElementDeclarationAccess().getLeftParenthesisKeyword_3()); }

	'(' 

{ after(grammarAccess.getAnnotationTypeElementDeclarationAccess().getLeftParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AnnotationTypeElementDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnnotationTypeElementDeclaration__Group__4__Impl
	rule__AnnotationTypeElementDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationTypeElementDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationTypeElementDeclarationAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getAnnotationTypeElementDeclarationAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AnnotationTypeElementDeclaration__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnnotationTypeElementDeclaration__Group__5__Impl
	rule__AnnotationTypeElementDeclaration__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationTypeElementDeclaration__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationTypeElementDeclarationAccess().getDimsAssignment_5()); }
(rule__AnnotationTypeElementDeclaration__DimsAssignment_5)?
{ after(grammarAccess.getAnnotationTypeElementDeclarationAccess().getDimsAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AnnotationTypeElementDeclaration__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnnotationTypeElementDeclaration__Group__6__Impl
	rule__AnnotationTypeElementDeclaration__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationTypeElementDeclaration__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationTypeElementDeclarationAccess().getDefaultValueAssignment_6()); }
(rule__AnnotationTypeElementDeclaration__DefaultValueAssignment_6)?
{ after(grammarAccess.getAnnotationTypeElementDeclarationAccess().getDefaultValueAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AnnotationTypeElementDeclaration__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnnotationTypeElementDeclaration__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationTypeElementDeclaration__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationTypeElementDeclarationAccess().getSemicolonKeyword_7()); }

	';' 

{ after(grammarAccess.getAnnotationTypeElementDeclarationAccess().getSemicolonKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__DefaultValue__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefaultValue__Group__0__Impl
	rule__DefaultValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DefaultValue__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefaultValueAccess().getDefaultKeyword_0()); }

	'default' 

{ after(grammarAccess.getDefaultValueAccess().getDefaultKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DefaultValue__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefaultValue__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DefaultValue__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefaultValueAccess().getElementValueParserRuleCall_1()); }
	ruleelementValue
{ after(grammarAccess.getDefaultValueAccess().getElementValueParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NormalAnnotation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NormalAnnotation__Group__0__Impl
	rule__NormalAnnotation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalAnnotation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalAnnotationAccess().getCommercialAtKeyword_0()); }

	'@' 

{ after(grammarAccess.getNormalAnnotationAccess().getCommercialAtKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NormalAnnotation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NormalAnnotation__Group__1__Impl
	rule__NormalAnnotation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalAnnotation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalAnnotationAccess().getTypeNameAssignment_1()); }
(rule__NormalAnnotation__TypeNameAssignment_1)
{ after(grammarAccess.getNormalAnnotationAccess().getTypeNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NormalAnnotation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NormalAnnotation__Group__2__Impl
	rule__NormalAnnotation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalAnnotation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalAnnotationAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getNormalAnnotationAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NormalAnnotation__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NormalAnnotation__Group__3__Impl
	rule__NormalAnnotation__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalAnnotation__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalAnnotationAccess().getElementValuePairListAssignment_3()); }
(rule__NormalAnnotation__ElementValuePairListAssignment_3)?
{ after(grammarAccess.getNormalAnnotationAccess().getElementValuePairListAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NormalAnnotation__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NormalAnnotation__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalAnnotation__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalAnnotationAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getNormalAnnotationAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ElementValuePairList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElementValuePairList__Group__0__Impl
	rule__ElementValuePairList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementValuePairList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementValuePairListAccess().getElementValuePairsAssignment_0()); }
(rule__ElementValuePairList__ElementValuePairsAssignment_0)
{ after(grammarAccess.getElementValuePairListAccess().getElementValuePairsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ElementValuePairList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElementValuePairList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementValuePairList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementValuePairListAccess().getGroup_1()); }
(rule__ElementValuePairList__Group_1__0)*
{ after(grammarAccess.getElementValuePairListAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ElementValuePairList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElementValuePairList__Group_1__0__Impl
	rule__ElementValuePairList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementValuePairList__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementValuePairListAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getElementValuePairListAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ElementValuePairList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElementValuePairList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementValuePairList__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementValuePairListAccess().getElementValuePairsAssignment_1_1()); }
(rule__ElementValuePairList__ElementValuePairsAssignment_1_1)
{ after(grammarAccess.getElementValuePairListAccess().getElementValuePairsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ElementValuePair__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElementValuePair__Group__0__Impl
	rule__ElementValuePair__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementValuePair__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementValuePairAccess().getNameAssignment_0()); }
(rule__ElementValuePair__NameAssignment_0)
{ after(grammarAccess.getElementValuePairAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ElementValuePair__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElementValuePair__Group__1__Impl
	rule__ElementValuePair__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementValuePair__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementValuePairAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getElementValuePairAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ElementValuePair__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElementValuePair__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementValuePair__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementValuePairAccess().getElementValueAssignment_2()); }
(rule__ElementValuePair__ElementValueAssignment_2)
{ after(grammarAccess.getElementValuePairAccess().getElementValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ElementValueArrayInitializer__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElementValueArrayInitializer__Group__0__Impl
	rule__ElementValueArrayInitializer__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementValueArrayInitializer__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementValueArrayInitializerAccess().getElementValueArrayInitializerAction_0()); }
(

)
{ after(grammarAccess.getElementValueArrayInitializerAccess().getElementValueArrayInitializerAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ElementValueArrayInitializer__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElementValueArrayInitializer__Group__1__Impl
	rule__ElementValueArrayInitializer__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementValueArrayInitializer__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementValueArrayInitializerAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getElementValueArrayInitializerAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ElementValueArrayInitializer__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElementValueArrayInitializer__Group__2__Impl
	rule__ElementValueArrayInitializer__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementValueArrayInitializer__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementValueArrayInitializerAccess().getElementValueListAssignment_2()); }
(rule__ElementValueArrayInitializer__ElementValueListAssignment_2)?
{ after(grammarAccess.getElementValueArrayInitializerAccess().getElementValueListAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ElementValueArrayInitializer__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElementValueArrayInitializer__Group__3__Impl
	rule__ElementValueArrayInitializer__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementValueArrayInitializer__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementValueArrayInitializerAccess().getCommaKeyword_3()); }
(
	',' 
)?
{ after(grammarAccess.getElementValueArrayInitializerAccess().getCommaKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ElementValueArrayInitializer__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElementValueArrayInitializer__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementValueArrayInitializer__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementValueArrayInitializerAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getElementValueArrayInitializerAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ElementValueList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElementValueList__Group__0__Impl
	rule__ElementValueList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementValueList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementValueListAccess().getElementValuesAssignment_0()); }
(rule__ElementValueList__ElementValuesAssignment_0)
{ after(grammarAccess.getElementValueListAccess().getElementValuesAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ElementValueList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElementValueList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementValueList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementValueListAccess().getGroup_1()); }
(rule__ElementValueList__Group_1__0)*
{ after(grammarAccess.getElementValueListAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ElementValueList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElementValueList__Group_1__0__Impl
	rule__ElementValueList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementValueList__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementValueListAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getElementValueListAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ElementValueList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElementValueList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementValueList__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementValueListAccess().getElementValuesAssignment_1_1()); }
(rule__ElementValueList__ElementValuesAssignment_1_1)
{ after(grammarAccess.getElementValueListAccess().getElementValuesAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MarkerAnnotation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MarkerAnnotation__Group__0__Impl
	rule__MarkerAnnotation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkerAnnotation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMarkerAnnotationAccess().getCommercialAtKeyword_0()); }

	'@' 

{ after(grammarAccess.getMarkerAnnotationAccess().getCommercialAtKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MarkerAnnotation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MarkerAnnotation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkerAnnotation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMarkerAnnotationAccess().getTypeNameAssignment_1()); }
(rule__MarkerAnnotation__TypeNameAssignment_1)
{ after(grammarAccess.getMarkerAnnotationAccess().getTypeNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SingleElementAnnotation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SingleElementAnnotation__Group__0__Impl
	rule__SingleElementAnnotation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleElementAnnotation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleElementAnnotationAccess().getCommercialAtKeyword_0()); }

	'@' 

{ after(grammarAccess.getSingleElementAnnotationAccess().getCommercialAtKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SingleElementAnnotation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SingleElementAnnotation__Group__1__Impl
	rule__SingleElementAnnotation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleElementAnnotation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleElementAnnotationAccess().getTypeNameAssignment_1()); }
(rule__SingleElementAnnotation__TypeNameAssignment_1)
{ after(grammarAccess.getSingleElementAnnotationAccess().getTypeNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SingleElementAnnotation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SingleElementAnnotation__Group__2__Impl
	rule__SingleElementAnnotation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleElementAnnotation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleElementAnnotationAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getSingleElementAnnotationAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SingleElementAnnotation__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SingleElementAnnotation__Group__3__Impl
	rule__SingleElementAnnotation__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleElementAnnotation__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleElementAnnotationAccess().getElementValueAssignment_3()); }
(rule__SingleElementAnnotation__ElementValueAssignment_3)
{ after(grammarAccess.getSingleElementAnnotationAccess().getElementValueAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SingleElementAnnotation__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SingleElementAnnotation__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleElementAnnotation__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleElementAnnotationAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getSingleElementAnnotationAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ArrayInitializer__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayInitializer__Group__0__Impl
	rule__ArrayInitializer__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitializer__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayInitializerAccess().getArrayInitializerAction_0()); }
(

)
{ after(grammarAccess.getArrayInitializerAccess().getArrayInitializerAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayInitializer__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayInitializer__Group__1__Impl
	rule__ArrayInitializer__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitializer__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayInitializerAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getArrayInitializerAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayInitializer__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayInitializer__Group__2__Impl
	rule__ArrayInitializer__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitializer__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayInitializerAccess().getVariableInitializerListAssignment_2()); }
(rule__ArrayInitializer__VariableInitializerListAssignment_2)?
{ after(grammarAccess.getArrayInitializerAccess().getVariableInitializerListAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayInitializer__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayInitializer__Group__3__Impl
	rule__ArrayInitializer__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitializer__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayInitializerAccess().getCommaKeyword_3()); }
(
	',' 
)?
{ after(grammarAccess.getArrayInitializerAccess().getCommaKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayInitializer__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayInitializer__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitializer__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayInitializerAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getArrayInitializerAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__VariableInitializerList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableInitializerList__Group__0__Impl
	rule__VariableInitializerList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableInitializerList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableInitializerListAccess().getVariableInitializerAssignment_0()); }
(rule__VariableInitializerList__VariableInitializerAssignment_0)
{ after(grammarAccess.getVariableInitializerListAccess().getVariableInitializerAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableInitializerList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableInitializerList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableInitializerList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableInitializerListAccess().getGroup_1()); }
(rule__VariableInitializerList__Group_1__0)*
{ after(grammarAccess.getVariableInitializerListAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VariableInitializerList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableInitializerList__Group_1__0__Impl
	rule__VariableInitializerList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableInitializerList__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableInitializerListAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getVariableInitializerListAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableInitializerList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableInitializerList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableInitializerList__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableInitializerListAccess().getVariableInitializerAssignment_1_1()); }
(rule__VariableInitializerList__VariableInitializerAssignment_1_1)
{ after(grammarAccess.getVariableInitializerListAccess().getVariableInitializerAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Model__TypeAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getTypeLiteralParserRuleCall_0()); }
	ruleliteral{ after(grammarAccess.getModelAccess().getTypeLiteralParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveType__AnnotationsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveTypeAccess().getAnnotationsAnnotationParserRuleCall_0_0()); }
	ruleannotation{ after(grammarAccess.getPrimitiveTypeAccess().getAnnotationsAnnotationParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveType__TypeNameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveTypeAccess().getTypeNameAlternatives_1_0()); }
(rule__PrimitiveType__TypeNameAlternatives_1_0)
{ after(grammarAccess.getPrimitiveTypeAccess().getTypeNameAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClassOrInterfaceType__ClassOrInterfaceTypeSegmentsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassOrInterfaceTypeAccess().getClassOrInterfaceTypeSegmentsClassOrInterfaceTypeSegmentParserRuleCall_0_0()); }
	ruleclassOrInterfaceTypeSegment{ after(grammarAccess.getClassOrInterfaceTypeAccess().getClassOrInterfaceTypeSegmentsClassOrInterfaceTypeSegmentParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClassOrInterfaceType__ClassOrInterfaceTypeSegmentsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassOrInterfaceTypeAccess().getClassOrInterfaceTypeSegmentsClassOrInterfaceTypeSegmentParserRuleCall_1_1_0()); }
	ruleclassOrInterfaceTypeSegment{ after(grammarAccess.getClassOrInterfaceTypeAccess().getClassOrInterfaceTypeSegmentsClassOrInterfaceTypeSegmentParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClassOrInterfaceTypeSegment__AnnotationsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassOrInterfaceTypeSegmentAccess().getAnnotationsAnnotationParserRuleCall_0_0()); }
	ruleannotation{ after(grammarAccess.getClassOrInterfaceTypeSegmentAccess().getAnnotationsAnnotationParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClassOrInterfaceTypeSegment__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassOrInterfaceTypeSegmentAccess().getNameIdentifierTerminalRuleCall_1_0()); }
	RULE_IDENTIFIER{ after(grammarAccess.getClassOrInterfaceTypeSegmentAccess().getNameIdentifierTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClassOrInterfaceTypeSegment__TypeArgumentsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassOrInterfaceTypeSegmentAccess().getTypeArgumentsTypeArgumentsParserRuleCall_2_0()); }
	ruletypeArguments{ after(grammarAccess.getClassOrInterfaceTypeSegmentAccess().getTypeArgumentsTypeArgumentsParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClassType__AnnotationsAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassTypeAccess().getAnnotationsAnnotationParserRuleCall_0_0_0()); }
	ruleannotation{ after(grammarAccess.getClassTypeAccess().getAnnotationsAnnotationParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClassType__NameAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassTypeAccess().getNameIdentifierTerminalRuleCall_0_1_0()); }
	RULE_IDENTIFIER{ after(grammarAccess.getClassTypeAccess().getNameIdentifierTerminalRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClassType__TypeArgumentsAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassTypeAccess().getTypeArgumentsTypeArgumentsParserRuleCall_0_2_0()); }
	ruletypeArguments{ after(grammarAccess.getClassTypeAccess().getTypeArgumentsTypeArgumentsParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClassType__ClassOrInterfaceTypeAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassTypeAccess().getClassOrInterfaceTypeClassOrInterfaceTypeParserRuleCall_1_0_0()); }
	ruleclassOrInterfaceType{ after(grammarAccess.getClassTypeAccess().getClassOrInterfaceTypeClassOrInterfaceTypeParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClassType__AnnotationsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassTypeAccess().getAnnotationsAnnotationParserRuleCall_1_2_0()); }
	ruleannotation{ after(grammarAccess.getClassTypeAccess().getAnnotationsAnnotationParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClassType__NameAssignment_1_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassTypeAccess().getNameIdentifierTerminalRuleCall_1_3_0()); }
	RULE_IDENTIFIER{ after(grammarAccess.getClassTypeAccess().getNameIdentifierTerminalRuleCall_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClassType__TypeArgumentsAssignment_1_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassTypeAccess().getTypeArgumentsTypeArgumentsParserRuleCall_1_4_0()); }
	ruletypeArguments{ after(grammarAccess.getClassTypeAccess().getTypeArgumentsTypeArgumentsParserRuleCall_1_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClassType_lf_classOrInterfaceType__AnnotationsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassType_lf_classOrInterfaceTypeAccess().getAnnotationsAnnotationParserRuleCall_1_0()); }
	ruleannotation{ after(grammarAccess.getClassType_lf_classOrInterfaceTypeAccess().getAnnotationsAnnotationParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClassType_lf_classOrInterfaceType__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassType_lf_classOrInterfaceTypeAccess().getNameIdentifierTerminalRuleCall_2_0()); }
	RULE_IDENTIFIER{ after(grammarAccess.getClassType_lf_classOrInterfaceTypeAccess().getNameIdentifierTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClassType_lf_classOrInterfaceType__TypeArgumentsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassType_lf_classOrInterfaceTypeAccess().getTypeArgumentsTypeArgumentsParserRuleCall_3_0()); }
	ruletypeArguments{ after(grammarAccess.getClassType_lf_classOrInterfaceTypeAccess().getTypeArgumentsTypeArgumentsParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClassType_lfno_classOrInterfaceType__AnnotationsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassType_lfno_classOrInterfaceTypeAccess().getAnnotationsAnnotationParserRuleCall_0_0()); }
	ruleannotation{ after(grammarAccess.getClassType_lfno_classOrInterfaceTypeAccess().getAnnotationsAnnotationParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClassType_lfno_classOrInterfaceType__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassType_lfno_classOrInterfaceTypeAccess().getNameIdentifierTerminalRuleCall_1_0()); }
	RULE_IDENTIFIER{ after(grammarAccess.getClassType_lfno_classOrInterfaceTypeAccess().getNameIdentifierTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClassType_lfno_classOrInterfaceType__TypeArgumentsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassType_lfno_classOrInterfaceTypeAccess().getTypeArgumentsTypeArgumentsParserRuleCall_2_0()); }
	ruletypeArguments{ after(grammarAccess.getClassType_lfno_classOrInterfaceTypeAccess().getTypeArgumentsTypeArgumentsParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeVariable__AnnotationsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeVariableAccess().getAnnotationsAnnotationParserRuleCall_0_0()); }
	ruleannotation{ after(grammarAccess.getTypeVariableAccess().getAnnotationsAnnotationParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeVariable__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeVariableAccess().getNameIdentifierTerminalRuleCall_1_0()); }
	RULE_IDENTIFIER{ after(grammarAccess.getTypeVariableAccess().getNameIdentifierTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayType__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayTypeAccess().getTypeAlternatives_0_0()); }
(rule__ArrayType__TypeAlternatives_0_0)
{ after(grammarAccess.getArrayTypeAccess().getTypeAlternatives_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayType__DimsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayTypeAccess().getDimsDimsParserRuleCall_1_0()); }
	ruledims{ after(grammarAccess.getArrayTypeAccess().getDimsDimsParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Dims__DimsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDimsAccess().getDimsDimParserRuleCall_0_0()); }
	ruledim{ after(grammarAccess.getDimsAccess().getDimsDimParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Dims__DimsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDimsAccess().getDimsDimParserRuleCall_1_0()); }
	ruledim{ after(grammarAccess.getDimsAccess().getDimsDimParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Dim__AnnotationsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDimAccess().getAnnotationsAnnotationParserRuleCall_1_0()); }
	ruleannotation{ after(grammarAccess.getDimAccess().getAnnotationsAnnotationParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameter__TypeParameterModifiersAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParameterAccess().getTypeParameterModifiersTypeParameterModifierParserRuleCall_0_0()); }
	ruletypeParameterModifier{ after(grammarAccess.getTypeParameterAccess().getTypeParameterModifiersTypeParameterModifierParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameter__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParameterAccess().getNameIdentifierTerminalRuleCall_1_0()); }
	RULE_IDENTIFIER{ after(grammarAccess.getTypeParameterAccess().getNameIdentifierTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameter__TypeBoundAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParameterAccess().getTypeBoundTypeBoundParserRuleCall_2_0()); }
	ruletypeBound{ after(grammarAccess.getTypeParameterAccess().getTypeBoundTypeBoundParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeBound__TypeVariableAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeBoundAccess().getTypeVariableTypeVariableParserRuleCall_0_1_0()); }
	ruletypeVariable{ after(grammarAccess.getTypeBoundAccess().getTypeVariableTypeVariableParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeBound__ClassOrInterfaceTypeAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeBoundAccess().getClassOrInterfaceTypeClassOrInterfaceTypeParserRuleCall_1_1_0()); }
	ruleclassOrInterfaceType{ after(grammarAccess.getTypeBoundAccess().getClassOrInterfaceTypeClassOrInterfaceTypeParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeBound__AdditionalBoundAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeBoundAccess().getAdditionalBoundAdditionalBoundParserRuleCall_1_2_0()); }
	ruleadditionalBound{ after(grammarAccess.getTypeBoundAccess().getAdditionalBoundAdditionalBoundParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeArgumentList__TypeArgumentsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeArgumentListAccess().getTypeArgumentsTypeArgumentParserRuleCall_0_0()); }
	ruletypeArgument{ after(grammarAccess.getTypeArgumentListAccess().getTypeArgumentsTypeArgumentParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeArgumentList__TypeArgumentsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeArgumentListAccess().getTypeArgumentsTypeArgumentParserRuleCall_1_1_0()); }
	ruletypeArgument{ after(grammarAccess.getTypeArgumentListAccess().getTypeArgumentsTypeArgumentParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Wildcard__AnnotationsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWildcardAccess().getAnnotationsAnnotationParserRuleCall_1_0()); }
	ruleannotation{ after(grammarAccess.getWildcardAccess().getAnnotationsAnnotationParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Wildcard__WildcardBoundsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWildcardAccess().getWildcardBoundsWildcardBoundsParserRuleCall_3_0()); }
	rulewildcardBounds{ after(grammarAccess.getWildcardAccess().getWildcardBoundsWildcardBoundsParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__PackageDeclaration__ModifiersAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDeclarationAccess().getModifiersPackageModifierParserRuleCall_0_0()); }
	rulepackageModifier{ after(grammarAccess.getPackageDeclarationAccess().getModifiersPackageModifierParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDeclarationAccess().getNamePackageNameParserRuleCall_2_0()); }
	rulepackageName{ after(grammarAccess.getPackageDeclarationAccess().getNamePackageNameParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SingleTypeImportDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleTypeImportDeclarationAccess().getNameTypeNameParserRuleCall_1_0()); }
	ruletypeName{ after(grammarAccess.getSingleTypeImportDeclarationAccess().getNameTypeNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeImportOnDemandDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeImportOnDemandDeclarationAccess().getNamePackageOrTypeNameParserRuleCall_1_0()); }
	rulepackageOrTypeName{ after(grammarAccess.getTypeImportOnDemandDeclarationAccess().getNamePackageOrTypeNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SingleStaticImportDeclaration__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleStaticImportDeclarationAccess().getNameTypeNameParserRuleCall_2_0()); }
	ruletypeName{ after(grammarAccess.getSingleStaticImportDeclarationAccess().getNameTypeNameParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StaticImportOnDemandDeclaration__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStaticImportOnDemandDeclarationAccess().getNameTypeNameParserRuleCall_2_0()); }
	ruletypeName{ after(grammarAccess.getStaticImportOnDemandDeclarationAccess().getNameTypeNameParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NormalClassDeclaration__ModifiersAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalClassDeclarationAccess().getModifiersClassModifierParserRuleCall_0_0()); }
	ruleclassModifier{ after(grammarAccess.getNormalClassDeclarationAccess().getModifiersClassModifierParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NormalClassDeclaration__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalClassDeclarationAccess().getNameIdentifierTerminalRuleCall_2_0()); }
	RULE_IDENTIFIER{ after(grammarAccess.getNormalClassDeclarationAccess().getNameIdentifierTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NormalClassDeclaration__TypeParametersAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalClassDeclarationAccess().getTypeParametersTypeParametersParserRuleCall_3_0()); }
	ruletypeParameters{ after(grammarAccess.getNormalClassDeclarationAccess().getTypeParametersTypeParametersParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NormalClassDeclaration__SuperclassAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalClassDeclarationAccess().getSuperclassSuperclassParserRuleCall_4_0()); }
	rulesuperclass{ after(grammarAccess.getNormalClassDeclarationAccess().getSuperclassSuperclassParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NormalClassDeclaration__SuperinterfacesAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalClassDeclarationAccess().getSuperinterfacesSuperinterfacesParserRuleCall_5_0()); }
	rulesuperinterfaces{ after(grammarAccess.getNormalClassDeclarationAccess().getSuperinterfacesSuperinterfacesParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NormalClassDeclaration__ClassBodyAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalClassDeclarationAccess().getClassBodyClassBodyParserRuleCall_6_0()); }
	ruleclassBody{ after(grammarAccess.getNormalClassDeclarationAccess().getClassBodyClassBodyParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JavaClassModifier__ModifierAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJavaClassModifierAccess().getModifierClassModifiersEnumRuleCall_0()); }
	ruleClassModifiers{ after(grammarAccess.getJavaClassModifierAccess().getModifierClassModifiersEnumRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameterList__TypeParametersAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParameterListAccess().getTypeParametersTypeParameterParserRuleCall_0_0()); }
	ruletypeParameter{ after(grammarAccess.getTypeParameterListAccess().getTypeParametersTypeParameterParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameterList__TypeParametersAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParameterListAccess().getTypeParametersTypeParameterParserRuleCall_1_1_0()); }
	ruletypeParameter{ after(grammarAccess.getTypeParameterListAccess().getTypeParametersTypeParameterParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceTypeList__InterfaceTypesAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceTypeListAccess().getInterfaceTypesInterfaceTypeParserRuleCall_0_0()); }
	ruleinterfaceType{ after(grammarAccess.getInterfaceTypeListAccess().getInterfaceTypesInterfaceTypeParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceTypeList__InterfaceTypesAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceTypeListAccess().getInterfaceTypesInterfaceTypeParserRuleCall_1_1_0()); }
	ruleinterfaceType{ after(grammarAccess.getInterfaceTypeListAccess().getInterfaceTypesInterfaceTypeParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClassBody__DeclarationsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassBodyAccess().getDeclarationsClassBodyDeclarationParserRuleCall_2_0()); }
	ruleclassBodyDeclaration{ after(grammarAccess.getClassBodyAccess().getDeclarationsClassBodyDeclarationParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FieldDeclaration__FieldModifiersAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldDeclarationAccess().getFieldModifiersFieldModifierParserRuleCall_0_0()); }
	rulefieldModifier{ after(grammarAccess.getFieldDeclarationAccess().getFieldModifiersFieldModifierParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FieldDeclaration__UnannTypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldDeclarationAccess().getUnannTypeUnannTypeParserRuleCall_1_0()); }
	ruleunannType{ after(grammarAccess.getFieldDeclarationAccess().getUnannTypeUnannTypeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FieldDeclaration__VariableDeclaratorListAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldDeclarationAccess().getVariableDeclaratorListVariableDeclaratorListParserRuleCall_2_0()); }
	rulevariableDeclaratorList{ after(grammarAccess.getFieldDeclarationAccess().getVariableDeclaratorListVariableDeclaratorListParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JavaFieldModifier__ModifierAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJavaFieldModifierAccess().getModifierFieldModifiersEnumRuleCall_0()); }
	ruleFieldModifiers{ after(grammarAccess.getJavaFieldModifierAccess().getModifierFieldModifiersEnumRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaratorList__VariableDeclaratorsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclaratorListAccess().getVariableDeclaratorsVariableDeclaratorParserRuleCall_0_0()); }
	rulevariableDeclarator{ after(grammarAccess.getVariableDeclaratorListAccess().getVariableDeclaratorsVariableDeclaratorParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaratorList__VariableDeclaratorsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclaratorListAccess().getVariableDeclaratorsVariableDeclaratorParserRuleCall_1_1_0()); }
	rulevariableDeclarator{ after(grammarAccess.getVariableDeclaratorListAccess().getVariableDeclaratorsVariableDeclaratorParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclarator__IdAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclaratorAccess().getIdVariableDeclaratorIdParserRuleCall_0_0()); }
	rulevariableDeclaratorId{ after(grammarAccess.getVariableDeclaratorAccess().getIdVariableDeclaratorIdParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclarator__InitializerAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclaratorAccess().getInitializerVariableInitializerParserRuleCall_1_1_0()); }
	rulevariableInitializer{ after(grammarAccess.getVariableDeclaratorAccess().getInitializerVariableInitializerParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaratorId__IdAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclaratorIdAccess().getIdIdentifierTerminalRuleCall_0_0()); }
	RULE_IDENTIFIER{ after(grammarAccess.getVariableDeclaratorIdAccess().getIdIdentifierTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaratorId__DimsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclaratorIdAccess().getDimsDimsParserRuleCall_1_0()); }
	ruledims{ after(grammarAccess.getVariableDeclaratorIdAccess().getDimsDimsParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnannPrimitiveType__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnannPrimitiveTypeAccess().getNameAlternatives_0()); }
(rule__UnannPrimitiveType__NameAlternatives_0)
{ after(grammarAccess.getUnannPrimitiveTypeAccess().getNameAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnannClassType__ClassTypeSegmentAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnannClassTypeAccess().getClassTypeSegmentClassTypeSegmentParserRuleCall_0_0()); }
	ruleClassTypeSegment{ after(grammarAccess.getUnannClassTypeAccess().getClassTypeSegmentClassTypeSegmentParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnannClassType__ClassTypeSegmentAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnannClassTypeAccess().getClassTypeSegmentClassTypeSegmentParserRuleCall_1_1_0()); }
	ruleClassTypeSegment{ after(grammarAccess.getUnannClassTypeAccess().getClassTypeSegmentClassTypeSegmentParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnannClassType__ClassTypeSegmentAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnannClassTypeAccess().getClassTypeSegmentClassTypeSegmentWithAnnotationsParserRuleCall_2_1_0()); }
	ruleClassTypeSegmentWithAnnotations{ after(grammarAccess.getUnannClassTypeAccess().getClassTypeSegmentClassTypeSegmentWithAnnotationsParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClassTypeSegment__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassTypeSegmentAccess().getNameIdentifierTerminalRuleCall_0_0()); }
	RULE_IDENTIFIER{ after(grammarAccess.getClassTypeSegmentAccess().getNameIdentifierTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClassTypeSegment__TypeArgumentsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassTypeSegmentAccess().getTypeArgumentsTypeArgumentsParserRuleCall_1_0()); }
	ruletypeArguments{ after(grammarAccess.getClassTypeSegmentAccess().getTypeArgumentsTypeArgumentsParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClassTypeSegmentWithAnnotations__AnnotationsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassTypeSegmentWithAnnotationsAccess().getAnnotationsAnnotationParserRuleCall_0_0()); }
	ruleannotation{ after(grammarAccess.getClassTypeSegmentWithAnnotationsAccess().getAnnotationsAnnotationParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClassTypeSegmentWithAnnotations__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassTypeSegmentWithAnnotationsAccess().getNameIdentifierTerminalRuleCall_1_0()); }
	RULE_IDENTIFIER{ after(grammarAccess.getClassTypeSegmentWithAnnotationsAccess().getNameIdentifierTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClassTypeSegmentWithAnnotations__TypeArgumentsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassTypeSegmentWithAnnotationsAccess().getTypeArgumentsTypeArgumentsParserRuleCall_2_0()); }
	ruletypeArguments{ after(grammarAccess.getClassTypeSegmentWithAnnotationsAccess().getTypeArgumentsTypeArgumentsParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnannTypeVariable__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnannTypeVariableAccess().getNameIdentifierTerminalRuleCall_0()); }
	RULE_IDENTIFIER{ after(grammarAccess.getUnannTypeVariableAccess().getNameIdentifierTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnannArrayType__DimsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnannArrayTypeAccess().getDimsDimsParserRuleCall_1_0()); }
	ruledims{ after(grammarAccess.getUnannArrayTypeAccess().getDimsDimsParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDeclaration__MethodModifiersAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodDeclarationAccess().getMethodModifiersMethodModifierParserRuleCall_0_0()); }
	rulemethodModifier{ after(grammarAccess.getMethodDeclarationAccess().getMethodModifiersMethodModifierParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDeclaration__MethodHeaderAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodDeclarationAccess().getMethodHeaderMethodHeaderParserRuleCall_1_0()); }
	rulemethodHeader{ after(grammarAccess.getMethodDeclarationAccess().getMethodHeaderMethodHeaderParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDeclaration__MethodBodyAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodDeclarationAccess().getMethodBodyMethodBodyParserRuleCall_2_0()); }
	rulemethodBody{ after(grammarAccess.getMethodDeclarationAccess().getMethodBodyMethodBodyParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JavaMethodModifier__ModifierAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJavaMethodModifierAccess().getModifierMethodModifiersEnumRuleCall_0()); }
	rulemethodModifiers{ after(grammarAccess.getJavaMethodModifierAccess().getModifierMethodModifiersEnumRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodHeader__ResultAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodHeaderAccess().getResultResultParserRuleCall_0_0_0()); }
	ruleresult{ after(grammarAccess.getMethodHeaderAccess().getResultResultParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodHeader__MethodDeclaratorAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodHeaderAccess().getMethodDeclaratorMethodDeclaratorParserRuleCall_0_1_0()); }
	rulemethodDeclarator{ after(grammarAccess.getMethodHeaderAccess().getMethodDeclaratorMethodDeclaratorParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodHeader__Throws_Assignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodHeaderAccess().getThrows_Throws_ParserRuleCall_0_2_0()); }
	rulethrows_{ after(grammarAccess.getMethodHeaderAccess().getThrows_Throws_ParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodHeader__TypeParametersAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodHeaderAccess().getTypeParametersTypeParametersParserRuleCall_1_0_0()); }
	ruletypeParameters{ after(grammarAccess.getMethodHeaderAccess().getTypeParametersTypeParametersParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodHeader__AnnotationsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodHeaderAccess().getAnnotationsAnnotationParserRuleCall_1_1_0()); }
	ruleannotation{ after(grammarAccess.getMethodHeaderAccess().getAnnotationsAnnotationParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodHeader__ResultAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodHeaderAccess().getResultResultParserRuleCall_1_2_0()); }
	ruleresult{ after(grammarAccess.getMethodHeaderAccess().getResultResultParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodHeader__MethodDeclaratorAssignment_1_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodHeaderAccess().getMethodDeclaratorMethodDeclaratorParserRuleCall_1_3_0()); }
	rulemethodDeclarator{ after(grammarAccess.getMethodHeaderAccess().getMethodDeclaratorMethodDeclaratorParserRuleCall_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodHeader__Throws_Assignment_1_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodHeaderAccess().getThrows_Throws_ParserRuleCall_1_4_0()); }
	rulethrows_{ after(grammarAccess.getMethodHeaderAccess().getThrows_Throws_ParserRuleCall_1_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VoidType__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVoidTypeAccess().getNameVoidKeyword_0()); }
(
{ before(grammarAccess.getVoidTypeAccess().getNameVoidKeyword_0()); }

	'void' 

{ after(grammarAccess.getVoidTypeAccess().getNameVoidKeyword_0()); }
)

{ after(grammarAccess.getVoidTypeAccess().getNameVoidKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDeclarator__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodDeclaratorAccess().getNameIdentifierTerminalRuleCall_0_0()); }
	RULE_IDENTIFIER{ after(grammarAccess.getMethodDeclaratorAccess().getNameIdentifierTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDeclarator__ParametersAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodDeclaratorAccess().getParametersFormalParameterListParserRuleCall_2_0()); }
	ruleformalParameterList{ after(grammarAccess.getMethodDeclaratorAccess().getParametersFormalParameterListParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDeclarator__Dims_Assignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodDeclaratorAccess().getDims_DimsParserRuleCall_4_0()); }
	ruledims{ after(grammarAccess.getMethodDeclaratorAccess().getDims_DimsParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameterList__ParametersAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormalParameterListAccess().getParametersFormalParametersParserRuleCall_0_0_0()); }
	ruleformalParameters{ after(grammarAccess.getFormalParameterListAccess().getParametersFormalParametersParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameterList__ParametersAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormalParameterListAccess().getParametersLastFormalParameterParserRuleCall_0_2_0()); }
	rulelastFormalParameter{ after(grammarAccess.getFormalParameterListAccess().getParametersLastFormalParameterParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameterList__ParametersAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormalParameterListAccess().getParametersLastFormalParameterParserRuleCall_1_0()); }
	rulelastFormalParameter{ after(grammarAccess.getFormalParameterListAccess().getParametersLastFormalParameterParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameters__ParametersAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormalParametersAccess().getParametersFormalParameterParserRuleCall_0_0_0()); }
	ruleformalParameter{ after(grammarAccess.getFormalParametersAccess().getParametersFormalParameterParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameters__ParametersAssignment_0_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormalParametersAccess().getParametersFormalParameterParserRuleCall_0_1_1_0()); }
	ruleformalParameter{ after(grammarAccess.getFormalParametersAccess().getParametersFormalParameterParserRuleCall_0_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameters__ParametersAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormalParametersAccess().getParametersReceiverParameterParserRuleCall_1_0_0()); }
	rulereceiverParameter{ after(grammarAccess.getFormalParametersAccess().getParametersReceiverParameterParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameters__ParametersAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormalParametersAccess().getParametersFormalParameterParserRuleCall_1_1_1_0()); }
	ruleformalParameter{ after(grammarAccess.getFormalParametersAccess().getParametersFormalParameterParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameter__ModifiersAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormalParameterAccess().getModifiersVariableModifierParserRuleCall_0_0()); }
	rulevariableModifier{ after(grammarAccess.getFormalParameterAccess().getModifiersVariableModifierParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameter__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormalParameterAccess().getTypeUnannTypeParserRuleCall_1_0()); }
	ruleunannType{ after(grammarAccess.getFormalParameterAccess().getTypeUnannTypeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameter__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormalParameterAccess().getNameVariableDeclaratorIdParserRuleCall_2_0()); }
	rulevariableDeclaratorId{ after(grammarAccess.getFormalParameterAccess().getNameVariableDeclaratorIdParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JavaVariableModifier__ModifierAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJavaVariableModifierAccess().getModifierVariableModifiersEnumRuleCall_0()); }
	ruleVariableModifiers{ after(grammarAccess.getJavaVariableModifierAccess().getModifierVariableModifiersEnumRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LastFormalParameter__ModifiersAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLastFormalParameterAccess().getModifiersVariableModifierParserRuleCall_0_0_0()); }
	rulevariableModifier{ after(grammarAccess.getLastFormalParameterAccess().getModifiersVariableModifierParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LastFormalParameter__TypeAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLastFormalParameterAccess().getTypeUnannTypeParserRuleCall_0_1_0()); }
	ruleunannType{ after(grammarAccess.getLastFormalParameterAccess().getTypeUnannTypeParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LastFormalParameter__AnnotationsAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLastFormalParameterAccess().getAnnotationsAnnotationParserRuleCall_0_2_0()); }
	ruleannotation{ after(grammarAccess.getLastFormalParameterAccess().getAnnotationsAnnotationParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LastFormalParameter__VarargsAssignment_0_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLastFormalParameterAccess().getVarargsFullStopFullStopFullStopKeyword_0_3_0()); }
(
{ before(grammarAccess.getLastFormalParameterAccess().getVarargsFullStopFullStopFullStopKeyword_0_3_0()); }

	'...' 

{ after(grammarAccess.getLastFormalParameterAccess().getVarargsFullStopFullStopFullStopKeyword_0_3_0()); }
)

{ after(grammarAccess.getLastFormalParameterAccess().getVarargsFullStopFullStopFullStopKeyword_0_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LastFormalParameter__NameAssignment_0_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLastFormalParameterAccess().getNameVariableDeclaratorIdParserRuleCall_0_4_0()); }
	rulevariableDeclaratorId{ after(grammarAccess.getLastFormalParameterAccess().getNameVariableDeclaratorIdParserRuleCall_0_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReceiverParameter__AnnotationsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReceiverParameterAccess().getAnnotationsAnnotationParserRuleCall_0_0()); }
	ruleannotation{ after(grammarAccess.getReceiverParameterAccess().getAnnotationsAnnotationParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReceiverParameter__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReceiverParameterAccess().getTypeUnannTypeParserRuleCall_1_0()); }
	ruleunannType{ after(grammarAccess.getReceiverParameterAccess().getTypeUnannTypeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReceiverParameter__QualifierAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReceiverParameterAccess().getQualifierIdentifierTerminalRuleCall_2_0_0()); }
	RULE_IDENTIFIER{ after(grammarAccess.getReceiverParameterAccess().getQualifierIdentifierTerminalRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReceiverParameter__NameAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReceiverParameterAccess().getNameThisKeyword_3_0()); }
(
{ before(grammarAccess.getReceiverParameterAccess().getNameThisKeyword_3_0()); }

	'this' 

{ after(grammarAccess.getReceiverParameterAccess().getNameThisKeyword_3_0()); }
)

{ after(grammarAccess.getReceiverParameterAccess().getNameThisKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExceptionTypeList__ExceptionTypesAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExceptionTypeListAccess().getExceptionTypesExceptionTypeParserRuleCall_0_0()); }
	ruleexceptionType{ after(grammarAccess.getExceptionTypeListAccess().getExceptionTypesExceptionTypeParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExceptionTypeList__ExceptionTypesAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExceptionTypeListAccess().getExceptionTypesExceptionTypeParserRuleCall_1_1_0()); }
	ruleexceptionType{ after(grammarAccess.getExceptionTypeListAccess().getExceptionTypesExceptionTypeParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorDeclaration__ConstructorModifiersAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorDeclarationAccess().getConstructorModifiersConstructorModifierParserRuleCall_0_0()); }
	ruleconstructorModifier{ after(grammarAccess.getConstructorDeclarationAccess().getConstructorModifiersConstructorModifierParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorDeclaration__ConstructorDeclaratorAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorDeclarationAccess().getConstructorDeclaratorConstructorDeclaratorParserRuleCall_1_0()); }
	ruleconstructorDeclarator{ after(grammarAccess.getConstructorDeclarationAccess().getConstructorDeclaratorConstructorDeclaratorParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorDeclaration__Throws_Assignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorDeclarationAccess().getThrows_Throws_ParserRuleCall_2_0()); }
	rulethrows_{ after(grammarAccess.getConstructorDeclarationAccess().getThrows_Throws_ParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JavaConstructorModifier__ModifierAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJavaConstructorModifierAccess().getModifierConstructorModifiersEnumRuleCall_0()); }
	ruleConstructorModifiers{ after(grammarAccess.getJavaConstructorModifierAccess().getModifierConstructorModifiersEnumRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorDeclarator__TypeParametersAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorDeclaratorAccess().getTypeParametersTypeParametersParserRuleCall_0_0()); }
	ruletypeParameters{ after(grammarAccess.getConstructorDeclaratorAccess().getTypeParametersTypeParametersParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorDeclarator__SimpleTypeNameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorDeclaratorAccess().getSimpleTypeNameSimpleTypeNameParserRuleCall_1_0()); }
	rulesimpleTypeName{ after(grammarAccess.getConstructorDeclaratorAccess().getSimpleTypeNameSimpleTypeNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorDeclarator__FormalParameterListAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorDeclaratorAccess().getFormalParameterListFormalParameterListParserRuleCall_3_0()); }
	ruleformalParameterList{ after(grammarAccess.getConstructorDeclaratorAccess().getFormalParameterListFormalParameterListParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumDeclaration__ModifiersAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumDeclarationAccess().getModifiersClassModifierParserRuleCall_0_0()); }
	ruleclassModifier{ after(grammarAccess.getEnumDeclarationAccess().getModifiersClassModifierParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumDeclaration__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumDeclarationAccess().getNameIdentifierTerminalRuleCall_2_0()); }
	RULE_IDENTIFIER{ after(grammarAccess.getEnumDeclarationAccess().getNameIdentifierTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumDeclaration__SuperinterfacesAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumDeclarationAccess().getSuperinterfacesSuperinterfacesParserRuleCall_3_0()); }
	rulesuperinterfaces{ after(grammarAccess.getEnumDeclarationAccess().getSuperinterfacesSuperinterfacesParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumDeclaration__EnumBodyAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumDeclarationAccess().getEnumBodyEnumBodyParserRuleCall_4_0()); }
	ruleenumBody{ after(grammarAccess.getEnumDeclarationAccess().getEnumBodyEnumBodyParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumBody__EnumConstantListAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumBodyAccess().getEnumConstantListEnumConstantListParserRuleCall_2_0()); }
	ruleenumConstantList{ after(grammarAccess.getEnumBodyAccess().getEnumConstantListEnumConstantListParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumBody__EnumBodyDeclarationsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumBodyAccess().getEnumBodyDeclarationsEnumBodyDeclarationsParserRuleCall_4_0()); }
	ruleenumBodyDeclarations{ after(grammarAccess.getEnumBodyAccess().getEnumBodyDeclarationsEnumBodyDeclarationsParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumConstantList__EnumConstantsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumConstantListAccess().getEnumConstantsEnumConstantParserRuleCall_0_0()); }
	ruleenumConstant{ after(grammarAccess.getEnumConstantListAccess().getEnumConstantsEnumConstantParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumConstantList__EnumConstantsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumConstantListAccess().getEnumConstantsEnumConstantParserRuleCall_1_1_0()); }
	ruleenumConstant{ after(grammarAccess.getEnumConstantListAccess().getEnumConstantsEnumConstantParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumConstant__EnumConstantModifiersAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumConstantAccess().getEnumConstantModifiersEnumConstantModifierParserRuleCall_0_0()); }
	ruleenumConstantModifier{ after(grammarAccess.getEnumConstantAccess().getEnumConstantModifiersEnumConstantModifierParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumConstant__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumConstantAccess().getNameIdentifierTerminalRuleCall_1_0()); }
	RULE_IDENTIFIER{ after(grammarAccess.getEnumConstantAccess().getNameIdentifierTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumConstant__ArgumentListAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumConstantAccess().getArgumentListArgumentListParserRuleCall_2_1_0()); }
	ruleargumentList{ after(grammarAccess.getEnumConstantAccess().getArgumentListArgumentListParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumConstant__ClassBodyAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumConstantAccess().getClassBodyClassBodyParserRuleCall_3_0()); }
	ruleclassBody{ after(grammarAccess.getEnumConstantAccess().getClassBodyClassBodyParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumBodyDeclarations__ClassBodyDeclarationsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumBodyDeclarationsAccess().getClassBodyDeclarationsClassBodyDeclarationParserRuleCall_2_0()); }
	ruleclassBodyDeclaration{ after(grammarAccess.getEnumBodyDeclarationsAccess().getClassBodyDeclarationsClassBodyDeclarationParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NormalInterfaceDeclaration__InterfaceModifiersAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalInterfaceDeclarationAccess().getInterfaceModifiersInterfaceModifierParserRuleCall_0_0()); }
	ruleinterfaceModifier{ after(grammarAccess.getNormalInterfaceDeclarationAccess().getInterfaceModifiersInterfaceModifierParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NormalInterfaceDeclaration__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalInterfaceDeclarationAccess().getNameIdentifierTerminalRuleCall_2_0()); }
	RULE_IDENTIFIER{ after(grammarAccess.getNormalInterfaceDeclarationAccess().getNameIdentifierTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NormalInterfaceDeclaration__TypeParametersAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalInterfaceDeclarationAccess().getTypeParametersTypeParametersParserRuleCall_3_0()); }
	ruletypeParameters{ after(grammarAccess.getNormalInterfaceDeclarationAccess().getTypeParametersTypeParametersParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NormalInterfaceDeclaration__ExtendsInterfacesAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalInterfaceDeclarationAccess().getExtendsInterfacesExtendsInterfacesParserRuleCall_4_0()); }
	ruleextendsInterfaces{ after(grammarAccess.getNormalInterfaceDeclarationAccess().getExtendsInterfacesExtendsInterfacesParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NormalInterfaceDeclaration__InterfaceBodyAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalInterfaceDeclarationAccess().getInterfaceBodyInterfaceBodyParserRuleCall_5_0()); }
	ruleinterfaceBody{ after(grammarAccess.getNormalInterfaceDeclarationAccess().getInterfaceBodyInterfaceBodyParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JavaInterfaceModifier__ModifierAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJavaInterfaceModifierAccess().getModifierInterfaceModifiersEnumRuleCall_0()); }
	ruleInterfaceModifiers{ after(grammarAccess.getJavaInterfaceModifierAccess().getModifierInterfaceModifiersEnumRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceBody__InterfaceMemberDeclarationsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceBodyAccess().getInterfaceMemberDeclarationsInterfaceMemberDeclarationParserRuleCall_2_0()); }
	ruleinterfaceMemberDeclaration{ after(grammarAccess.getInterfaceBodyAccess().getInterfaceMemberDeclarationsInterfaceMemberDeclarationParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDeclaration__ConstantModifiersAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDeclarationAccess().getConstantModifiersConstantModifierParserRuleCall_0_0()); }
	ruleconstantModifier{ after(grammarAccess.getConstantDeclarationAccess().getConstantModifiersConstantModifierParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDeclaration__UnannTypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDeclarationAccess().getUnannTypeUnannTypeParserRuleCall_1_0()); }
	ruleunannType{ after(grammarAccess.getConstantDeclarationAccess().getUnannTypeUnannTypeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDeclaration__VariableDeclaratorListAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDeclarationAccess().getVariableDeclaratorListVariableDeclaratorListParserRuleCall_2_0()); }
	rulevariableDeclaratorList{ after(grammarAccess.getConstantDeclarationAccess().getVariableDeclaratorListVariableDeclaratorListParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JavaConstantModifier__ModifierAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJavaConstantModifierAccess().getModifierConstantModifiersEnumRuleCall_0()); }
	ruleConstantModifiers{ after(grammarAccess.getJavaConstantModifierAccess().getModifierConstantModifiersEnumRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceMethodDeclaration__InterfaceMethodModifiersAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceMethodDeclarationAccess().getInterfaceMethodModifiersInterfaceMethodModifierParserRuleCall_0_0()); }
	ruleinterfaceMethodModifier{ after(grammarAccess.getInterfaceMethodDeclarationAccess().getInterfaceMethodModifiersInterfaceMethodModifierParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceMethodDeclaration__MethodHeaderAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceMethodDeclarationAccess().getMethodHeaderMethodHeaderParserRuleCall_1_0()); }
	rulemethodHeader{ after(grammarAccess.getInterfaceMethodDeclarationAccess().getMethodHeaderMethodHeaderParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceMethodDeclaration__MethodBodyAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceMethodDeclarationAccess().getMethodBodyMethodBodyParserRuleCall_2_0()); }
	rulemethodBody{ after(grammarAccess.getInterfaceMethodDeclarationAccess().getMethodBodyMethodBodyParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JavaInterfaceMethodModifiers__ModifiersAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJavaInterfaceMethodModifiersAccess().getModifiersInterfaceMethodModifiersEnumRuleCall_0()); }
	ruleInterfaceMethodModifiers{ after(grammarAccess.getJavaInterfaceMethodModifiersAccess().getModifiersInterfaceMethodModifiersEnumRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationTypeDeclaration__InterfaceModifiersAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationTypeDeclarationAccess().getInterfaceModifiersInterfaceModifierParserRuleCall_0_0()); }
	ruleinterfaceModifier{ after(grammarAccess.getAnnotationTypeDeclarationAccess().getInterfaceModifiersInterfaceModifierParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationTypeDeclaration__NameAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationTypeDeclarationAccess().getNameIdentifierTerminalRuleCall_3_0()); }
	RULE_IDENTIFIER{ after(grammarAccess.getAnnotationTypeDeclarationAccess().getNameIdentifierTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationTypeDeclaration__AnnotationTypeBodyAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationTypeDeclarationAccess().getAnnotationTypeBodyAnnotationTypeBodyParserRuleCall_4_0()); }
	ruleannotationTypeBody{ after(grammarAccess.getAnnotationTypeDeclarationAccess().getAnnotationTypeBodyAnnotationTypeBodyParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationTypeBody__AnnotationTypeMemberDeclarationsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationTypeBodyAccess().getAnnotationTypeMemberDeclarationsAnnotationTypeMemberDeclarationParserRuleCall_2_0()); }
	ruleannotationTypeMemberDeclaration{ after(grammarAccess.getAnnotationTypeBodyAccess().getAnnotationTypeMemberDeclarationsAnnotationTypeMemberDeclarationParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationTypeElementDeclaration__AnnotationTypeElementModifiersAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationTypeElementDeclarationAccess().getAnnotationTypeElementModifiersAnnotationTypeElementModifierParserRuleCall_0_0()); }
	ruleannotationTypeElementModifier{ after(grammarAccess.getAnnotationTypeElementDeclarationAccess().getAnnotationTypeElementModifiersAnnotationTypeElementModifierParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationTypeElementDeclaration__UnannTypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationTypeElementDeclarationAccess().getUnannTypeUnannTypeParserRuleCall_1_0()); }
	ruleunannType{ after(grammarAccess.getAnnotationTypeElementDeclarationAccess().getUnannTypeUnannTypeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationTypeElementDeclaration__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationTypeElementDeclarationAccess().getNameIdentifierTerminalRuleCall_2_0()); }
	RULE_IDENTIFIER{ after(grammarAccess.getAnnotationTypeElementDeclarationAccess().getNameIdentifierTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationTypeElementDeclaration__DimsAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationTypeElementDeclarationAccess().getDimsDimsParserRuleCall_5_0()); }
	ruledims{ after(grammarAccess.getAnnotationTypeElementDeclarationAccess().getDimsDimsParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationTypeElementDeclaration__DefaultValueAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationTypeElementDeclarationAccess().getDefaultValueDefaultValueParserRuleCall_6_0()); }
	ruledefaultValue{ after(grammarAccess.getAnnotationTypeElementDeclarationAccess().getDefaultValueDefaultValueParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JavaAnnotationTypeElementModifiers__ModifierAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJavaAnnotationTypeElementModifiersAccess().getModifierAnnotationTypeElementModifiersEnumRuleCall_0()); }
	ruleAnnotationTypeElementModifiers{ after(grammarAccess.getJavaAnnotationTypeElementModifiersAccess().getModifierAnnotationTypeElementModifiersEnumRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NormalAnnotation__TypeNameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalAnnotationAccess().getTypeNameTypeNameParserRuleCall_1_0()); }
	ruletypeName{ after(grammarAccess.getNormalAnnotationAccess().getTypeNameTypeNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NormalAnnotation__ElementValuePairListAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalAnnotationAccess().getElementValuePairListElementValuePairListParserRuleCall_3_0()); }
	ruleelementValuePairList{ after(grammarAccess.getNormalAnnotationAccess().getElementValuePairListElementValuePairListParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ElementValuePairList__ElementValuePairsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementValuePairListAccess().getElementValuePairsElementValuePairParserRuleCall_0_0()); }
	ruleelementValuePair{ after(grammarAccess.getElementValuePairListAccess().getElementValuePairsElementValuePairParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ElementValuePairList__ElementValuePairsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementValuePairListAccess().getElementValuePairsElementValuePairParserRuleCall_1_1_0()); }
	ruleelementValuePair{ after(grammarAccess.getElementValuePairListAccess().getElementValuePairsElementValuePairParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ElementValuePair__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementValuePairAccess().getNameIdentifierTerminalRuleCall_0_0()); }
	RULE_IDENTIFIER{ after(grammarAccess.getElementValuePairAccess().getNameIdentifierTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ElementValuePair__ElementValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementValuePairAccess().getElementValueElementValueParserRuleCall_2_0()); }
	ruleelementValue{ after(grammarAccess.getElementValuePairAccess().getElementValueElementValueParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ElementValueArrayInitializer__ElementValueListAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementValueArrayInitializerAccess().getElementValueListElementValueListParserRuleCall_2_0()); }
	ruleelementValueList{ after(grammarAccess.getElementValueArrayInitializerAccess().getElementValueListElementValueListParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ElementValueList__ElementValuesAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementValueListAccess().getElementValuesElementValueParserRuleCall_0_0()); }
	ruleelementValue{ after(grammarAccess.getElementValueListAccess().getElementValuesElementValueParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ElementValueList__ElementValuesAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementValueListAccess().getElementValuesElementValueParserRuleCall_1_1_0()); }
	ruleelementValue{ after(grammarAccess.getElementValueListAccess().getElementValuesElementValueParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MarkerAnnotation__TypeNameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMarkerAnnotationAccess().getTypeNameTypeNameParserRuleCall_1_0()); }
	ruletypeName{ after(grammarAccess.getMarkerAnnotationAccess().getTypeNameTypeNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SingleElementAnnotation__TypeNameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleElementAnnotationAccess().getTypeNameTypeNameParserRuleCall_1_0()); }
	ruletypeName{ after(grammarAccess.getSingleElementAnnotationAccess().getTypeNameTypeNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SingleElementAnnotation__ElementValueAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleElementAnnotationAccess().getElementValueElementValueParserRuleCall_3_0()); }
	ruleelementValue{ after(grammarAccess.getSingleElementAnnotationAccess().getElementValueElementValueParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitializer__VariableInitializerListAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayInitializerAccess().getVariableInitializerListVariableInitializerListParserRuleCall_2_0()); }
	rulevariableInitializerList{ after(grammarAccess.getArrayInitializerAccess().getVariableInitializerListVariableInitializerListParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableInitializerList__VariableInitializerAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableInitializerListAccess().getVariableInitializerVariableInitializerParserRuleCall_0_0()); }
	rulevariableInitializer{ after(grammarAccess.getVariableInitializerListAccess().getVariableInitializerVariableInitializerParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableInitializerList__VariableInitializerAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableInitializerListAccess().getVariableInitializerVariableInitializerParserRuleCall_1_1_0()); }
	rulevariableInitializer{ after(grammarAccess.getVariableInitializerListAccess().getVariableInitializerVariableInitializerParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Block__DummyAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getDummyBlockKeyword_0()); }
(
{ before(grammarAccess.getBlockAccess().getDummyBlockKeyword_0()); }

	'block' 

{ after(grammarAccess.getBlockAccess().getDummyBlockKeyword_0()); }
)

{ after(grammarAccess.getBlockAccess().getDummyBlockKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArgumentList__DummyAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentListAccess().getDummyArgumentListKeyword_0()); }
(
{ before(grammarAccess.getArgumentListAccess().getDummyArgumentListKeyword_0()); }

	'argumentList' 

{ after(grammarAccess.getArgumentListAccess().getDummyArgumentListKeyword_0()); }
)

{ after(grammarAccess.getArgumentListAccess().getDummyArgumentListKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__DummyAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getDummyExpressionKeyword_0()); }
(
{ before(grammarAccess.getExpressionAccess().getDummyExpressionKeyword_0()); }

	'expression' 

{ after(grammarAccess.getExpressionAccess().getDummyExpressionKeyword_0()); }
)

{ after(grammarAccess.getExpressionAccess().getDummyExpressionKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__DummyAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getDummyConditionalExpressionKeyword_0()); }
(
{ before(grammarAccess.getConditionalExpressionAccess().getDummyConditionalExpressionKeyword_0()); }

	'conditionalExpression' 

{ after(grammarAccess.getConditionalExpressionAccess().getDummyConditionalExpressionKeyword_0()); }
)

{ after(grammarAccess.getConditionalExpressionAccess().getDummyConditionalExpressionKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerLiteralAccess().getValueAlternatives_0()); }
(rule__IntegerLiteral__ValueAlternatives_0)
{ after(grammarAccess.getIntegerLiteralAccess().getValueAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FloatingPointLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatingPointLiteralAccess().getValueAlternatives_0()); }
(rule__FloatingPointLiteral__ValueAlternatives_0)
{ after(grammarAccess.getFloatingPointLiteralAccess().getValueAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanLiteralAccess().getValueAlternatives_0()); }
(rule__BooleanLiteral__ValueAlternatives_0)
{ after(grammarAccess.getBooleanLiteralAccess().getValueAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CharacterLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCharacterLiteralAccess().getValueCHARACTERTerminalRuleCall_0()); }
	RULE_CHARACTER{ after(grammarAccess.getCharacterLiteralAccess().getValueCHARACTERTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NullLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullLiteralAccess().getValueNULLTerminalRuleCall_0()); }
	RULE_NULL{ after(grammarAccess.getNullLiteralAccess().getValueNULLTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_BOOLEANTYPE : 'boolean';

RULE_NUMERICTYPE : (RULE_INTEGRALTYPE|RULE_FLOATINGPOINTTYPE);

RULE_INTEGRALTYPE : ('byte'|'short'|'int'|'long'|'char');

RULE_FLOATINGPOINTTYPE : ('float'|'double');

RULE_DECIMALINTEGERLITERAL : RULE_DECIMALNUMERAL RULE_INTEGERTYPESUFFIX?;

RULE_HEXINTEGERLITERAL : RULE_HEXNUMERAL RULE_INTEGERTYPESUFFIX?;

RULE_OCTALINTEGERLITERAL : RULE_OCTALNUMERAL RULE_INTEGERTYPESUFFIX?;

RULE_BINARYINTEGERLITERAL : RULE_BINARYNUMERAL RULE_INTEGERTYPESUFFIX?;

fragment RULE_INTEGERTYPESUFFIX : ('l'|'L');

fragment RULE_DECIMALNUMERAL : ('0'|RULE_NONZERODIGIT RULE_DIGITS?|RULE_NONZERODIGIT RULE_UNDERSCORES RULE_DIGITS);

fragment RULE_NONZERODIGIT : '1'..'9';

fragment RULE_DIGITS : (RULE_DIGIT|RULE_DIGIT RULE_DIGITSANDUNDERSCORES? RULE_DIGIT);

fragment RULE_DIGIT : ('0'|RULE_NONZERODIGIT);

fragment RULE_DIGITSANDUNDERSCORES : RULE_DIGITORUNDERSCORE RULE_DIGITORUNDERSCORE*;

fragment RULE_DIGITORUNDERSCORE : (RULE_DIGIT|'_');

fragment RULE_UNDERSCORES : '_'+;

fragment RULE_HEXNUMERAL : '0' ('x'|'X') RULE_HEXDIGITS;

fragment RULE_HEXDIGITS : (RULE_HEXDIGIT|RULE_HEXDIGIT RULE_HEXDIGITSANDUNDERSCORES? RULE_HEXDIGIT);

fragment RULE_HEXDIGIT : ('0'..'9'|'a'..'f'|'A'..'F');

fragment RULE_HEXDIGITSANDUNDERSCORES : RULE_HEXDIGITORUNDERSCORE RULE_HEXDIGITORUNDERSCORE*;

fragment RULE_HEXDIGITORUNDERSCORE : (RULE_HEXDIGIT|'_');

fragment RULE_OCTALNUMERAL : ('0' RULE_OCTALDIGITS|'0' RULE_UNDERSCORES RULE_OCTALDIGITS);

fragment RULE_OCTALDIGITS : (RULE_OCTALDIGIT|RULE_OCTALDIGIT RULE_OCTALDIGITSANDUNDERSCORES? RULE_OCTALDIGIT);

fragment RULE_OCTALDIGIT : '0'..'7';

fragment RULE_OCTALDIGITSANDUNDERSCORES : RULE_OCTALDIGITORUNDERSCORE RULE_OCTALDIGITORUNDERSCORE*;

fragment RULE_OCTALDIGITORUNDERSCORE : (RULE_OCTALDIGIT|'_');

fragment RULE_BINARYNUMERAL : '0' ('b'|'B') RULE_BINARYDIGITS;

fragment RULE_BINARYDIGITS : (RULE_BINARYDIGIT|RULE_BINARYDIGIT RULE_BINARYDIGITSANDUNDERSCORES? RULE_BINARYDIGIT);

fragment RULE_BINARYDIGIT : ('0'|'1');

fragment RULE_BINARYDIGITSANDUNDERSCORES : RULE_BINARYDIGITORUNDERSCORE RULE_BINARYDIGITORUNDERSCORE*;

fragment RULE_BINARYDIGITORUNDERSCORE : (RULE_BINARYDIGIT|'_');

RULE_DECIMALFLOATINGPOINTLITERAL : (RULE_DIGITS '.' RULE_DIGITS? RULE_EXPONENTPART? RULE_FLOATTYPESUFFIX?|'.' RULE_DIGITS RULE_EXPONENTPART? RULE_FLOATTYPESUFFIX?|RULE_DIGITS RULE_EXPONENTPART RULE_FLOATTYPESUFFIX?|RULE_DIGITS RULE_FLOATTYPESUFFIX);

fragment RULE_EXPONENTPART : RULE_EXPONENTINDICATOR RULE_SIGNEDINTEGER;

fragment RULE_EXPONENTINDICATOR : ('e'|'E');

fragment RULE_SIGNEDINTEGER : RULE_SIGN? RULE_DIGITS;

fragment RULE_SIGN : ('+'|'-');

fragment RULE_FLOATTYPESUFFIX : ('f'|'F'|'d'|'D');

RULE_HEXADECIMALFLOATINGPOINTLITERAL : RULE_HEXSIGNIFICAND RULE_BINARYEXPONENT RULE_FLOATTYPESUFFIX?;

fragment RULE_HEXSIGNIFICAND : (RULE_HEXNUMERAL '.'?|'0' ('x'|'X') RULE_HEXDIGIT* '.' RULE_HEXDIGIT+);

fragment RULE_BINARYEXPONENT : RULE_BINARYEXPONENTINDICATOR RULE_SIGNEDINTEGER;

fragment RULE_BINARYEXPONENTINDICATOR : ('p'|'P');

RULE_TRUE : 'true';

RULE_FALSE : 'false';

RULE_CHARACTER : '\'' (RULE_ESCAPESEQUENCE|~(('\''|'\\'))) '\'';

RULE_STRING : '"' (RULE_ESCAPESEQUENCE|~(('\\'|'"')))* '"';

fragment RULE_ESCAPESEQUENCE : ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|RULE_UNICODEESCAPE|RULE_OCTALESCAPE);

fragment RULE_OCTALESCAPE : ('\\' RULE_ZEROTOTHREE RULE_OCTALDIGIT RULE_OCTALDIGIT|'\\' RULE_OCTALDIGIT RULE_OCTALDIGIT|'\\' RULE_OCTALDIGIT);

fragment RULE_ZEROTOTHREE : '0'..'3';

fragment RULE_UNICODEESCAPE : '\\' RULE_UNICODEMARKER RULE_HEXDIGIT RULE_HEXDIGIT RULE_HEXDIGIT RULE_HEXDIGIT;

fragment RULE_UNICODEMARKER : 'u' 'u'*;

RULE_NULL : 'null';

RULE_IDENTIFIER : RULE_JAVALETTER RULE_JAVALETTERORDIGIT*;

fragment RULE_JAVALETTER : ('$'|'A'..'Z'|'_'|'a'..'z'|'\u00A2'..'\u00A5'|'\u00AA'|'\u00B5'|'\u00BA'|'\u00C0'..'\u00D6'|'\u00D8'..'\u00F6'|'\u00F8'..'\u0236'|'\u0250'..'\u02C1'|'\u02C6'..'\u02D1'|'\u02E0'..'\u02E4'|'\u02EE'|'\u037A'|'\u0386'|'\u0388'..'\u038A'|'\u038C'|'\u038E'..'\u03A1'|'\u03A3'..'\u03CE'|'\u03D0'..'\u03F5'|'\u03F7'..'\u03FB'|'\u0400'..'\u0481'|'\u048A'..'\u04CE'|'\u04D0'..'\u04F5'|'\u04F8'..'\u04F9'|'\u0500'..'\u050F'|'\u0531'..'\u0556'|'\u0559'|'\u0561'..'\u0587'|'\u05D0'..'\u05EA'|'\u05F0'..'\u05F2'|'\u0621'..'\u063A'|'\u0640'..'\u064A'|'\u066E'..'\u066F'|'\u0671'..'\u06D3'|'\u06D5'|'\u06E5'..'\u06E6'|'\u06EE'..'\u06EF'|'\u06FA'..'\u06FC'|'\u06FF'|'\u0710'|'\u0712'..'\u072F'|'\u074D'..'\u074F'|'\u0780'..'\u07A5'|'\u07B1'|'\u0904'..'\u0939'|'\u093D'|'\u0950'|'\u0958'..'\u0961'|'\u0985'..'\u098C'|'\u098F'..'\u0990'|'\u0993'..'\u09A8'|'\u09AA'..'\u09B0'|'\u09B2'|'\u09B6'..'\u09B9'|'\u09BD'|'\u09DC'..'\u09DD'|'\u09DF'..'\u09E1'|'\u09F0'..'\u09F3'|'\u0A05'..'\u0A0A'|'\u0A0F'..'\u0A10'|'\u0A13'..'\u0A28'|'\u0A2A'..'\u0A30'|'\u0A32'..'\u0A33'|'\u0A35'..'\u0A36'|'\u0A38'..'\u0A39'|'\u0A59'..'\u0A5C'|'\u0A5E'|'\u0A72'..'\u0A74'|'\u0A85'..'\u0A8D'|'\u0A8F'..'\u0A91'|'\u0A93'..'\u0AA8'|'\u0AAA'..'\u0AB0'|'\u0AB2'..'\u0AB3'|'\u0AB5'..'\u0AB9'|'\u0ABD'|'\u0AD0'|'\u0AE0'..'\u0AE1'|'\u0AF1'|'\u0B05'..'\u0B0C'|'\u0B0F'..'\u0B10'|'\u0B13'..'\u0B28'|'\u0B2A'..'\u0B30'|'\u0B32'..'\u0B33'|'\u0B35'..'\u0B39'|'\u0B3D'|'\u0B5C'..'\u0B5D'|'\u0B5F'..'\u0B61'|'\u0B71'|'\u0B83'|'\u0B85'..'\u0B8A'|'\u0B8E'..'\u0B90'|'\u0B92'..'\u0B95'|'\u0B99'..'\u0B9A'|'\u0B9C'|'\u0B9E'..'\u0B9F'|'\u0BA3'..'\u0BA4'|'\u0BA8'..'\u0BAA'|'\u0BAE'..'\u0BB5'|'\u0BB7'..'\u0BB9'|'\u0BF9'|'\u0C05'..'\u0C0C'|'\u0C0E'..'\u0C10'|'\u0C12'..'\u0C28'|'\u0C2A'..'\u0C33'|'\u0C35'..'\u0C39'|'\u0C60'..'\u0C61'|'\u0C85'..'\u0C8C'|'\u0C8E'..'\u0C90'|'\u0C92'..'\u0CA8'|'\u0CAA'..'\u0CB3'|'\u0CB5'..'\u0CB9'|'\u0CBD'|'\u0CDE'|'\u0CE0'..'\u0CE1'|'\u0D05'..'\u0D0C'|'\u0D0E'..'\u0D10'|'\u0D12'..'\u0D28'|'\u0D2A'..'\u0D39'|'\u0D60'..'\u0D61'|'\u0D85'..'\u0D96'|'\u0D9A'..'\u0DB1'|'\u0DB3'..'\u0DBB'|'\u0DBD'|'\u0DC0'..'\u0DC6'|'\u0E01'..'\u0E30'|'\u0E32'..'\u0E33'|'\u0E3F'..'\u0E46'|'\u0E81'..'\u0E82'|'\u0E84'|'\u0E87'..'\u0E88'|'\u0E8A'|'\u0E8D'|'\u0E94'..'\u0E97'|'\u0E99'..'\u0E9F'|'\u0EA1'..'\u0EA3'|'\u0EA5'|'\u0EA7'|'\u0EAA'..'\u0EAB'|'\u0EAD'..'\u0EB0'|'\u0EB2'..'\u0EB3'|'\u0EBD'|'\u0EC0'..'\u0EC4'|'\u0EC6'|'\u0EDC'..'\u0EDD'|'\u0F00'|'\u0F40'..'\u0F47'|'\u0F49'..'\u0F6A'|'\u0F88'..'\u0F8B'|'\u1000'..'\u1021'|'\u1023'..'\u1027'|'\u1029'..'\u102A'|'\u1050'..'\u1055'|'\u10A0'..'\u10C5'|'\u10D0'..'\u10F8'|'\u1100'..'\u1159'|'\u115F'..'\u11A2'|'\u11A8'..'\u11F9'|'\u1200'..'\u1206'|'\u1208'..'\u1246'|'\u1248'|'\u124A'..'\u124D'|'\u1250'..'\u1256'|'\u1258'|'\u125A'..'\u125D'|'\u1260'..'\u1286'|'\u1288'|'\u128A'..'\u128D'|'\u1290'..'\u12AE'|'\u12B0'|'\u12B2'..'\u12B5'|'\u12B8'..'\u12BE'|'\u12C0'|'\u12C2'..'\u12C5'|'\u12C8'..'\u12CE'|'\u12D0'..'\u12D6'|'\u12D8'..'\u12EE'|'\u12F0'..'\u130E'|'\u1310'|'\u1312'..'\u1315'|'\u1318'..'\u131E'|'\u1320'..'\u1346'|'\u1348'..'\u135A'|'\u13A0'..'\u13F4'|'\u1401'..'\u166C'|'\u166F'..'\u1676'|'\u1681'..'\u169A'|'\u16A0'..'\u16EA'|'\u16EE'..'\u16F0'|'\u1700'..'\u170C'|'\u170E'..'\u1711'|'\u1720'..'\u1731'|'\u1740'..'\u1751'|'\u1760'..'\u176C'|'\u176E'..'\u1770'|'\u1780'..'\u17B3'|'\u17D7'|'\u17DB'..'\u17DC'|'\u1820'..'\u1877'|'\u1880'..'\u18A8'|'\u1900'..'\u191C'|'\u1950'..'\u196D'|'\u1970'..'\u1974'|'\u1D00'..'\u1D6B'|'\u1E00'..'\u1E9B'|'\u1EA0'..'\u1EF9'|'\u1F00'..'\u1F15'|'\u1F18'..'\u1F1D'|'\u1F20'..'\u1F45'|'\u1F48'..'\u1F4D'|'\u1F50'..'\u1F57'|'\u1F59'|'\u1F5B'|'\u1F5D'|'\u1F5F'..'\u1F7D'|'\u1F80'..'\u1FB4'|'\u1FB6'..'\u1FBC'|'\u1FBE'|'\u1FC2'..'\u1FC4'|'\u1FC6'..'\u1FCC'|'\u1FD0'..'\u1FD3'|'\u1FD6'..'\u1FDB'|'\u1FE0'..'\u1FEC'|'\u1FF2'..'\u1FF4'|'\u1FF6'..'\u1FFC'|'\u203F'..'\u2040'|'\u2054'|'\u2071'|'\u207F'|'\u20A0'..'\u20B1'|'\u2102'|'\u2107'|'\u210A'..'\u2113'|'\u2115'|'\u2119'..'\u211D'|'\u2124'|'\u2126'|'\u2128'|'\u212A'..'\u212D'|'\u212F'..'\u2131'|'\u2133'..'\u2139'|'\u213D'..'\u213F'|'\u2145'..'\u2149'|'\u2160'..'\u2183'|'\u3005'..'\u3007'|'\u3021'..'\u3029'|'\u3031'..'\u3035'|'\u3038'..'\u303C'|'\u3041'..'\u3096'|'\u309D'..'\u309F'|'\u30A1'..'\u30FF'|'\u3105'..'\u312C'|'\u3131'..'\u318E'|'\u31A0'..'\u31B7'|'\u31F0'..'\u31FF'|'\u3400'..'\u4DB5'|'\u4E00'..'\u9FA5'|'\uA000'..'\uA48C'|'\uAC00'..'\uD7A3'|'\uF900'..'\uFA2D'|'\uFA30'..'\uFA6A'|'\uFB00'..'\uFB06'|'\uFB13'..'\uFB17'|'\uFB1D'|'\uFB1F'..'\uFB28'|'\uFB2A'..'\uFB36'|'\uFB38'..'\uFB3C'|'\uFB3E'|'\uFB40'..'\uFB41'|'\uFB43'..'\uFB44'|'\uFB46'..'\uFBB1'|'\uFBD3'..'\uFD3D'|'\uFD50'..'\uFD8F'|'\uFD92'..'\uFDC7'|'\uFDF0'..'\uFDFC'|'\uFE33'..'\uFE34'|'\uFE4D'..'\uFE4F'|'\uFE69'|'\uFE70'..'\uFE74'|'\uFE76'..'\uFEFC'|'\uFF04'|'\uFF21'..'\uFF3A'|'\uFF3F'|'\uFF41'..'\uFF5A'|'\uFF65'..'\uFFBE'|'\uFFC2'..'\uFFC7'|'\uFFCA'..'\uFFCF'|'\uFFD2'..'\uFFD7'|'\uFFDA'..'\uFFDC'|'\uFFE0'..'\uFFE1'|'\uFFE5'..'\uFFE6'|'\uD800'..'\uDBFF' '\uDC00'..'\uDFFF');

fragment RULE_JAVALETTERORDIGIT : ('\u0000'..'\b'|'\u000E'..'\u001B'|'$'|'0'..'9'|'A'..'Z'|'_'|'a'..'z'|'\u007F'..'\u009F'|'\u00A2'..'\u00A5'|'\u00AA'|'\u00AD'|'\u00B5'|'\u00BA'|'\u00C0'..'\u00D6'|'\u00D8'..'\u00F6'|'\u00F8'..'\u0236'|'\u0250'..'\u02C1'|'\u02C6'..'\u02D1'|'\u02E0'..'\u02E4'|'\u02EE'|'\u0300'..'\u0357'|'\u035D'..'\u036F'|'\u037A'|'\u0386'|'\u0388'..'\u038A'|'\u038C'|'\u038E'..'\u03A1'|'\u03A3'..'\u03CE'|'\u03D0'..'\u03F5'|'\u03F7'..'\u03FB'|'\u0400'..'\u0481'|'\u0483'..'\u0486'|'\u048A'..'\u04CE'|'\u04D0'..'\u04F5'|'\u04F8'..'\u04F9'|'\u0500'..'\u050F'|'\u0531'..'\u0556'|'\u0559'|'\u0561'..'\u0587'|'\u0591'..'\u05A1'|'\u05A3'..'\u05B9'|'\u05BB'..'\u05BD'|'\u05BF'|'\u05C1'..'\u05C2'|'\u05C4'|'\u05D0'..'\u05EA'|'\u05F0'..'\u05F2'|'\u0600'..'\u0603'|'\u0610'..'\u0615'|'\u0621'..'\u063A'|'\u0640'..'\u0658'|'\u0660'..'\u0669'|'\u066E'..'\u06D3'|'\u06D5'..'\u06DD'|'\u06DF'..'\u06E8'|'\u06EA'..'\u06FC'|'\u06FF'|'\u070F'..'\u074A'|'\u074D'..'\u074F'|'\u0780'..'\u07B1'|'\u0901'..'\u0939'|'\u093C'..'\u094D'|'\u0950'..'\u0954'|'\u0958'..'\u0963'|'\u0966'..'\u096F'|'\u0981'..'\u0983'|'\u0985'..'\u098C'|'\u098F'..'\u0990'|'\u0993'..'\u09A8'|'\u09AA'..'\u09B0'|'\u09B2'|'\u09B6'..'\u09B9'|'\u09BC'..'\u09C4'|'\u09C7'..'\u09C8'|'\u09CB'..'\u09CD'|'\u09D7'|'\u09DC'..'\u09DD'|'\u09DF'..'\u09E3'|'\u09E6'..'\u09F3'|'\u0A01'..'\u0A03'|'\u0A05'..'\u0A0A'|'\u0A0F'..'\u0A10'|'\u0A13'..'\u0A28'|'\u0A2A'..'\u0A30'|'\u0A32'..'\u0A33'|'\u0A35'..'\u0A36'|'\u0A38'..'\u0A39'|'\u0A3C'|'\u0A3E'..'\u0A42'|'\u0A47'..'\u0A48'|'\u0A4B'..'\u0A4D'|'\u0A59'..'\u0A5C'|'\u0A5E'|'\u0A66'..'\u0A74'|'\u0A81'..'\u0A83'|'\u0A85'..'\u0A8D'|'\u0A8F'..'\u0A91'|'\u0A93'..'\u0AA8'|'\u0AAA'..'\u0AB0'|'\u0AB2'..'\u0AB3'|'\u0AB5'..'\u0AB9'|'\u0ABC'..'\u0AC5'|'\u0AC7'..'\u0AC9'|'\u0ACB'..'\u0ACD'|'\u0AD0'|'\u0AE0'..'\u0AE3'|'\u0AE6'..'\u0AEF'|'\u0AF1'|'\u0B01'..'\u0B03'|'\u0B05'..'\u0B0C'|'\u0B0F'..'\u0B10'|'\u0B13'..'\u0B28'|'\u0B2A'..'\u0B30'|'\u0B32'..'\u0B33'|'\u0B35'..'\u0B39'|'\u0B3C'..'\u0B43'|'\u0B47'..'\u0B48'|'\u0B4B'..'\u0B4D'|'\u0B56'..'\u0B57'|'\u0B5C'..'\u0B5D'|'\u0B5F'..'\u0B61'|'\u0B66'..'\u0B6F'|'\u0B71'|'\u0B82'..'\u0B83'|'\u0B85'..'\u0B8A'|'\u0B8E'..'\u0B90'|'\u0B92'..'\u0B95'|'\u0B99'..'\u0B9A'|'\u0B9C'|'\u0B9E'..'\u0B9F'|'\u0BA3'..'\u0BA4'|'\u0BA8'..'\u0BAA'|'\u0BAE'..'\u0BB5'|'\u0BB7'..'\u0BB9'|'\u0BBE'..'\u0BC2'|'\u0BC6'..'\u0BC8'|'\u0BCA'..'\u0BCD'|'\u0BD7'|'\u0BE7'..'\u0BEF'|'\u0BF9'|'\u0C01'..'\u0C03'|'\u0C05'..'\u0C0C'|'\u0C0E'..'\u0C10'|'\u0C12'..'\u0C28'|'\u0C2A'..'\u0C33'|'\u0C35'..'\u0C39'|'\u0C3E'..'\u0C44'|'\u0C46'..'\u0C48'|'\u0C4A'..'\u0C4D'|'\u0C55'..'\u0C56'|'\u0C60'..'\u0C61'|'\u0C66'..'\u0C6F'|'\u0C82'..'\u0C83'|'\u0C85'..'\u0C8C'|'\u0C8E'..'\u0C90'|'\u0C92'..'\u0CA8'|'\u0CAA'..'\u0CB3'|'\u0CB5'..'\u0CB9'|'\u0CBC'..'\u0CC4'|'\u0CC6'..'\u0CC8'|'\u0CCA'..'\u0CCD'|'\u0CD5'..'\u0CD6'|'\u0CDE'|'\u0CE0'..'\u0CE1'|'\u0CE6'..'\u0CEF'|'\u0D02'..'\u0D03'|'\u0D05'..'\u0D0C'|'\u0D0E'..'\u0D10'|'\u0D12'..'\u0D28'|'\u0D2A'..'\u0D39'|'\u0D3E'..'\u0D43'|'\u0D46'..'\u0D48'|'\u0D4A'..'\u0D4D'|'\u0D57'|'\u0D60'..'\u0D61'|'\u0D66'..'\u0D6F'|'\u0D82'..'\u0D83'|'\u0D85'..'\u0D96'|'\u0D9A'..'\u0DB1'|'\u0DB3'..'\u0DBB'|'\u0DBD'|'\u0DC0'..'\u0DC6'|'\u0DCA'|'\u0DCF'..'\u0DD4'|'\u0DD6'|'\u0DD8'..'\u0DDF'|'\u0DF2'..'\u0DF3'|'\u0E01'..'\u0E3A'|'\u0E3F'..'\u0E4E'|'\u0E50'..'\u0E59'|'\u0E81'..'\u0E82'|'\u0E84'|'\u0E87'..'\u0E88'|'\u0E8A'|'\u0E8D'|'\u0E94'..'\u0E97'|'\u0E99'..'\u0E9F'|'\u0EA1'..'\u0EA3'|'\u0EA5'|'\u0EA7'|'\u0EAA'..'\u0EAB'|'\u0EAD'..'\u0EB9'|'\u0EBB'..'\u0EBD'|'\u0EC0'..'\u0EC4'|'\u0EC6'|'\u0EC8'..'\u0ECD'|'\u0ED0'..'\u0ED9'|'\u0EDC'..'\u0EDD'|'\u0F00'|'\u0F18'..'\u0F19'|'\u0F20'..'\u0F29'|'\u0F35'|'\u0F37'|'\u0F39'|'\u0F3E'..'\u0F47'|'\u0F49'..'\u0F6A'|'\u0F71'..'\u0F84'|'\u0F86'..'\u0F8B'|'\u0F90'..'\u0F97'|'\u0F99'..'\u0FBC'|'\u0FC6'|'\u1000'..'\u1021'|'\u1023'..'\u1027'|'\u1029'..'\u102A'|'\u102C'..'\u1032'|'\u1036'..'\u1039'|'\u1040'..'\u1049'|'\u1050'..'\u1059'|'\u10A0'..'\u10C5'|'\u10D0'..'\u10F8'|'\u1100'..'\u1159'|'\u115F'..'\u11A2'|'\u11A8'..'\u11F9'|'\u1200'..'\u1206'|'\u1208'..'\u1246'|'\u1248'|'\u124A'..'\u124D'|'\u1250'..'\u1256'|'\u1258'|'\u125A'..'\u125D'|'\u1260'..'\u1286'|'\u1288'|'\u128A'..'\u128D'|'\u1290'..'\u12AE'|'\u12B0'|'\u12B2'..'\u12B5'|'\u12B8'..'\u12BE'|'\u12C0'|'\u12C2'..'\u12C5'|'\u12C8'..'\u12CE'|'\u12D0'..'\u12D6'|'\u12D8'..'\u12EE'|'\u12F0'..'\u130E'|'\u1310'|'\u1312'..'\u1315'|'\u1318'..'\u131E'|'\u1320'..'\u1346'|'\u1348'..'\u135A'|'\u1369'..'\u1371'|'\u13A0'..'\u13F4'|'\u1401'..'\u166C'|'\u166F'..'\u1676'|'\u1681'..'\u169A'|'\u16A0'..'\u16EA'|'\u16EE'..'\u16F0'|'\u1700'..'\u170C'|'\u170E'..'\u1714'|'\u1720'..'\u1734'|'\u1740'..'\u1753'|'\u1760'..'\u176C'|'\u176E'..'\u1770'|'\u1772'..'\u1773'|'\u1780'..'\u17D3'|'\u17D7'|'\u17DB'..'\u17DD'|'\u17E0'..'\u17E9'|'\u180B'..'\u180D'|'\u1810'..'\u1819'|'\u1820'..'\u1877'|'\u1880'..'\u18A9'|'\u1900'..'\u191C'|'\u1920'..'\u192B'|'\u1930'..'\u193B'|'\u1946'..'\u196D'|'\u1970'..'\u1974'|'\u1D00'..'\u1D6B'|'\u1E00'..'\u1E9B'|'\u1EA0'..'\u1EF9'|'\u1F00'..'\u1F15'|'\u1F18'..'\u1F1D'|'\u1F20'..'\u1F45'|'\u1F48'..'\u1F4D'|'\u1F50'..'\u1F57'|'\u1F59'|'\u1F5B'|'\u1F5D'|'\u1F5F'..'\u1F7D'|'\u1F80'..'\u1FB4'|'\u1FB6'..'\u1FBC'|'\u1FBE'|'\u1FC2'..'\u1FC4'|'\u1FC6'..'\u1FCC'|'\u1FD0'..'\u1FD3'|'\u1FD6'..'\u1FDB'|'\u1FE0'..'\u1FEC'|'\u1FF2'..'\u1FF4'|'\u1FF6'..'\u1FFC'|'\u200C'..'\u200F'|'\u202A'..'\u202E'|'\u203F'..'\u2040'|'\u2054'|'\u2060'..'\u2063'|'\u206A'..'\u206F'|'\u2071'|'\u207F'|'\u20A0'..'\u20B1'|'\u20D0'..'\u20DC'|'\u20E1'|'\u20E5'..'\u20EA'|'\u2102'|'\u2107'|'\u210A'..'\u2113'|'\u2115'|'\u2119'..'\u211D'|'\u2124'|'\u2126'|'\u2128'|'\u212A'..'\u212D'|'\u212F'..'\u2131'|'\u2133'..'\u2139'|'\u213D'..'\u213F'|'\u2145'..'\u2149'|'\u2160'..'\u2183'|'\u3005'..'\u3007'|'\u3021'..'\u302F'|'\u3031'..'\u3035'|'\u3038'..'\u303C'|'\u3041'..'\u3096'|'\u3099'..'\u309A'|'\u309D'..'\u309F'|'\u30A1'..'\u30FF'|'\u3105'..'\u312C'|'\u3131'..'\u318E'|'\u31A0'..'\u31B7'|'\u31F0'..'\u31FF'|'\u3400'..'\u4DB5'|'\u4E00'..'\u9FA5'|'\uA000'..'\uA48C'|'\uAC00'..'\uD7A3'|'\uF900'..'\uFA2D'|'\uFA30'..'\uFA6A'|'\uFB00'..'\uFB06'|'\uFB13'..'\uFB17'|'\uFB1D'..'\uFB28'|'\uFB2A'..'\uFB36'|'\uFB38'..'\uFB3C'|'\uFB3E'|'\uFB40'..'\uFB41'|'\uFB43'..'\uFB44'|'\uFB46'..'\uFBB1'|'\uFBD3'..'\uFD3D'|'\uFD50'..'\uFD8F'|'\uFD92'..'\uFDC7'|'\uFDF0'..'\uFDFC'|'\uFE00'..'\uFE0F'|'\uFE20'..'\uFE23'|'\uFE33'..'\uFE34'|'\uFE4D'..'\uFE4F'|'\uFE69'|'\uFE70'..'\uFE74'|'\uFE76'..'\uFEFC'|'\uFEFF'|'\uFF04'|'\uFF10'..'\uFF19'|'\uFF21'..'\uFF3A'|'\uFF3F'|'\uFF41'..'\uFF5A'|'\uFF65'..'\uFFBE'|'\uFFC2'..'\uFFC7'|'\uFFCA'..'\uFFCF'|'\uFFD2'..'\uFFD7'|'\uFFDA'..'\uFFDC'|'\uFFE0'..'\uFFE1'|'\uFFE5'..'\uFFE6'|'\uFFF9'..'\uFFFB'|'\uD800'..'\uDBFF' '\uDC00'..'\uDFFF');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;


