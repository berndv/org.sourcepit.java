grammar org.sourcepit.java.expressions.Expressions with org.sourcepit.java.literals.Literals

generate expressions "http://www.sourcepit.org/java/expressions/Expressions"

/*
 * Productions from ยง15 (Expressions)
 */
primary:
	(primaryNoNewArray_lfno_primary
	| arrayCreationExpression)
	(primaryNoNewArray_lf_primary)*;

primaryNoNewArray:
	literal
	| typeName ('[' ']')* '.' 'class'
	| 'void' '.' 'class'
	| 'this'
	| typeName '.' 'this'
	| '(' expression ')'
	| classInstanceCreationExpression
	| fieldAccess
	| arrayAccess
	| methodInvocation
	| methodReference;

//primaryNoNewArray_lf_arrayAccess:;

primaryNoNewArray_lfno_arrayAccess:
	literal | typeName ('[' ']')* '.' 'class' | 'void' '.' 'class' | 'this' | typeName '.' 'this' | '(' expression ')' |
	classInstanceCreationExpression | fieldAccess | methodInvocation | methodReference;

primaryNoNewArray_lf_primary:
	classInstanceCreationExpression_lf_primary | fieldAccess_lf_primary | arrayAccess_lf_primary |
	methodInvocation_lf_primary | methodReference_lf_primary;

primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary:;

primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary:
	classInstanceCreationExpression_lf_primary
	| fieldAccess_lf_primary
	| methodInvocation_lf_primary
	| methodReference_lf_primary;

primaryNoNewArray_lfno_primary:
	literal
	| typeName ('[' ']')* '.' 'class'
	| unannPrimitiveType ('[' ']')* '.' 'class'
	| 'void' '.' 'class'
	| 'this'
	| typeName '.' 'this'
	| '(' expression ')'
	| classInstanceCreationExpression_lfno_primary
	| fieldAccess_lfno_primary
	| arrayAccess_lfno_primary
	| methodInvocation_lfno_primary
	| methodReference_lfno_primary;

primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary:;

primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary:
	literal | typeName ('[' ']')* '.' 'class' | unannPrimitiveType ('[' ']')* '.' 'class' | 'void' '.' 'class' | 'this' |
	typeName '.' 'this' | '(' expression ')' | classInstanceCreationExpression_lfno_primary | fieldAccess_lfno_primary |
	methodInvocation_lfno_primary | methodReference_lfno_primary;

classInstanceCreationExpression:
	'new' typeArguments? annotation* Identifier ('.' annotation* Identifier)* typeArgumentsOrDiamond? '(' argumentList?
	')' classBody? | expressionName '.' 'new' typeArguments? annotation* Identifier typeArgumentsOrDiamond? '('
	argumentList? ')' classBody? | primary '.' 'new' typeArguments? annotation* Identifier typeArgumentsOrDiamond? '('
	argumentList? ')' classBody?;

classInstanceCreationExpression_lf_primary:
	'.' 'new' typeArguments? annotation* Identifier typeArgumentsOrDiamond? '(' argumentList? ')' classBody?;

classInstanceCreationExpression_lfno_primary:
	'new' typeArguments? annotation* Identifier ('.' annotation* Identifier)* typeArgumentsOrDiamond? '(' argumentList?
	')' classBody? | expressionName '.' 'new' typeArguments? annotation* Identifier typeArgumentsOrDiamond? '('
	argumentList? ')' classBody?;

typeArgumentsOrDiamond:
	typeArguments | '<' '>';

fieldAccess:
	primary '.' Identifier | 'super' '.' Identifier | typeName '.' 'super' '.' Identifier;

fieldAccess_lf_primary:
	'.' Identifier;

fieldAccess_lfno_primary:
	'super' '.' Identifier | typeName '.' 'super' '.' Identifier;

arrayAccess:
	(expressionName '[' expression ']' | primaryNoNewArray_lfno_arrayAccess '[' expression ']')
	(primaryNoNewArray_lf_arrayAccess '[' expression ']')*;

arrayAccess_lf_primary:
	(primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary '[' expression ']')
	(primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary '[' expression ']')*;

arrayAccess_lfno_primary:
	(expressionName '[' expression ']' | primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary '[' expression ']')
	(primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary '[' expression ']')*;

methodInvocation:
	methodName '(' argumentList? ')' | typeName '.' typeArguments? Identifier '(' argumentList? ')' | expressionName '.'
	typeArguments? Identifier '(' argumentList? ')' | primary '.' typeArguments? Identifier '(' argumentList? ')' |
	'super' '.' typeArguments? Identifier '(' argumentList? ')' | typeName '.' 'super' '.' typeArguments? Identifier '('
	argumentList? ')';

methodInvocation_lf_primary:
	'.' typeArguments? Identifier '(' argumentList? ')';

methodInvocation_lfno_primary:
	methodName '(' argumentList? ')' | typeName '.' typeArguments? Identifier '(' argumentList? ')' | expressionName '.'
	typeArguments? Identifier '(' argumentList? ')' | 'super' '.' typeArguments? Identifier '(' argumentList? ')' |
	typeName '.' 'super' '.' typeArguments? Identifier '(' argumentList? ')';

argumentList:
	expression (',' expression)*;

methodReference:
	expressionName '::' typeArguments? Identifier | referenceType '::' typeArguments? Identifier | primary '::'
	typeArguments? Identifier | 'super' '::' typeArguments? Identifier | typeName '.' 'super' '::' typeArguments?
	Identifier | classType '::' typeArguments? 'new' | arrayType '::' 'new';

methodReference_lf_primary:
	'::' typeArguments? Identifier;

methodReference_lfno_primary:
	expressionName '::' typeArguments? Identifier | referenceType '::' typeArguments? Identifier | 'super' '::'
	typeArguments? Identifier | typeName '.' 'super' '::' typeArguments? Identifier | classType '::' typeArguments? 'new'
	| arrayType '::' 'new';

arrayCreationExpression:
	'new' primitiveType dimExprs dims? | 'new' classOrInterfaceType dimExprs dims? | 'new' primitiveType dims
	arrayInitializer | 'new' classOrInterfaceType dims arrayInitializer;

dimExprs:
	dimExpr dimExpr*;

dimExpr:
	annotation* '[' expression ']';

constantExpression:
	expression;

expression:
	lambdaExpression | assignmentExpression;

lambdaExpression:
	lambdaParameters '->' lambdaBody;

lambdaParameters:
	Identifier | '(' formalParameterList? ')' | '(' inferredFormalParameterList ')';

inferredFormalParameterList:
	Identifier (',' Identifier)*;

lambdaBody:
	expression | block;

assignmentExpression:
	conditionalExpression | assignment;

assignment:
	leftHandSide assignmentOperator expression;

leftHandSide:
	expressionName | fieldAccess | arrayAccess;

assignmentOperator:
	'=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '>>>=' | '&=' | '^=' | '|=';

conditionalExpression:
	conditionalOrExpression ('?' expression ':' conditionalExpression)?;

conditionalOrExpression:
	conditionalAndExpression ('||' conditionalAndExpression)*;

conditionalAndExpression:
	inclusiveOrExpression ('&&' inclusiveOrExpression)*;

inclusiveOrExpression:
	exclusiveOrExpression ('|' exclusiveOrExpression)*;

exclusiveOrExpression:
	andExpression ('^' andExpression)*;

andExpression:
	equalityExpression ('&' equalityExpression)*;

equalityExpression:
	instanceOfExpression (('==' | '!=') instanceOfExpression)*;

instanceOfExpression:
	relationalExpression ('instanceof' type)?;

relationalExpression:
	shiftExpression (relationalOp shiftExpression)*;

relationalOp:
	'<' '=' | '>' '=' | '<' | '>';

shiftExpression:
	additiveExpression (shiftOp additiveExpression)*;

shiftOp:
	'<' '<' | '>' '>' '>' | '>' '>';

additiveExpression:
	multiplicativeExpression (('+' | '-') multiplicativeExpression)*;

multiplicativeExpression:
	unaryExpression (('*' | '/' | '%') unaryExpression)*;

unaryExpression:
	preIncrementExpression | preDecrementExpression | '+' unaryExpression | '-' unaryExpression |
	unaryExpressionNotPlusMinus;

preIncrementExpression:
	'++' unaryExpression;

preDecrementExpression:
	'--' unaryExpression;

unaryExpressionNotPlusMinus:
	postfixExpression | '~' unaryExpression | '!' unaryExpression | castExpression;

postfixExpression:
	(primary | expressionName) (postIncrementExpression_lf_postfixExpression |
	postDecrementExpression_lf_postfixExpression)*;

postIncrementExpression:
	postfixExpression '++';

postIncrementExpression_lf_postfixExpression:
	'++';

postDecrementExpression:
	postfixExpression '--';

postDecrementExpression_lf_postfixExpression:
	'--';

castExpression:
	'(' primitiveType ')' unaryExpression | '(' referenceType additionalBound* ')' unaryExpressionNotPlusMinus | '('
	referenceType additionalBound* ')' lambdaExpression;
